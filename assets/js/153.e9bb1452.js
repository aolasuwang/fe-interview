(window.webpackJsonp=window.webpackJsonp||[]).push([[153],{714:function(s,a,t){"use strict";t.r(a);var e=t(10),n=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"脚本运行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#脚本运行"}},[s._v("#")]),s._v(" 脚本运行")]),s._v(" "),t("p",[s._v("建立一个文本文件"),t("a",{attrs:{href:"./example/demo1"}},[s._v("demo1")]),s._v("，以"),t("code",[s._v(".sh")]),s._v("结尾的或者不需要后缀都可以，下面是demo1的内容:")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('#!/bin/bash\nNUM=10\nprintf "输出数字$NUM\\n"\necho $NUM\n')])])]),t("p",[s._v("直接运行是会报错误的，因为没有权限执行（Permission denied），需要给权限。下面方式")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("chmod")]),s._v(" +x ./demo1   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使每个人都有执行的权限")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("chmod")]),s._v(" +rx ./demo1  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使每个人都有读和执行的权限")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("chmod")]),s._v(" u+rx ./demo1 "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 仅仅使脚本文件拥有者有读和执行的权限")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("chmod")]),s._v(" u+x ./demo1  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 只有自己可以执行，其它人不能执行")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("chmod")]),s._v(" ug+x ./demo1 "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 只有自己以及同一群可以执行，其它人不能执行 ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("chmod")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("555")]),s._v(" ./demo1  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使每个人都有读和执行的权限")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("chmod")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("777")]),s._v(" ./demo1 \n")])])]),t("p",[s._v("当前目录下运行 "),t("a",{attrs:{href:"./example/demo1"}},[s._v("demo1")]),s._v(" 脚本")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("./demo1\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输出结果===>")]),s._v("\n输出数字10\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n")])])]),t("p",[s._v("直接运行demo1脚本，这个方法是把脚本给系统中所有其他的用户使用，这个时候需要你将demo1脚本移动到目录"),t("code",[s._v("/usr/local/bin")]),s._v(" 中(必须要有root的权限)，移动到 bin 目录之后，你只需使用 "),t("code",[s._v("demo1")]),s._v(" 加回车就能执行脚本了。")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("demo1\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输出结果===>")]),s._v("\n输出数字10\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n")])])]),t("p",[s._v("通过sh或者bash命令运行脚本，"),t("code",[s._v("sh scriptname")]),s._v(" 运行一个Bash脚本将会禁止所有Bash的扩展特性。")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 你能够运行它用命令")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sh")]),s._v(" demo1\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 另外也也可以用bash来执行")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v(" demo1\n")])])]),t("p",[s._v('脚本以"#!"行开头，行将会命令解释器(sh或是bash)。'),t("code",[s._v("#!/bin/rm")]),s._v(" 当你运行这个脚本时，除了这个脚本消失了之外，你不会发现更多其他的东西。")]),s._v(" "),t("h2",{attrs:{id:"特殊字符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#特殊字符"}},[s._v("#")]),s._v(" 特殊字符")]),s._v(" "),t("h3",{attrs:{id:"注释"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注释"}},[s._v("#")]),s._v(" 注释")]),s._v(" "),t("p",[s._v("以"),t("code",[s._v("#")]),s._v("开头的行就是注释，会被解释器忽略。注释行前面也可以有空白字符。")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#--------------------------------------------")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 这是一个注释")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# author：作者")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# site：https://github.com/jaywcjlove")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#--------------------------------------------")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"A comment will follow."')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 这里可以添加注释.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#                            ^ 注意在#前面可以有空白符")]),s._v("\n")])])]),t("p",[s._v("echo命令给出的一个转义的#字符并不会开始一个注释。同样地，出现在一些参数代换结构和在数值常量表达式中的#字符也同样不会开始一个注释。")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"这里的 # 不会被注释"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'这里的 # 不会被注释'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" 这里的 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("# 不会被注释\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" 这里的 "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 会被注释")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${"),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("PATH")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("#")]),s._v("*"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("}")]),s._v("       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 前面的#是参数代换，不是注释.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$((")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("#"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("101011")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("))")])]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 基本转换，不是注释.")]),s._v("\n")])])]),t("h3",{attrs:{id:"命令分割符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#命令分割符"}},[s._v("#")]),s._v(" 命令分割符")]),s._v(" "),t("p",[s._v("分号"),t("code",[s._v(";")]),s._v("命令分割符，分割符允许在同一行里有两个或更多的命令。执行"),t("a",{attrs:{href:"./example/demo2"}},[s._v("demo2")]),s._v("，会将 demo2 拷贝输出 demo2.bak 。")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" hello"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" there         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输出 hello 和 there")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("filename")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'demo2'")]),s._v("               "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 变量")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" -x "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$filename")]),s._v('"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# 注意："if" and "then"需要分隔符')]),s._v("\n                               "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 思考一下这是为什么?")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"File '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$filename")]),s._v(' exists."')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$filename")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$filename")]),s._v(".bak\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"File '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$filename")]),s._v(' not found."')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("touch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$filename")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"File test complete."')]),s._v("\n")])])]),t("h3",{attrs:{id:"结束符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#结束符"}},[s._v("#")]),s._v(" 结束符")]),s._v(" "),t("p",[s._v("双分号"),t("code",[s._v(";;")]),s._v("，case语句分支的结束符。"),t("a",{attrs:{href:"./example/demo3"}},[s._v("demo3")])]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v(" Keypress\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$Keypress")]),s._v('"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(":lower:"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Lowercase letter"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(":upper:"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Uppercase letter"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("-9"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("         "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Digit"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  *             "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Punctuation, whitespace, or other"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("esac")]),s._v("      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#  允许字符串的范围出现在[]中,")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#+ 或者POSIX风格的[[中.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])])]),t("h3",{attrs:{id:"句号-圆点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#句号-圆点"}},[s._v("#")]),s._v(" 句号/圆点")]),s._v(" "),t("p",[s._v("作为一个文件名的组成部分"),t("code",[s._v(".")]),s._v("，当点"),t("code",[s._v(".")]),s._v("以一个文件名为前缀时，起作用使该文件变成了隐藏文件。这种隐藏文件ls一般是不会显示出来的。")]),s._v(" "),t("p",[s._v("作为目录名时，单个点（.）表示当前目录，两个点(..)表示上一级目录（或称为父目录）。")]),s._v(" "),t("p",[s._v("点(.)字符匹配。作为正则表达式的一部分,匹配字符时，单点（.）表示匹配任意一个字符。")]),s._v(" "),t("h3",{attrs:{id:"引号"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#引号"}},[s._v("#")]),s._v(" 引号")]),s._v(" "),t("p",[s._v("引号一个很重要的作用是保护命令行上的一个参数不被shell解释，而把此参数传递给要执行的程序来处理它。")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("bash$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'[Ff]ile'")]),s._v(" demo*\ndemo2:filename"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'demo2'")]),s._v("\ndemo2:if "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" -x "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$filename")]),s._v('"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# 注意："if" and "then"需要分隔符')]),s._v("\ndemo2:  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"File '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$filename")]),s._v(' exists."')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$filename")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$filename")]),s._v(".bak\n")])])]),t("p",[s._v("引号能改掉echo's不换行的“习惯”。")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("bash$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" -al"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\ntotal "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("24")]),s._v(" drwxr-xr-x "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" kacperwang staff "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("170")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(":47 "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" drwxr-xr-x "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" kacperwang staff "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("170")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v(":29 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(" -rwxr-xr-x "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" kacperwang staff "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("58")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(":20 demo1 -rwxr-xr-x "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" kacperwang staff "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("325")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(":39 demo2 -rwxr-xr-x "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" kacperwang staff "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("899")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("17")]),s._v(":16 demo3\n\nbash$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" -al"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v('"')]),s._v("\ntotal "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("24")]),s._v("\ndrwxr-xr-x  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" kacperwang  staff  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("170")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(":47 "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\ndrwxr-xr-x  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" kacperwang  staff  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("170")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v(":29 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("\n-rwxr-xr-x  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" kacperwang  staff   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("58")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(":20 demo1\n-rwxr-xr-x  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" kacperwang  staff  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("325")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(":39 demo2\n-rwxr-xr-x  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" kacperwang  staff  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("899")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("17")]),s._v(":16 demo3\n")])])]),t("p",[t("strong",[s._v("单引号")])]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("str")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'this is a string'")]),s._v("\n")])])]),t("p",[s._v("单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的"),t("br"),s._v("\n单引号字串中不能出现单引号（对单引号使用转义符后也不行）")]),s._v(" "),t("p",[t("strong",[s._v("双引号")])]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("your_name")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'qinjx'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("str")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello, I know your are '),t("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$your_name")]),t("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v("! "),t("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('"')]),s._v("\n")])])]),t("p",[s._v("双引号里可以有变量"),t("br"),s._v("\n双引号里可以出现转义字符")]),s._v(" "),t("h3",{attrs:{id:"命令替换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#命令替换"}},[s._v("#")]),s._v(" 命令替换")]),s._v(" "),t("p",[s._v('命令替换"`"，将会重新分配一个命令甚至是多个命令的输出；它会将命令的输出如实地添加到另一个上下文中。'),t("a",{attrs:{href:"./example/demo4"}},[s._v("demo4")])]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("script_name")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("basename")]),s._v(" $0"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"The name of this script is '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$script_name")]),s._v('."')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("textfile_listing")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" *"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 变量中包含了当前工作目录下所有的*文件")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$textfile_listing")]),s._v("\n")])])]),t("p",[s._v("通过这个符号，批量删除文件")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" filename"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "filename" 包含了需要被删除的文件列表')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# 可能会产生"参数列表太长"的错误')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 更好的方法是              xargs rm -- < filename ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# ( -- 同时覆盖了那些以"-"开头的文件所产生的特殊情况 )')]),s._v("\n")])])]),t("h2",{attrs:{id:"操作符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#操作符"}},[s._v("#")]),s._v(" 操作符")]),s._v(" "),t("h3",{attrs:{id:"赋值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#赋值"}},[s._v("#")]),s._v(" 赋值")]),s._v(" "),t("p",[s._v("变量赋值，初始化或改变一个变量的值，通用的变量赋值操作符，可以用于数值和字符串的赋值")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("var")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("27")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("category")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("minerals  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "="字符后面不能加空白字符.')]),s._v("\n")])])]),t("p",[s._v('不要把"="赋值操作符和'),t("code",[s._v("=")]),s._v("测试操作符搞混了。")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# = 用于测试操作符")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$string1")]),s._v('"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$string2")]),s._v('"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# if [ "X$string1" = "X$string2" ] 会更安全,')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 它为了防止其中有一个字符串为空时产生错误信息.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# (增加的"X"字符可以互相抵消.) ')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("command")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n")])])]),t("h3",{attrs:{id:"计算操作符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#计算操作符"}},[s._v("#")]),s._v(" 计算操作符")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("操作符")]),s._v(" "),t("th",[s._v("描述")]),s._v(" "),t("th",[s._v("操作符")]),s._v(" "),t("th",[s._v("描述")]),s._v(" "),t("th",[s._v("操作符")]),s._v(" "),t("th",[s._v("描述")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[t("code",[s._v("+")])]),s._v(" "),t("td",[s._v("加")]),s._v(" "),t("td",[t("code",[s._v("/")])]),s._v(" "),t("td",[s._v("除")]),s._v(" "),t("td",[t("code",[s._v("**")])]),s._v(" "),t("td",[s._v("求幂")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("-")])]),s._v(" "),t("td",[s._v("减")]),s._v(" "),t("td",[t("code",[s._v("*")])]),s._v(" "),t("td",[s._v("乘")]),s._v(" "),t("td",[t("code",[s._v("%")])]),s._v(" "),t("td",[s._v("求模"),t("a",{attrs:{href:"./example/demo6"}},[s._v("demo6")])])])])]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# Bash在版本2.02引入了"**"求幂操作符.')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"z=5**3"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"z = '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$z")]),s._v('"')]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# z = 125")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 求模（它返回整数整除一个数后的余数）")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"y=5 % 3"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"y = '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$y")]),s._v('"')]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# y = 2")]),s._v("\n")])])]),t("table",[t("thead",[t("tr",[t("th",[s._v("操作符")]),s._v(" "),t("th",[s._v("描述")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[t("code",[s._v("+=")])]),s._v(" "),t("td",[s._v("加等(plus-equal) 把原变量值增加一个常量并重新赋值给变量")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("-=")])]),s._v(" "),t("td",[s._v("减等(minus-equal) 把原变量值减少一个常量并重新赋值给变量")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("*=")])]),s._v(" "),t("td",[s._v("乘等(times-equal) 把原变量值乘上一个常量并重新赋值给变量")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("/=")])]),s._v(" "),t("td",[s._v("除等(slash-equal) 把原变量值除以一个常量并重新赋值给变量")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("%=")])]),s._v(" "),t("td",[s._v("模等(mod-equal) 把原变量值除以一个常量整除（即取模）并重新赋余数的值给变量")])])])]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"var += 5"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 会使变量var值加了5并把值赋给var.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"var *= 4"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使变量var的值乘上4并把值赋给var.")]),s._v("\n")])])]),t("p",[s._v("例子：")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"./example/demo8"}},[s._v("用10种不同的方法计数到11")])]),s._v(" "),t("li",[t("a",{attrs:{href:"./example/demo8"}},[s._v("最大公约数")])]),s._v(" "),t("li",[t("a",{attrs:{href:"./example/demo9"}},[s._v("整数变量符号的长整数测试")]),s._v("，到2.05b版本为止，Bash支持64位的整数，以前的版本会有长度溢出错误。")]),s._v(" "),t("li",[t("a",{attrs:{href:"./example/demo10"}},[s._v("Bash不能处理浮点计算,它会把含有小数点的数当成字符串。")])])]),s._v(" "),t("h3",{attrs:{id:"位操作符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#位操作符"}},[s._v("#")]),s._v(" 位操作符")]),s._v(" "),t("p",[s._v("位操作符很少在脚本中使用。他们主要用于操作和测试从端口或sockets中读到的数据。“位运算”更多地用于编译型的语言，比如说C和C++，它们运行起来快地像飞。")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("操作符")]),s._v(" "),t("th",[s._v("描述")]),s._v(" "),t("th",[s._v("操作符")]),s._v(" "),t("th",[s._v("描述")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[t("code",[s._v("<<")])]),s._v(" "),t("td",[s._v("位左移（每移一位相当乘以2）")]),s._v(" "),t("td",[t("code",[s._v("|")])]),s._v(" "),t("td",[s._v("位或")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("<<=")])]),s._v(" "),t("td",[s._v("位左移赋值")]),s._v(" "),t("td",[t("code",[s._v("|=")])]),s._v(" "),t("td",[s._v("位或赋值")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v(">>")])]),s._v(" "),t("td",[s._v("位右移（每移一位相当除以2）")]),s._v(" "),t("td",[t("code",[s._v("~")])]),s._v(" "),t("td",[s._v("位反")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v(">>=")])]),s._v(" "),t("td",[s._v('"位右移赋值"（和<<=相反）')]),s._v(" "),t("td",[t("code",[s._v("!")])]),s._v(" "),t("td",[s._v("位非")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("&")])]),s._v(" "),t("td",[s._v("位与")]),s._v(" "),t("td",[t("code",[s._v("^")])]),s._v(" "),t("td",[s._v("位或")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("&=")])]),s._v(" "),t("td",[s._v("位于赋值")]),s._v(" "),t("td",[t("code",[s._v("^=")])]),s._v(" "),t("td",[s._v("位或赋值")])])])]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# <<=")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "位左移赋值"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"var <<= 2"')]),s._v(" 结果使var的二进制值左移了二位（相当于乘以4）\n")])])]),t("h3",{attrs:{id:"逻辑操作符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#逻辑操作符"}},[s._v("#")]),s._v(" 逻辑操作符")]),s._v(" "),t("p",[s._v("逻辑与"),t("code",[s._v("&&")])]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$condition1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$condition2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 等同于:  if [ $condition1 -a $condition2 ]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果condition1和condition2都为真则返回真...")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$condition1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$condition2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Also works.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 注意&&操作不能在[ ... ]结构中使用.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("逻辑或"),t("code",[s._v("||")])]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$condition1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$condition2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 等同于:  if [ $condition1 -o $condition2 ]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果condition1和condition2有一个为真则返回真...")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$condition1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$condition2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Also works.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 注意||操作不能在[ ... ]结构中使用.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("使用&&和||进行混合条件测试"),t("a",{attrs:{href:"./example/demo11"}},[s._v("demo11")]),s._v("。在算术计算的环境中，&&和||操作符也可以使用。")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("bash$ echo $(( 1 && 2 )) $((3 && 0)) $((4 || 0)) $((0 || 0))\n 1 0 1 0\n")])])]),t("h3",{attrs:{id:"逗号操作符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#逗号操作符"}},[s._v("#")]),s._v(" 逗号操作符")]),s._v(" "),t("p",[s._v("逗号"),t("code",[s._v(",")]),s._v("操作符连接两个或更多的算术操作。所有的操作都被求值(可能会有副作用)，但只返回最后一个操作的结构。"),t("a",{attrs:{href:"./example/demo5"}},[s._v("demo5")])]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"t1 = '),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("((")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("))")])]),s._v('"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"t1 = '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$t1")]),s._v('"')]),s._v("               "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# t1 = 11")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"t2 = '),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("((")]),s._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("))")])]),s._v('"')]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# 初始化"a"并求"t2"的值.')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"t2 = '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$t2")]),s._v("    a = "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$a")]),s._v('"')]),s._v("     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# t2 = 5    a = 9")]),s._v("\n")])])]),t("h2",{attrs:{id:"变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[s._v("#")]),s._v(" 变量")]),s._v(" "),t("p",[s._v("变量，是脚本编程中的如何进行数据表现的办法。它们可以在算术计算中作为操作数，在一个字符串表达式中作为符号表达抽象的意义或是其他的其它意义。变量是表示计算机内存中保存一种数据需要占的一个位置或一组的位置的标识。")]),s._v(" "),t("h3",{attrs:{id:"变量值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变量值"}},[s._v("#")]),s._v(" 变量值")]),s._v(" "),t("p",[s._v("如果variable1是一个变量的名字，那么$variable1就是引用这个变量的值――即这个变量它包含的数据。"),t("a",{attrs:{href:"./example/demo12"}},[s._v("变量赋值与替换例子")])]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("t1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$t1")]),s._v("\n")])])]),t("p",[s._v("一个未初始化的变量有一个”null”值――表示从没有被赋值过（注意null值不等于零）。在一个变量从未赋值之前就使用它通常会引起问题。然而，仍然有可能在执行算术计算时使用一个未初始化的变量。")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$uninitialized")]),s._v('"')]),s._v("      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# (blank line)")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"uninitialized += 5"')]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Add 5 to it.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$uninitialized")]),s._v('"')]),s._v("      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 5")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#  结论:")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#  一个未初始化的变量没有值，")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#+ 但是似乎它在算术计算中的值是零。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#  这个无法证实（也可能是不可移植）的行为。")]),s._v("\n")])])]),t("h3",{attrs:{id:"定义变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定义变量"}},[s._v("#")]),s._v(" 定义变量")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 变量名不加美元符号")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("your_var")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"elaine"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 重新定义")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("your_var")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"newname"')]),s._v("\n")])])]),t("p",[t("strong",[s._v("注意⚠️")])]),s._v(" "),t("ol",[t("li",[s._v("首个字符必须为字母（a-z，A-Z）。")]),s._v(" "),t("li",[s._v("中间不能有空格，可以使用下划线（_），等号左右也不能有空格。")]),s._v(" "),t("li",[s._v("不能使用标点符号。")]),s._v(" "),t("li",[s._v("不能使用bash里的关键字（可用help命令查看保留关键字）。")])]),s._v(" "),t("h3",{attrs:{id:"只读变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#只读变量"}},[s._v("#")]),s._v(" 只读变量")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/bin/bash")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("github")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://jaywcjlove.github.io"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("readonly")]),s._v(" github\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("github")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://www.github.com"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 运行脚本，结果如下：")]),s._v("\n/bin/sh: NAME: This variable is "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v(" only.\n")])])]),t("h3",{attrs:{id:"使用变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用变量"}},[s._v("#")]),s._v(" 使用变量")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("your_var")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"github"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$your_var")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${your_var}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"your name is '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${your_var}")]),s._v('-l"')]),s._v("\n")])])]),t("h3",{attrs:{id:"删除变量unset"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#删除变量unset"}},[s._v("#")]),s._v(" 删除变量unset")]),s._v(" "),t("p",[s._v("变量被删除后不能再次使用。unset 命令不能删除只读变量。")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("myUrl")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://jaywcjlove.github.io"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("unset")]),s._v(" myUrl\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$myUrl")]),s._v("\n")])])]),t("h3",{attrs:{id:"变量类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变量类型"}},[s._v("#")]),s._v(" 变量类型")]),s._v(" "),t("p",[s._v('不同与许多其他的编程语言，Bash不以"类型"来区分变量。本质上来说，Bash变量是字符串，但是根据环境的不同，Bash允许变量有整数计算和比较。其中的决定因素是变量的值是不是只含有数字。')]),s._v(" "),t("ol",[t("li",[t("strong",[s._v("局部变量")]),s._v(" 局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。")]),s._v(" "),t("li",[t("strong",[s._v("环境变量")]),s._v(" 所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。")]),s._v(" "),t("li",[t("strong",[s._v("shell变量")]),s._v(" shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行")])]),s._v(" "),t("h3",{attrs:{id:"内部变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内部变量"}},[s._v("#")]),s._v(" 内部变量")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("内部变量")]),s._v(" "),t("th",[s._v("说明")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("$BASH")]),s._v(" "),t("td",[s._v("Bash二进制程序文件的路径")])]),s._v(" "),t("tr",[t("td",[s._v("$BASH_ENV")]),s._v(" "),t("td",[s._v("该环境变量保存一个Bash启动文件路径，当启动一个脚本程序时会去读该环境变量指定的文件。")])]),s._v(" "),t("tr",[t("td",[s._v("$BASH_SUBSHELL")]),s._v(" "),t("td",[s._v("一个指示子shell(subshell)等级的变量。它是Bash版本3新加入的。")])]),s._v(" "),t("tr",[t("td",[s._v("$BASH_VERSINFO[n]")]),s._v(" "),t("td",[s._v("这个数组含有6个元素，指示了安装的Bash版本的信息。它和$BASH_VERSION相似，但它们还是有一些小小的不同。")])]),s._v(" "),t("tr",[t("td",[s._v("$BASH_VERSION")]),s._v(" "),t("td",[s._v("安装在系统里的Bash版本。")])]),s._v(" "),t("tr",[t("td",[s._v("$DIRSTACK")]),s._v(" "),t("td",[s._v("在目录堆栈里面最顶端的值(它受pushd和popd的控制)")])]),s._v(" "),t("tr",[t("td",[s._v("$EDITOR")]),s._v(" "),t("td",[s._v("由脚本调用的默认的编辑器，一般是vi或是emacs。")])]),s._v(" "),t("tr",[t("td",[s._v("$EUID")]),s._v(" "),t("td",[s._v("有效用户ID")])]),s._v(" "),t("tr",[t("td",[s._v("$FUNCNAME")]),s._v(" "),t("td",[s._v("当前函数的名字")])]),s._v(" "),t("tr",[t("td",[s._v("$GLOBIGNORE")]),s._v(" "),t("td",[s._v("由通配符(globbing)扩展的一列文件名模式。")])]),s._v(" "),t("tr",[t("td",[s._v("$GROUPS")]),s._v(" "),t("td",[s._v("目前用户所属的组")])]),s._v(" "),t("tr",[t("td",[s._v("$HOME")]),s._v(" "),t("td",[s._v("用户的家目录，通常是/home/username")])]),s._v(" "),t("tr",[t("td",[s._v("$HOSTNAME")]),s._v(" "),t("td",[s._v("在系统启动时由一个初始化脚本中用hostname命令给系统指派一个名字。然而，gethostname()函数能设置Bash内部变量E$HOSTNAME。")])]),s._v(" "),t("tr",[t("td",[s._v("$HOSTTYPE")]),s._v(" "),t("td",[s._v("机器类型，像$MACHTYPE一样标识系统硬件。")])]),s._v(" "),t("tr",[t("td",[s._v("$IFS")]),s._v(" "),t("td",[s._v("内部字段分隔符")])]),s._v(" "),t("tr",[t("td",[s._v("$IGNOREEOF")]),s._v(" "),t("td",[s._v("忽略EOF：在退出控制台前有多少文件结尾标识（end-of-files,control-D）会被shell忽略。")])]),s._v(" "),t("tr",[t("td",[s._v("$LC_COLLATE")]),s._v(" "),t("td",[s._v("它常常在.bashrc或/etc/profile文件里被设置，它控制文件名扩展和模式匹配的展开顺序。")])]),s._v(" "),t("tr",[t("td",[s._v("$LINENO")]),s._v(" "),t("td",[s._v("这个变量表示在本shell脚本中该变量出现时所在的行数。它只在脚本中它出现时有意义，它一般可用于调试。")])]),s._v(" "),t("tr",[t("td",[s._v("$MACHTYPE")]),s._v(" "),t("td",[s._v("机器类型，识别系统的硬件类型。")])]),s._v(" "),t("tr",[t("td",[s._v("$OLDPWD")]),s._v(" "),t("td",[s._v('上一次工作的目录("OLD-print-working-directory",你上一次进入工作的目录)')])]),s._v(" "),t("tr",[t("td",[s._v("$TZ")]),s._v(" "),t("td",[s._v("时区")])]),s._v(" "),t("tr",[t("td",[s._v("$MAILCHECK")]),s._v(" "),t("td",[s._v("每隔多少秒检查是否有新的信件")])]),s._v(" "),t("tr",[t("td",[s._v("$OSTYPE")]),s._v(" "),t("td",[s._v("操作系统类型")])]),s._v(" "),t("tr",[t("td",[s._v("$MANPATH man")]),s._v(" "),t("td",[s._v("指令的搜寻路径")])]),s._v(" "),t("tr",[t("td",[s._v("$PATH")]),s._v(" "),t("td",[s._v("可执行程序文件的搜索路径。一般有/usr/bin/, /usr/X11R6/bin/, /usr/local/bin,等等。")])]),s._v(" "),t("tr",[t("td",[s._v("$PIPESTATUS")]),s._v(" "),t("td",[s._v("此数组变量保存了最后执行的前台管道的退出状态。相当有趣的是，它不一定和最后执行的命令的退出状态一样。")])]),s._v(" "),t("tr",[t("td",[s._v("$PPID")]),s._v(" "),t("td",[s._v("一个进程的$PPID变量保存它的父进程的进程ID(pid)。用这个变量和pidof命令比较。")])]),s._v(" "),t("tr",[t("td",[s._v("$PROMPT_COMMAND")]),s._v(" "),t("td",[s._v("这个变量在主提示符前($PS1显示之前)执行它的值里保存的命令。")])]),s._v(" "),t("tr",[t("td",[s._v("$PS1")]),s._v(" "),t("td",[s._v("这是主提示符（第一提示符），它能在命令行上看见。")])]),s._v(" "),t("tr",[t("td",[s._v("$PS2")]),s._v(" "),t("td",[s._v('副提示符（第二提示符），它在期望有附加的输入时能看见。它显示像">"的提示。')])]),s._v(" "),t("tr",[t("td",[s._v("$PS3")]),s._v(" "),t("td",[s._v("第三提示符。它在一个select循环里显示 (参考例子 10-29)。")])]),s._v(" "),t("tr",[t("td",[s._v("$PS4")]),s._v(" "),t("td",[s._v('第四提示符，它在用-x选项调用一个脚本时的输出的每一行开头显示。它通常显示像"+"的提示。')])]),s._v(" "),t("tr",[t("td",[s._v("$PWD")]),s._v(" "),t("td",[s._v("工作目录(即你现在所处的目录) ，它类似于内建命令pwd。")])]),s._v(" "),t("tr",[t("td",[s._v("$REPLY")]),s._v(" "),t("td",[s._v("没有变量提供给read命令时的默认变量．这也适用于select命令的目录，但只是提供被选择的变量项目编号而不是变量本身的值。")])]),s._v(" "),t("tr",[t("td",[s._v("$SECONDS")]),s._v(" "),t("td",[s._v("脚本已运行的秒数。")])]),s._v(" "),t("tr",[t("td",[s._v("$SHELLOPTS")]),s._v(" "),t("td",[s._v("已经激活的shell选项列表，它是一个只读变量。")])]),s._v(" "),t("tr",[t("td",[s._v("$SHLVL")]),s._v(" "),t("td",[s._v("SHELL的嵌套级别．指示了Bash被嵌套了多深．在命令行里，$SHLVL是1，因此在一个脚本里，它是2")])]),s._v(" "),t("tr",[t("td",[s._v("$TMOUT")]),s._v(" "),t("td",[s._v("如果$TMOUT环境变量被设为非零值时间值time，那么经过time这么长的时间后，shell提示符会超时．这将使此shell退出登录")])]),s._v(" "),t("tr",[t("td",[s._v("$UID")]),s._v(" "),t("td",[s._v("用户ID号，这是当前用户的用户标识号，它在/etc/passwd文件中记录。")])])])]),s._v(" "),t("h3",{attrs:{id:"位置参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#位置参数"}},[s._v("#")]),s._v(" 位置参数")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("参数处理")]),s._v(" "),t("th",[s._v("说明")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[t("code",[s._v("$#")])]),s._v(" "),t("td",[s._v("传递到脚本的参数个数")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("$*")])]),s._v(" "),t("td",[s._v('以一个单字符串显示所有向脚本传递的参数。如"∗"用「"」括起来的情况、以"1 2…n"的形式输出所有参数。')])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("$$")])]),s._v(" "),t("td",[s._v("脚本运行的当前进程ID号")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("$!")])]),s._v(" "),t("td",[s._v("后台运行的最后一个进程的ID号")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("$@")])]),s._v(" "),t("td",[s._v('与∗相同，但是使用时加引号，并在引号中返回每个参数。如"@"用「"」括起来的情况、以"1""2" … "$n" 的形式输出所有参数。')])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("$-")])]),s._v(" "),t("td",[s._v("显示Shell使用的当前选项，与set命令功能相同。")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("$?")])]),s._v(" "),t("td",[s._v("显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。")])])])]),s._v(" "),t("h3",{attrs:{id:"参数替换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参数替换"}},[s._v("#")]),s._v(" 参数替换")]),s._v(" "),t("p",[t("strong",[s._v("${parameter}")]),s._v("：和$parameter是相同的，都是表示变量parameter的值，可以把变量和字符串连接。")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("your_id")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${"),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("USER")]),s._v("}")]),s._v("-on-"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${"),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("HOSTNAME")]),s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$your_id")]),s._v('"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Old \\'),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$PATH")]),s._v(" = "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$PATH")]),s._v('"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("PATH")])]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${"),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("PATH")]),s._v("}")]),s._v(":/opt/bin  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#在脚本的生存期内，能额外增加路径/opt/bin到环境变量$PATH中去.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"New \\'),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$PATH")]),s._v(" = "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$PATH")]),s._v('"')]),s._v("\n")])])]),t("p",[t("strong",[s._v("${parameter-default}, ${parameter:-default}")]),s._v("：如果变量没有被设置，使用默认值。"),t("code",[s._v("${parameter-default}")]),s._v("和"),t("code",[s._v("${parameter:-default}")]),s._v("几乎是相等的。它们之间的差别是：当一个参数已被声明，但是值是NULL的时候两者不同。")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${username-`whoami`}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果变量$username还没有被设置，则把命令`whoami`的结果赋给该变量")]),s._v("\n")])])]),t("p",[t("strong",[s._v("${parameter=default}, ${parameter:=default}")]),s._v("：如果变量parameter没有设置，把它设置成默认值。除了引起的当变量被声明且值是空值时有些不同外，两种形式几乎相等。")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"===== \\'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${parameter+alt_value}")]),s._v(' ====="')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("a")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${param1+xyz}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a = '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$a")]),s._v('"')]),s._v("      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# a =")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("param2")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("a")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${param2+xyz}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a = '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$a")]),s._v('"')]),s._v("      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# a = xyz")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("param3")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("a")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${param3+xyz}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a = '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$a")]),s._v('"')]),s._v("      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# a = xyz")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"====== \\'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${parameter"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":+")]),s._v("alt_value}")]),s._v(' ======"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("a")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${param4"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":+")]),s._v("xyz}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a = '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$a")]),s._v('"')]),s._v("      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# a =")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("param5")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("a")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${param5"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":+")]),s._v("xyz}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a = '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$a")]),s._v('"')]),s._v("      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# a =")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 产生与a=${param5+xyz}不同。")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("param6")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("a")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${param6+xyz}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a = '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$a")]),s._v('"')]),s._v("      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# a = xyz")]),s._v("\n")])])]),t("p",[t("strong",[s._v("${parameter?err_msg}, ${parameter:?err_msg}")]),s._v("：如果变量parameter已经设置，则使用该值，否则打印err_msg错误信息。"),t("a",{attrs:{href:"./example/demo20"}},[s._v("demo20")])]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/bin/bash")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# 变量替换和"usage"信息')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v('${1?"Usage'),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(' $0 ARGUMENT"}')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#  如果没有提供命令行参数则脚本在这儿就退出了,")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#+ 并打印了错误信息.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#    usage-message.sh: 1: Usage: usage-message.sh ARGUMENT")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"These two lines echo only if command-line parameter given."')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"command line parameter = '),t("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),t("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v('"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 仅在命令行参数提供时，才会在这儿退出.")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 分别检查有命令行参数和没有命令行参数时的退出状态。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# 如果有命令行参数,则"$?"为0.')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# 否则, "$?"为1.')]),s._v("\n")])])]),t("p",[t("strong",[s._v("${#var}")]),s._v("：字符串长度（即变量$var的字符个数）。对于数组来说，${#array}是数组的第一个元素的升序。"),t("code",[s._v("${#*}和${#@}")]),s._v(" 表示位置参数的个数。对于一个数组来说，"),t("code",[s._v("${#array[*]}")]),s._v("和"),t("code",[s._v("${#array[@]}")]),s._v("表示数组中元素的个数。")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("E_NO_ARGS")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("65")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$#")]),s._v(" -eq "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 必须要有命令行参数给这个演示程序.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Please invoke this script with one or more command-line arguments."')]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$E_NO_ARGS")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("  \n\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("var01")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("abcdEFGH28ij\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"var01 = '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${var01}")]),s._v('"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Length of var01 = '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("#")]),s._v("var01}")]),s._v('"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 现在,让我们在变量值内嵌入一个空格.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("var02")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"abcd EFGH28ij"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"var02 = '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${var02}")]),s._v('"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Length of var02 = '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("#")]),s._v("var02}")]),s._v('"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Number of command-line arguments passed to script = '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("#")]),s._v("@}")]),s._v('"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Number of command-line arguments passed to script = '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("#")]),s._v("*}")]),s._v('"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])])]),t("p",[t("strong",[s._v("${var#Pattern}, ${var##Pattern}")]),s._v("：删除从$var前端开始的最短或最长匹配$Pattern的字符串。"),t("a",{attrs:{href:"./example/demo22"}},[s._v("demo22")])]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("basename")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$PWD")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 当前工作目录的基本名字.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${"),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("PWD")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("##")]),s._v("*"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("}")]),s._v('"')]),s._v("           "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 当前工作目录的基本名字.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("basename")]),s._v(" $0"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("          "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 脚本名.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$0")]),s._v("                     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 脚本名.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${0"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("##")]),s._v("*"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("}")]),s._v('"')]),s._v("             "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 脚本名.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("filename")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("test.data\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${filename"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("##")]),s._v("*.}")]),s._v('"')]),s._v("      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# data")]),s._v("\n                            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 文件的扩展名.")]),s._v("\n")])])]),t("h3",{attrs:{id:"declare-typeset"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#declare-typeset"}},[s._v("#")]),s._v(" declare/typeset")]),s._v(" "),t("p",[s._v("declare或typeset内建命令(它们是完全相同的)可以用来限定变量的属性。这是在某些编程语言中使用的定义类型不严格的方式。")]),s._v(" "),t("ul",[t("li",[s._v("命令declare是bash版本2之后才有的。")]),s._v(" "),t("li",[s._v("命令typeset也可以在ksh脚本中运行。")])]),s._v(" "),t("p",[t("strong",[s._v("选项")])]),s._v(" "),t("p",[t("a",{attrs:{href:"./example/demo23"}},[s._v("用declare来声明变量类型")])]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("参数")]),s._v(" "),t("th",[s._v("说明")]),s._v(" "),t("th",[s._v("例子")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[t("code",[s._v("-r")])]),s._v(" "),t("td",[s._v("只读")]),s._v(" "),t("td",[t("code",[s._v("declare -r var1")])])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("-i")])]),s._v(" "),t("td",[s._v("整数")]),s._v(" "),t("td",[t("code",[s._v("declare -i number;number=3;")])])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("-a")])]),s._v(" "),t("td",[s._v("数组")]),s._v(" "),t("td",[t("code",[s._v("declare -a indices")])])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("-f")])]),s._v(" "),t("td",[s._v("函数")]),s._v(" "),t("td",[t("code",[s._v("declare -f")]),s._v(" 会列出所有在此脚本前面已定义的函数")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("-x export")])]),s._v(" "),t("td",[s._v("函这样将声明一个变量作为脚本的环境变量而被导出。")]),s._v(" "),t("td",[t("code",[s._v("declare -x var3")])])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("-x var=$value")])]),s._v(" "),t("td",[s._v("declare命令允许在声明变量类型的时候同时给变量赋值。")]),s._v(" "),t("td",[t("code",[s._v("declare -x var3=373")])])])])]),s._v(" "),t("h3",{attrs:{id:"变量间接引用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变量间接引用"}},[s._v("#")]),s._v(" 变量间接引用")]),s._v(" "),t("p",[s._v("假设一个变量的值是第二个变量的名字。这样要如何才能从第一个变量处重新获得第二个变量的值？例如，"),t("code",[s._v("a=letter_of_alphabet")]),s._v("和"),t("code",[s._v("letter_of_alphabet=z")]),s._v("，是否能由a引用得到z ? 这确实可以办到，这种技术被称为间接引用。")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("a")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("letter_of_alphabet   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# 变量"a"保存着另外一个变量的名字.')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("letter_of_alphabet")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("z\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 直接引用.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a = '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$a")]),s._v('"')]),s._v("          "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# a = letter_of_alphabet")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 间接引用.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("eval")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("a")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$$")]),s._v("a\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Now a = '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$a")]),s._v('"')]),s._v("      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 现在 a = z")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])])]),t("h3",{attrs:{id:"random"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#random"}},[s._v("#")]),s._v(" $RANDOM")]),s._v(" "),t("p",[s._v("$RANDOM是Bash的一个返回伪随机整数(范围为0 - 32767)的内部函数(而不是一个常量或变量)，它不应该用于产生加密的密钥。"),t("a",{attrs:{href:"./example/demo25"}},[s._v("demo25")])]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 模拟掷骰子.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("SPOTS")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 模除 6 会产生 0 - 5 之间的值.")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 结果增1会产生 1 - 6 之间的值.")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 多谢Paulo Marcel Coelho Aragao的简化.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("die1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("die2")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 这会比仅设置SPOTS=7且不增1好?为什么会好？为什么会不好?")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 单独地掷每个骰子，然后计算出正确的机率.")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"die1 = '),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$RANDOM")]),s._v(" % "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$SPOTS")]),s._v(' +1"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 掷第一个.")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"die2 = '),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$RANDOM")]),s._v(" % "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$SPOTS")]),s._v(' +1"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 掷第二个.")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#  上面的算术式中，哪个操作符优先计算 --")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#+ 取模 (%) 还是 加法 (+)?")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"throw = '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$die1")]),s._v(" + "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$die2")]),s._v('"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Throw of the dice = '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$throw")]),s._v('"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])])]),t("h3",{attrs:{id:"双括号结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#双括号结构"}},[s._v("#")]),s._v(" 双括号结构")]),s._v(" "),t("p",[s._v("用"),t("code",[s._v("((...))")]),s._v("结构来使用C风格操作符来处理变量。"),t("a",{attrs:{href:"./example/demo26"}},[s._v("demo26")])]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("((")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("23")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("))")])]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# 以C风格来设置一个值，在"="两边可以有空格.')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a (initial value) = '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$a")]),s._v('"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("((")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("))")])]),s._v("     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# C风格的计算后自增.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a (after a++) = '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$a")]),s._v('"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("((")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("))")])]),s._v("     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# C风格的计算后自减.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a (after a--) = '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$a")]),s._v('"')]),s._v("\n\n\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("((")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("a "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("))")])]),s._v("     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# C风格的计算前自增.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a (after ++a) = '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$a")]),s._v('"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("((")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("a "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("))")])]),s._v("     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# C风格的计算前自减.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a (after --a) = '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$a")]),s._v('"')]),s._v("\n")])])]),t("h2",{attrs:{id:"转义字符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#转义字符"}},[s._v("#")]),s._v(" 转义字符")]),s._v(" "),t("p",[s._v("在单个字符前面的转义符"),t("code",[s._v("\\")]),s._v("告诉shell不必特殊解释这个字符，只把它当成字面上的意思。但在一些命令和软件包里，比如说echo和sed,转义一个字符可能会引起一个相反的效果－－因为它们可能触发那个字符的特殊意思。"),t("a",{attrs:{href:"./example/demo13"}},[s._v("demo13")])]),s._v(" "),t("p",[t("code",[s._v("\\r")]),s._v(" 回车"),t("br"),s._v(" "),t("code",[s._v("\\n")]),s._v(" 换行"),t("br"),s._v(" "),t("code",[s._v("\\c")]),s._v(" 不换行"),t("br"),s._v(" "),t("code",[s._v("\\t")]),s._v(" 水平制表符"),t("br"),s._v(" "),t("code",[s._v("\\v")]),s._v(" 垂直制表符"),t("br"),s._v(" "),t("code",[s._v("\\a")]),s._v(" 表示“警告”（蜂鸣或是闪动）"),t("br"),s._v(" "),t("code",[s._v("\\\\")]),s._v(" 反斜杠字符"),t("br"),s._v(" "),t("code",[s._v("\\0ddd")]),s._v(" 将自负表示成1到3的八进制数值")]),s._v(" "),t("h2",{attrs:{id:"退出-退出状态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#退出-退出状态"}},[s._v("#")]),s._v(" 退出/退出状态")]),s._v(" "),t("p",[t("code",[s._v("$?")]),s._v(" 变量用于测试脚本中的命令执行结果非常的有用。"),t("a",{attrs:{href:"./example/demo14"}},[s._v("demo14")])]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" hello\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$?")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 因为上一条命令执行成功，打印0。")]),s._v("\n\nlskdf      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 无效命令。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$?")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 因为上面的无效命令执行失败，打印一个非零的值。")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("113")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 返回113状态码给shell。")]),s._v("\n           "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# 可以运行脚本结束后立即执行命令"echo $?" 检验。')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#  依照惯例,命令'exit 0'表示执行成功,")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#+ 当产生一个非零退出值时表示一个错误或是反常的条件。")]),s._v("\n")])])]),t("p",[s._v("下面这些退出状态码，用于保留(reserved meanings) 的含义，不应该在用户脚本使用。")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("Exit Code Number")]),s._v(" "),t("th",[s._v("Meaning")]),s._v(" "),t("th",[s._v("Example")]),s._v(" "),t("th",[s._v("Comments")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("1")]),s._v(" "),t("td",[s._v("Catchall for general errors")]),s._v(" "),t("td",[t("code",[s._v('let "var1 = 1/0"')])]),s._v(" "),t("td",[s._v('Miscellaneous errors, such as "divide by zero"')])]),s._v(" "),t("tr",[t("td",[s._v("2")]),s._v(" "),t("td",[s._v("Misuse of shell builtins (according to Bash documentation)")]),s._v(" "),t("td",[s._v("-")]),s._v(" "),t("td",[s._v("Seldom seen, usually defaults to exit code 1")])]),s._v(" "),t("tr",[t("td",[s._v("126")]),s._v(" "),t("td",[s._v("Command invoked cannot execute")]),s._v(" "),t("td",[s._v("-")]),s._v(" "),t("td",[s._v("Permission problem or command is not an executable")])]),s._v(" "),t("tr",[t("td",[s._v("127")]),s._v(" "),t("td",[s._v('"command not found"')]),s._v(" "),t("td",[s._v("-")]),s._v(" "),t("td",[s._v("Possible problem with $PATH or a typo")])]),s._v(" "),t("tr",[t("td",[s._v("128")]),s._v(" "),t("td",[s._v("Invalid argument to exit")]),s._v(" "),t("td",[t("code",[s._v("exit 3.14159")])]),s._v(" "),t("td",[s._v("exit takes only integer args in the range 0 - 255 (see footnote)")])]),s._v(" "),t("tr",[t("td",[s._v("128+n")]),s._v(" "),t("td",[s._v('Fatal error signal "n"')]),s._v(" "),t("td",[t("code",[s._v("kill -9 $PPID")])]),s._v(" "),t("td",[s._v("of script $? returns 137 (128 + 9)")])]),s._v(" "),t("tr",[t("td",[s._v("130")]),s._v(" "),t("td",[s._v("Script terminated by Control-C")]),s._v(" "),t("td",[s._v("-")]),s._v(" "),t("td",[s._v("Control-C is fatal error signal 2, (130 = 128 + 2, see above)")])]),s._v(" "),t("tr",[t("td",[s._v("255*")]),s._v(" "),t("td",[s._v("Exit status out of range")]),s._v(" "),t("td",[t("code",[s._v("exit -1")])]),s._v(" "),t("td",[s._v("exit takes only integer args in the range 0 - 255")])])])]),s._v(" "),t("h2",{attrs:{id:"测试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#测试"}},[s._v("#")]),s._v(" 测试")]),s._v(" "),t("h3",{attrs:{id:"测试结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#测试结构"}},[s._v("#")]),s._v(" 测试结构")]),s._v(" "),t("p",[s._v("一个if/then结构能包含嵌套的比较和测试。")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Testing '),t("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v("false"),t("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v('"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"false"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("              "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#  "false"是一个字符串.')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v("false"),t("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v(' is true."')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#+ 它被测试为真.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v("false"),t("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v(' is false."')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "false"为真.')]),s._v("\n")])])]),t("p",[s._v("Else if 和 elif")]),s._v(" "),t("p",[s._v("elif是else if的缩写。作用是在一个if/then里嵌入一个内部的if/then结构。")]),s._v(" "),t("p",[t("code",[s._v("[[]]")]),s._v("结构比Bash版本的"),t("code",[s._v("[]")]),s._v("更通用。用"),t("code",[s._v("[[ ... ]]")]),s._v("测试结构比用"),t("code",[s._v("[ ... ]")]),s._v("更能防止脚本里的许多逻辑错误。比如说，"),t("code",[s._v("&&")]),s._v(","),t("code",[s._v("||")]),s._v(","),t("code",[s._v("<")]),s._v("和"),t("code",[s._v(">")]),s._v("操作符能在一个"),t("code",[s._v("[[]]")]),s._v("测试里通过，但在"),t("code",[s._v("[]")]),s._v("结构会发生错误。")]),s._v(" "),t("p",[t("code",[s._v("(( ))")]),s._v("结构扩展并计算一个算术表达式的值。如果表达式值为0，会返回1或假作为退出状态码。一个非零值的表达式返回一个0或真作为退出状态码。这个结构和先前test命令及"),t("code",[s._v("[]")]),s._v("结构的讨论刚好相反。")]),s._v(" "),t("h3",{attrs:{id:"文件测试操作符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#文件测试操作符"}},[s._v("#")]),s._v(" 文件测试操作符")]),s._v(" "),t("p",[s._v("如果下面的条件成立返回真。"),t("a",{attrs:{href:"./example/demo15"}},[s._v("demo15")])]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("操作符")]),s._v(" "),t("th",[s._v("描述")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("-e")]),s._v(" "),t("td",[s._v("文件存在")])]),s._v(" "),t("tr",[t("td",[s._v("-a")]),s._v(" "),t("td",[s._v("文件存在，这个和-e的作用一样. 它是不赞成使用的，所以它的用处不大。")])]),s._v(" "),t("tr",[t("td",[s._v("-f")]),s._v(" "),t("td",[s._v("文件是一个普通文件(不是一个目录或是一个设备文件)")])]),s._v(" "),t("tr",[t("td",[s._v("-s")]),s._v(" "),t("td",[s._v("文件大小不为零")])]),s._v(" "),t("tr",[t("td",[s._v("-d")]),s._v(" "),t("td",[s._v("文件是一个目录")])]),s._v(" "),t("tr",[t("td",[s._v("-b")]),s._v(" "),t("td",[s._v("文件是一个块设备(软盘，光驱，等等。)")])]),s._v(" "),t("tr",[t("td",[s._v("-c")]),s._v(" "),t("td",[s._v("文件是一个字符设备(键盘，调制解调器，声卡，等等。)")])]),s._v(" "),t("tr",[t("td",[s._v("-p")]),s._v(" "),t("td",[s._v("文件是一个管道")])]),s._v(" "),t("tr",[t("td",[s._v("-h")]),s._v(" "),t("td",[s._v("文件是一个符号链接")])]),s._v(" "),t("tr",[t("td",[s._v("-L")]),s._v(" "),t("td",[s._v("文件是一个符号链接")])]),s._v(" "),t("tr",[t("td",[s._v("-S")]),s._v(" "),t("td",[s._v("文件是一个socket")])]),s._v(" "),t("tr",[t("td",[s._v("-t")]),s._v(" "),t("td",[s._v("文件(描述符)与一个终端设备相关。")])]),s._v(" "),t("tr",[t("td",[s._v("-r")]),s._v(" "),t("td",[s._v("文件是否可读 (指运行这个测试命令的用户的读权限)")])]),s._v(" "),t("tr",[t("td",[s._v("-w")]),s._v(" "),t("td",[s._v("文件是否可写 (指运行这个测试命令的用户的读权限)")])]),s._v(" "),t("tr",[t("td",[s._v("-x")]),s._v(" "),t("td",[s._v("文件是否可执行 (指运行这个测试命令的用户的读权限)")])]),s._v(" "),t("tr",[t("td",[s._v("-g")]),s._v(" "),t("td",[s._v("文件或目录的设置-组-ID(sgid)标记被设置。")])]),s._v(" "),t("tr",[t("td",[s._v("-u")]),s._v(" "),t("td",[s._v("文件的设置-用户-ID(suid)标志被设置")])]),s._v(" "),t("tr",[t("td",[s._v("-k")]),s._v(" "),t("td",[s._v("粘住位设置")])]),s._v(" "),t("tr",[t("td",[s._v("-N")]),s._v(" "),t("td",[s._v("文件最后一次读后被修改")])]),s._v(" "),t("tr",[t("td",[s._v("f1 -nt f2")]),s._v(" "),t("td",[s._v("文件f1比f2新")])]),s._v(" "),t("tr",[t("td",[s._v("f1 -ot f2")]),s._v(" "),t("td",[s._v("文件f1比f2旧")])]),s._v(" "),t("tr",[t("td",[s._v("f1 -ef f2")]),s._v(" "),t("td",[s._v("文件f1和f2 是相同文件的硬链接")])]),s._v(" "),t("tr",[t("td",[s._v("!")]),s._v(" "),t("td",[s._v('"非" -- 反转上面所有测试的结果(如果没有给出条件则返回真)。')])])])]),s._v(" "),t("p",[t("strong",[s._v("注意⚠️")])]),s._v(" "),t("ol",[t("li",[t("code",[s._v("-t")]),s._v(" 这个测试选项可以用于检查脚本中是否标准输入 ([ -t 0 ])或标准输出([ -t 1 ])是一个终端。")]),s._v(" "),t("li",[t("code",[s._v("-g")]),s._v(" 如果一个目录的sgid标志被设置，在这个目录下创建的文件都属于拥有此目录的用户组，而不必是创建文件的用户所属的组。这个特性对在一个工作组里的同享目录很有用处。")])]),s._v(" "),t("h3",{attrs:{id:"比较操作符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#比较操作符"}},[s._v("#")]),s._v(" 比较操作符")]),s._v(" "),t("p",[s._v("二元比较操作符比较两个变量或是数值。注意整数和字符串比较的分别。")]),s._v(" "),t("p",[t("strong",[s._v("整数比较")])]),s._v(" "),t("p",[t("a",{attrs:{href:"./example/demo16"}},[s._v("demo16")])]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("比较操作符")]),s._v(" "),t("th",[s._v("描述")]),s._v(" "),t("th",[s._v("例子")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[t("code",[s._v("-eq")])]),s._v(" "),t("td",[s._v("等于")]),s._v(" "),t("td",[t("code",[s._v('if [ "$a" -eq "$b" ]')])])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("-ne")])]),s._v(" "),t("td",[s._v("不等于")]),s._v(" "),t("td",[t("code",[s._v('if [ "$a" -ne "$b" ]')])])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("-gt")])]),s._v(" "),t("td",[s._v("大于")]),s._v(" "),t("td",[t("code",[s._v('if [ "$a" -gt "$b" ]')])])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("-ge")])]),s._v(" "),t("td",[s._v("大于等于")]),s._v(" "),t("td",[t("code",[s._v('if [ "$a" -ge "$b" ]')])])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("-lt")])]),s._v(" "),t("td",[s._v("小于")]),s._v(" "),t("td",[t("code",[s._v('if [ "$a" -lt "$b" ]')])])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("-le")])]),s._v(" "),t("td",[s._v("小于等于")]),s._v(" "),t("td",[t("code",[s._v('if [ "$a" -le "$b" ]')])])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("<")])]),s._v(" "),t("td",[s._v("小于(在双括号里使用)")]),s._v(" "),t("td",[t("code",[s._v('(("$a" < "$b"))')])])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("<=")])]),s._v(" "),t("td",[s._v("小于等于 (在双括号里使用)")]),s._v(" "),t("td",[t("code",[s._v('(("$a" <= "$b"))')])])]),s._v(" "),t("tr",[t("td",[t("code",[s._v(">")])]),s._v(" "),t("td",[s._v("大于 (在双括号里使用)")]),s._v(" "),t("td",[t("code",[s._v('(("$a" > "$b"))')])])]),s._v(" "),t("tr",[t("td",[t("code",[s._v(">=")])]),s._v(" "),t("td",[s._v("大于等于(在双括号里使用)")]),s._v(" "),t("td",[t("code",[s._v('(("$a" >= "$b"))')])])])])]),s._v(" "),t("p",[t("strong",[s._v("字符串比较")])]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("比较操作符")]),s._v(" "),t("th",[s._v("描述")]),s._v(" "),t("th",[s._v("例子")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("=")]),s._v(" "),t("td",[s._v("等于")]),s._v(" "),t("td",[t("code",[s._v('if [ "$a" = "$b" ]')])])]),s._v(" "),t("tr",[t("td",[s._v("==")]),s._v(" "),t("td",[s._v("等于，它和=是同义词。")]),s._v(" "),t("td",[t("code",[s._v('if [ "$a" == "$b" ]')])])]),s._v(" "),t("tr",[t("td",[s._v("!=")]),s._v(" "),t("td",[s._v("不相等，操作符在[[ ... ]]结构里使用模式匹配.")]),s._v(" "),t("td",[t("code",[s._v('if [ "$a" != "$b" ]')])])]),s._v(" "),t("tr",[t("td",[s._v("<")]),s._v(" "),t("td",[s._v('小于，依照ASCII字符排列顺序，注意"<"字符在[ ] 结构里需要转义')]),s._v(" "),t("td",[t("code",[s._v('if [[ "$a" < "$b" ]]')]),s._v(" "),t("code",[s._v('if [ "$a" \\< "$b" ]')])])]),s._v(" "),t("tr",[t("td",[s._v(">")]),s._v(" "),t("td",[s._v('大于，依照ASCII字符排列顺序，注意">"字符在[ ] 结构里需要转义.')]),s._v(" "),t("td",[t("code",[s._v('if [[ "$a" > "$b" ]]')]),s._v(" "),t("code",[s._v('if [ "$a" \\> "$b" ]')])])]),s._v(" "),t("tr",[t("td",[s._v("-z")]),s._v(" "),t("td",[s._v('字符串为"null"，即是指字符串长度为零。')]),s._v(" "),t("td",[s._v("-")])]),s._v(" "),t("tr",[t("td",[s._v("-n")]),s._v(" "),t("td",[s._v('字符串不为"null"，即长度不为零。')]),s._v(" "),t("td",[s._v("-")])])])]),s._v(" "),t("p",[t("strong",[s._v("混合比较")])]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("比较操作符")]),s._v(" "),t("th",[s._v("描述")]),s._v(" "),t("th",[s._v("例子")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("-a")]),s._v(" "),t("td",[s._v("逻辑与，如果exp1和exp2都为真，则exp1 -a exp2返回真。")]),s._v(" "),t("td",[t("code",[s._v('if [ "$exp1" -a "$exp2" ]')])])]),s._v(" "),t("tr",[t("td",[s._v("-o")]),s._v(" "),t("td",[s._v("逻辑或，只要exp1和exp2任何一个为真，则exp1 -o exp2 返回真。")]),s._v(" "),t("td",[t("code",[s._v('if [ "$exp1" -o "$exp2" ]')])])])])]),s._v(" "),t("p",[s._v("在一个混合测试中，把一个字符串变量引号引起来可能还不够。如果$string变量是空的话，表达式"),t("code",[s._v('[ -n "$string" -o "$a" = "$b" ]')]),s._v("在一些Bash版本中可能会引起错误。安全的办法是附加一个外部的字符串给可能有空字符串变量比较的所有变量，"),t("code",[s._v('[ "x$string" != x -o "x$a" = "x$b" ]')]),s._v(" (x字符可以互相抵消)")]),s._v(" "),t("h2",{attrs:{id:"操作字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#操作字符串"}},[s._v("#")]),s._v(" 操作字符串")]),s._v(" "),t("p",[s._v("Bash已经支持了令人惊讶的字符串操作的数量。不一致的命令语法和冗余的功能，导致真的学起来有困难。")]),s._v(" "),t("h3",{attrs:{id:"字符串长度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串长度"}},[s._v("#")]),s._v(" 字符串长度")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("abcABC123ABCabc\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("#")]),s._v("String}")]),s._v("                 "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 15")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("expr")]),s._v(" length $String"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 15")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("expr")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$String")]),s._v('"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'.*'")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 15")]),s._v("\n")])])]),t("p",[s._v("匹配字符串开头的字串的长度，下面两种方法的 $substring 是一个正则表达式。")]),s._v(" "),t("p",[t("code",[s._v("expr match \"$string\" '$substring'")]),t("br"),s._v(" "),t("code",[s._v("expr \"$string\" : '$substring'")])]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("abcABC123ABCabc\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#       └------┘")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#       ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("expr")]),s._v(" match "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$String")]),s._v('"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'abc[A-Z]*.2'")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 8")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("expr")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$String")]),s._v('"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'abc[A-Z]*.2'")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 8")]),s._v("\n")])])]),t("h3",{attrs:{id:"索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#索引"}},[s._v("#")]),s._v(" 索引")]),s._v(" "),t("p",[t("code",[s._v("expr index $string $substring")]),s._v(" 在字符串$string中$substring第一次出现的数字位置")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("abcABC123ABCabc\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("expr")]),s._v(" index "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$String")]),s._v('"')]),s._v(" C12"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("             "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 6")]),s._v("\n                                             "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# C 字符的位置.")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("expr")]),s._v(" index "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$String")]),s._v('"')]),s._v(" 1c"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("              "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 3")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 'c' (in #3 position) matches before '1'.")]),s._v("\n")])])]),t("h3",{attrs:{id:"字串提取"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字串提取"}},[s._v("#")]),s._v(" 字串提取")]),s._v(" "),t("p",[t("code",[s._v("${string:position}")]),s._v(' 把$string中从第$postion个字符开始字符串提取出来。如果$string是"*"或"@"，则表示从位置参数中提取第$postion后面的字符串。'),t("br"),s._v(" "),t("code",[s._v("${string:position:length}")]),s._v(" 把$string中$postion个字符后面的长度为$length的字符串提取出来。"),t("a",{attrs:{href:"./example/demo18"}},[s._v("demo18")])]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 字串提取")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("abcABC123ABCabc\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#       0123456789.....")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#       以0开始计算.")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${String"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("0}")]),s._v("                            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# abcABC123ABCabc")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${String"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("1}")]),s._v("                            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# bcABC123ABCabc")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${String"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("7}")]),s._v("                            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 23ABCabc")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${String"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("7"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("3}")]),s._v("                          "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 23A")]),s._v("\n                                            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 提取的字串长为3")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 有没有可能从字符串的右边结尾处提取?")]),s._v("\n    \n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${String"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":-")]),s._v("4}")]),s._v("                           "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# abcABC123ABCabc")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 默认是整个字符串，就相当于${parameter:-default}.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 然而. . .")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${String"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("(-4)}")]),s._v("                         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Cabc ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${String"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" -4}")]),s._v("                          "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Cabc")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 这样,它可以工作了.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 圆括号或附加的空白字符可以转义$position参数.")]),s._v("\n")])])]),t("h3",{attrs:{id:"字串移动"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字串移动"}},[s._v("#")]),s._v(" 字串移动")]),s._v(" "),t("p",[t("code",[s._v("${string#substring}")]),s._v("从$string左边开始，剥去最短匹配$substring子串。"),t("br"),s._v(" "),t("code",[s._v("${string##substring}")]),s._v("从$string左边开始，剥去最长匹配$substring子串。"),t("br"),s._v(" "),t("code",[s._v("${string%substring}")]),s._v(" 从$string结尾开始，剥去最短匹配$substring子串。"),t("br"),s._v(" "),t("code",[s._v("${string%%substring}")]),s._v("从$string结尾开始，剥去最长匹配$substring子串。")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("abcABC123ABCabc\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#       ├----┘     ┆")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#       └----------┘")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${String"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("#")]),s._v("a*C}")]),s._v("      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 123ABCabc")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 剥去匹配'a'到'C'之间最短的字符串.")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${String"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("##")]),s._v("a*C}")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# abc")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 剥去匹配'a'到'C'之间最长的字符串.")]),s._v("\n\n\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("abcABC123ABCabc\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#       ┆           ||")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#       └------------┘")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${String"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v("b*c}")]),s._v("      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# abcABC123ABCa")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从$String后面尾部开始，剥去匹配'a'到'C'之间最短的字符串.")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${String"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%%")]),s._v("b*c}")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# a")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从$String后面尾部开始，剥去匹配'a'到'C'之间最长的字符串.")]),s._v("\n")])])]),t("h3",{attrs:{id:"用awk处理字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#用awk处理字符串"}},[s._v("#")]),s._v(" 用awk处理字符串")]),s._v(" "),t("p",[s._v("Bash脚本可以调用awk的字符串操作功能来代替它自己内建的字符串操作符")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("23skidoo1\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#      012345678    Bash")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#      123456789    awk")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 注意上面两个程序对索引的不同处理:")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Bash把字符串的第一个字符的标号称为'0'。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Awk把字符串的第一个字符的标号称为'1'。")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${String"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("2"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("4}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# position 3 (0-1-2), 4 characters long")]),s._v("\n                                         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# skid")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在awk中与Bash的${string:pos:length}等同的是substr(string,pos,length)。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("awk")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{ \n  print substr(\"'")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${String}")]),s._v('"')]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\",3,4)      # skid\n}'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#  用一个空的"echo"由管道传一个空的输入给awk,')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#+ 这样就不必提供一个文件名给awk。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])])]),t("h2",{attrs:{id:"for-while"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#for-while"}},[s._v("#")]),s._v(" for/while")]),s._v(" "),t("p",[s._v("重复一些命令的代码块,如果条件不满足就退出循环。")]),s._v(" "),t("h3",{attrs:{id:"for"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#for"}},[s._v("#")]),s._v(" for")]),s._v(" "),t("p",[s._v("在循环的每次执行中，arg将顺序的存取list中列出的变量，下面是一个基本的循环结构。"),t("a",{attrs:{href:"./example/demo27"}},[s._v("demo27")])]),s._v(" "),t("blockquote",[t("p",[s._v("for arg in [list]"),t("br"),s._v("\ndo"),t("br"),s._v("\ncommand(s)..."),t("br"),s._v("\ndone")])]),s._v(" "),t("p",[s._v("每个"),t("code",[s._v("[list]")]),s._v("中的元素都可能包含多个参数，在处理参数组时，这是非常有用的，使用set命令来强制解析每个"),t("code",[s._v("[list]")]),s._v("中的元素。并且分配每个解析出来的部分到一个位置参数中。")]),s._v(" "),t("p",[s._v("循环的一个简单例子")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("planet")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune Pluto\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$planet")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 每个行星被单独打印在一行上.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n")])])]),t("h3",{attrs:{id:"while"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#while"}},[s._v("#")]),s._v(" while")]),s._v(" "),t("p",[s._v("一个while循环可以有多个判断条件，但是只有最后一个才能决定是否退出循环。然而这需要一种有点不同的循环语法。")]),s._v(" "),t("blockquote",[t("p",[s._v("while [condition]"),t("br"),s._v("\ndo"),t("br"),s._v("\ncommand..."),t("br"),s._v("\ndone")])]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# --------------------------")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 简单的while循环")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# --------------------------")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("var0")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("LIMIT")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$var0")]),s._v('"')]),s._v(" -lt "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$LIMIT")]),s._v('"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" -n "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$var0")]),s._v(' "')]),s._v("        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -n 将会阻止产生新行。")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#             ^           空格,数字之间的分隔。")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("var0")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("expr")]),s._v(" $var0 + "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# var0=$(($var0+1))  也可以。")]),s._v("\n                          "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# var0=$((var0 + 1)) 也可以。")]),s._v("\n                          "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# let "var0 += 1"    也可以。')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("                      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用其他的方法也行。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# --------------------------")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 多条件的while循环")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# --------------------------")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("var1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("unset\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("previous")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$var1")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"previous-variable = '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$previous")]),s._v('"')]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("previous")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$var1")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$var1")]),s._v('"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" end "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 记录之前的$var1.")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# 这个"while"循环中有4个条件, 但是只有最后一个能控制循环.')]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 退出状态由第4个条件决定.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Input variable #1 (end to exit) "')]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v(" var1\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"variable #1 = '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$var1")]),s._v('"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])])]),t("h3",{attrs:{id:"until"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#until"}},[s._v("#")]),s._v(" until")]),s._v(" "),t("p",[s._v("这个结构在循环的顶部判断条件，并且如果条件一直为false那就一直循环下去。(与while相反)。")]),s._v(" "),t("blockquote",[t("p",[s._v("until [condition-is-true]"),t("br"),s._v("\ndo"),t("br"),s._v("\ncommand..."),t("br"),s._v("\ndone")])]),s._v(" "),t("p",[t("strong",[s._v("注意⚠️")])]),s._v(" "),t("ol",[t("li",[s._v("until循环的判断在循环的顶部，这与某些编程语言是不同的。")]),s._v(" "),t("li",[s._v('与for循环一样，如果想把do和条件放在一行里，就使用";"。')])]),s._v(" "),t("blockquote",[t("p",[s._v("until [condition-is-true] ; do")])]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("END_CONDITION")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("end\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("until")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$var1")]),s._v('"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$END_CONDITION")]),s._v('"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在循环的顶部判断条件.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Input variable #1 "')]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"('),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$END_CONDITION")]),s._v(' to exit)"')]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v(" var1\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"variable #1 = '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$var1")]),s._v('"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])])]),t("h3",{attrs:{id:"嵌套循环"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#嵌套循环"}},[s._v("#")]),s._v(" 嵌套循环")]),s._v(" "),t("p",[s._v("嵌套循环就是在一个循环中还有一个循环，内部循环在外部循环体中。"),t("a",{attrs:{href:"./example/demo28"}},[s._v("demo28")])]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("outer")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("             "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置外部循环计数.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 开始外部循环.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("a")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Pass '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$outer")]),s._v(' in outer loop."')]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"---------------------"')]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("inner")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("           "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 重设内部循环的计数.")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ===============================================")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 开始内部循环.")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("b")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Pass '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$inner")]),s._v(' in inner loop."')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"inner+=1"')]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 增加内部循环计数.")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 内部循环结束.")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ===============================================")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"outer+=1"')]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 增加外部循环的计数.")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v("              "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 每次外部循环之间的间隔.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("               \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 外部循环结束.")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])])]),t("h3",{attrs:{id:"循环控制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#循环控制"}},[s._v("#")]),s._v(" 循环控制")]),s._v(" "),t("p",[s._v("影响循环行为的命令 "),t("code",[s._v("break")]),s._v("， "),t("code",[s._v("continue")]),s._v("， break命令将会跳出循环，continue命令将会跳过本次循环下边的语句，直接进入下次循环。"),t("a",{attrs:{href:"./example/demo29"}},[s._v("demo29")])]),s._v(" "),t("p",[t("strong",[s._v("continue：")]),s._v(" continue命令与break命令类似，只有一点差别，它不会跳出所有循环，仅仅跳出当前循环。")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("LIMIT")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("19")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 上限")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Printing Numbers 1 through 20 (but not 3 and 11)."')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("a")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$a")]),s._v(" -le "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$LIMIT")]),s._v('"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("a")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$((")]),s._v("$a"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("))")])]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$a")]),s._v('"')]),s._v(" -eq "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$a")]),s._v('"')]),s._v(" -eq "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Excludes 3 and 11.")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("continue")]),s._v("      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 跳过本次循环剩下的语句.")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" -n "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$a")]),s._v(' "')]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在$a等于3和11的时候,这句将不会执行.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v(" \n")])])]),t("p",[t("strong",[s._v("break：")]),s._v(" break命令允许跳出所有循环（终止执行后面的所有循环）。")]),s._v(" "),t("p",[s._v("下面的例子中，脚本进入死循环直至用户输入数字大于5。要跳出这个循环，返回到shell提示符下，就要使用break命令。")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" -n "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Input a number between 1 to 5: "')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v(" aNum\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$aNum")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Your number is '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$aNum")]),s._v('!"')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        *"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"You do not select a number between 1 to 5, game is over!"')]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("break")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("esac")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n")])])]),t("p",[s._v("⚠️ 在嵌套循环中，break 命令后面还可以跟一个整数，表示跳出第几层循环。例如：")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("break")]),s._v(" n "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#表示跳出第 n 层循环。")]),s._v("\n")])])]),t("h2",{attrs:{id:"case-select"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#case-select"}},[s._v("#")]),s._v(" case/select")]),s._v(" "),t("p",[s._v("case/select依靠在代码块的顶部或底部的条件判断来决定程序的分支。")]),s._v(" "),t("h3",{attrs:{id:"case"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#case"}},[s._v("#")]),s._v(" case")]),s._v(" "),t("p",[s._v("case它允许通过判断来选择代码块中多条路径中的一条。它的作用和多个if/then/else语句相同，是它们的简化结构，特别适用于创建目录。"),t("a",{attrs:{href:"./example/demo30"}},[s._v("demo30")])]),s._v(" "),t("blockquote",[t("p",[s._v('case "$variable" in'),t("br"),s._v('\n?"$condition1" )'),t("br"),s._v("\n?command..."),t("br"),s._v("\n?;;"),t("br"),s._v('\n?"$condition2" )'),t("br"),s._v("\n?command..."),t("br"),s._v("\n?;;"),t("br"),s._v("\nesac")])]),s._v(" "),t("ul",[t("li",[s._v("对变量使用"),t("code",[s._v('""')]),s._v("并不是强制的，因为不会发生单词分离。")]),s._v(" "),t("li",[s._v("每句测试行，都以右小括号"),t("code",[s._v(")")]),s._v("结尾。")]),s._v(" "),t("li",[s._v("每个条件块都以两个分号结尾"),t("code",[s._v(";;")]),s._v("。")]),s._v(" "),t("li",[s._v("case块的结束以esac(case的反向拼写)结尾。")])]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("clear")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 清屏.")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"          我的简历"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"          ------- "')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"下面通过shell脚本输出我的简历"')]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"[B]asicinfo, 基本信息"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"[E]ducation, 教育经历"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"[I]tskill, IT 技能"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v(" person\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$person")]),s._v('"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 注意,变量是被引用的.")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"B"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"b"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 接受大写或小写输入.")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"小弟调调"')]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"手  机 : 136*****13"')]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"E-mail :wowohoo@qq.com"')]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"首  页 : http://JSLite.io"')]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 注意,在每个选项后边都需要以;;结尾.")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"E"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"e"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 接受大写或小写输入.")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"■ 2003年9月 到 2006年8月"')]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"----------------------------"')]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"› 学校 : 野鸟高中"')]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"› 专业 : 艺术类"')]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"› 学历 : 高中"')]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 后边的[I]tskill的信息在这里就省略了.")]),s._v("\n          * "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 默认选项.")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 空输入(敲RETURN).")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"没有数据！"')]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("esac")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])])]),t("h3",{attrs:{id:"select"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#select"}},[s._v("#")]),s._v(" select")]),s._v(" "),t("p",[s._v("select结构是建立菜单的另一种工具，这种结构是从ksh中引入的。")]),s._v(" "),t("blockquote",[t("p",[s._v("select variable [in list]"),t("br"),s._v("\ndo"),t("br"),s._v("\n?command..."),t("br"),s._v("\n?break"),t("br"),s._v("\ndone")])]),s._v(" "),t("p",[s._v("用select来创建菜单")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("PS3")])]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'选择你喜欢的蔬菜: '")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置提示符字串.")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("vegetable")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"豆"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"胡萝卜"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"土豆"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"洋葱"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"芜菁甘蓝"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"你最喜欢的蔬菜是 '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$vegetable")]),s._v(' 。"')]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"讨厌!"')]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("break")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果这里没有'break'会发生什么?")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])])]),t("p",[s._v("如果忽略了in list列表,那么select命令将使用传递到脚本的命令行参数($@),或者是函数参数(当select是在函数中时）与忽略in list时的for语句相比较："),t("strong",[s._v("for variable [in list]")])]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("PS3")])]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'选择你喜欢的蔬菜:  '")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("choice_of")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" vegetable\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# [in list] 被忽略, 所以'select'用传递给函数的参数.")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"你最喜欢的蔬菜是  '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$vegetable")]),s._v('。"')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"讨厌!"')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("break")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\nchoice_of "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"豆"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"米饭"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"胡萝卜"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"土豆"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"洋葱"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"芜菁甘蓝"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#         $1   $2     $3      $4    $5     $6")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#         传递给choice_of() 函数的参数")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])])]),t("h2",{attrs:{id:"函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[s._v("#")]),s._v(" 函数")]),s._v(" "),t("p",[s._v('和"真正的"编程语言一样，Bash也有函数，虽然在某些实现方面稍有些限制。 一个函数是一个子程序，用于实现一串操作的代码块(code block)，它是完成特定任务的"黑盒子"。 当有重复代码，当一个任务只需要很少的修改就被重复几次执行时, 这时你应考虑使用函数。 '),t("a",{attrs:{href:"./example/demo33"}},[s._v("demo33")])]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("function_name")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" \n  command"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(". \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 或")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("function_name")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" \n  command"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(". \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" \n")])])]),t("p",[s._v("在一个函数内嵌套另一个函数也是可以的，但是不常用。")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("f1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("f2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# nested")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Function '),t("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v("f2"),t("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v(", inside "),t("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v("f1"),t("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v('."')]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("  \nf2  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#  引起错误.")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#  就是你先"declare -f f2"了也没用.')]),s._v("\n\nf1  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#  什么也不做,因为调用"f1"不会自动调用"f2".')]),s._v("\nf2  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#  现在,可以正确的调用"f2"了,')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#+ 因为之前调用"f1"使"f2"在脚本中变得可见了.')]),s._v("\n")])])]),t("h3",{attrs:{id:"局部变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#局部变量"}},[s._v("#")]),s._v(" 局部变量")]),s._v(" "),t("p",[s._v('如果变量用local来声明，那么它只能在该变量声明的代码块(block of code)中可见，这个代码块就是局部"范围"。')]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在函数内部的全局和局部变量.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("local")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("loc_var")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("23")]),s._v("       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 声明为局部变量.")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v("                   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用内建的'local'关键字.")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v("loc_var"),t("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v(" in function = "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$loc_var")]),s._v('"')]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("global_var")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("999")]),s._v("         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 没有声明为局部变量.")]),s._v("\n                         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 默认为全局变量. ")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v("global_var"),t("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v(" in function = "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$global_var")]),s._v('"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("  \n\nfunc\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# 现在，来看看是否局部变量"loc_var"能否在函数外面可见.')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v("loc_var"),t("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v(" outside function = "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$loc_var")]),s._v('"')]),s._v("\n                                   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# $loc_var outside function = ")]),s._v("\n                                   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 不, $loc_var不是全局可访问的.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v("global_var"),t("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v(" outside function = "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$global_var")]),s._v('"')]),s._v("\n                                      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# $global_var outside function = 999")]),s._v("\n                                      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# $global_var 是全局可访问的.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#  与In contrast to C相比, 在函数内声明的Bash变量只有在")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#+ 它被明确声明成局部的变量时才是局部的")]),s._v("\n")])])]),t("p",[s._v("⚠️ ：在函数调用之前，所有在函数内声明且没有明确声明为local的变量都可在函数体外可见")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("global_var")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("37")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#  在函数还没有被调用前")]),s._v("\n                   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#+ 变量只在函数内可见. ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("                  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#  函数结束")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"global_var = '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$global_var")]),s._v('"')]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# global_var =")]),s._v("\n                                 "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#  函数"func"还没有被调用,')]),s._v("\n                                 "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#+ 所以变量$global_var还不能被访问.")]),s._v("\nfunc\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"global_var = '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$global_var")]),s._v('"')]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# global_var = 37")]),s._v("\n                                 "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 已经在函数调用时设置了值.")]),s._v("\n")])])]),t("h3",{attrs:{id:"函数参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数参数"}},[s._v("#")]),s._v(" 函数参数")]),s._v(" "),t("p",[s._v("在Shell中，调用函数时可以向其传递参数。在函数体内部，通过 "),t("code",[s._v("$n")]),s._v(" 的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("funWithParam")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"第一个参数为 '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v(' !"')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"第二个参数为 '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$2")]),s._v(' !"')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"第十个参数为 '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$10")]),s._v(' !"')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"第十个参数为 '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${10}")]),s._v(' !"')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"第十一个参数为 '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${11}")]),s._v(' !"')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"参数总数有 '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$#")]),s._v(' 个!"')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"作为一个字符串输出所有参数 '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$*")]),s._v(' !"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\nfunWithParam "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("34")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("73")]),s._v("\n")])])]),t("h3",{attrs:{id:"函数返回值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数返回值"}},[s._v("#")]),s._v(" 函数返回值")]),s._v(" "),t("p",[s._v("定义一个带有return语句的函数。函数返回值在调用该函数后通过 "),t("code",[s._v("$?")]),s._v(" 来获得。")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("funWithReturn")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"这个函数会对输入的两个数字进行相加运算..."')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"输入第一个数字: "')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v(" aNum\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"输入第二个数字: "')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v(" anotherNum\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"两个数字分别为 '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$aNum")]),s._v(" 和 "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$anotherNum")]),s._v(' !"')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$((")]),s._v("$aNum"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("$anotherNum"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("))")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\nfunWithReturn\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"输入的两个数字之和为 '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$?")]),s._v(' !"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 这个函数会对输入的两个数字进行相加运算...")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输入第一个数字: ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输入第二个数字: ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 两个数字分别为 1 和 2 !")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输入的两个数字之和为 3 !")]),s._v("\n")])])]),t("p",[s._v("⚠️ "),t("code",[s._v("$10")]),s._v(" 不能获取第十个参数，获取第十个参数需要${10}。当n>=10时，需要使用${n}来获取参数。")]),s._v(" "),t("p",[t("strong",[s._v("特殊字符用来处理参数：")])]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("参数处理")]),s._v(" "),t("th",[s._v("说明")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("$#")]),s._v(" "),t("td",[s._v("传递到脚本的参数个数")])]),s._v(" "),t("tr",[t("td",[s._v("$*")]),s._v(" "),t("td",[s._v("以一个单字符串显示所有向脚本传递的参数")])]),s._v(" "),t("tr",[t("td",[s._v("$$")]),s._v(" "),t("td",[s._v("脚本运行的当前进程ID号")])]),s._v(" "),t("tr",[t("td",[s._v("$!")]),s._v(" "),t("td",[s._v("后台运行的最后一个进程的ID号")])]),s._v(" "),t("tr",[t("td",[s._v("$@")]),s._v(" "),t("td",[s._v("与$*相同，但是使用时加引号，并在引号中返回每个参数。")])]),s._v(" "),t("tr",[t("td",[s._v("$-")]),s._v(" "),t("td",[s._v("显示Shell使用的当前选项，与set命令功能相同。")])]),s._v(" "),t("tr",[t("td",[s._v("$?")]),s._v(" "),t("td",[s._v("显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。")])])])])])}),[],!1,null,null,null);a.default=n.exports}}]);
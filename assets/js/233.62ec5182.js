(window.webpackJsonp=window.webpackJsonp||[]).push([[233],{789:function(t,o,s){"use strict";s.r(o);var a=s(10),n=Object(a.a)({},(function(){var t=this,o=t.$createElement,s=t._self._c||o;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h4",{attrs:{id:"prototype原型对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#prototype原型对象"}},[t._v("#")]),t._v(" prototype原型对象")]),t._v(" "),s("hr"),t._v(" "),s("ul",[s("li",[t._v("每个函数都有一个默认的"),s("code",[t._v("prototype")]),t._v("属性，其实际上还是一个对象，如果被用在继承中，姑且叫做原型对象")]),t._v(" "),s("li",[t._v("在构造函数中的"),s("code",[t._v("prototype")]),t._v("中定义的属性和方法，会被创建的对象所继承下来。举个栗子：\n")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("F")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("F")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("work")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'F is working..'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" f "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("F")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("work")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// F is working..")]),t._v("\n")])])]),s("ul",[s("li",[t._v("当你创建函数时，"),s("code",[t._v("JS")]),t._v("会为这个函数自动添加 "),s("code",[t._v("prototype")]),t._v(" 属性，值是空对象。而一旦你把这个函数当作构造函数（ "),s("code",[t._v("constructor")]),t._v(" ）调用（即通过 "),s("code",[t._v("new")]),t._v("关键字调用），那么"),s("code",[t._v("JS")]),t._v("就会帮你创建该构造函数的实例，实例继承构造函数 "),s("code",[t._v("prototype")]),t._v(" 的所有属性和方法（实例通过设置自己的"),s("code",[t._v("__proto__")]),t._v(" 指向构造函数的 "),s("code",[t._v("prototype")]),t._v(" 来实现这种继承）")])]),t._v(" "),s("h4",{attrs:{id:"神秘的-proto"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#神秘的-proto"}},[t._v("#")]),t._v(" 神秘的__proto__")]),t._v(" "),s("hr"),t._v(" "),s("ul",[s("li",[s("code",[t._v("JS")]),t._v("的对象中都包含了一个"),s("code",[t._v("__proto__")]),t._v("属性，其指向的是创建该对象时的构造函数的原型对象"),s("code",[t._v("prototype")])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://segmentfault.com/img/bVzPrk",alt:""}})]),t._v(" "),s("ul",[s("li",[t._v("从上面的输出结果看出，"),s("code",[t._v("f.__proto__")]),t._v("指向了其构造函数"),s("code",[t._v("F")]),t._v("的"),s("code",[t._v("prototype")]),t._v("，而"),s("code",[t._v("F.prototype")]),t._v("本身也是一个对象，其内部也有"),s("code",[t._v("__proto__")]),t._v("属性，其指向的是"),s("code",[t._v("Object.prototype")]),t._v(",直到最后"),s("code",[t._v("Object.prototype")]),t._v("指向"),s("code",[t._v("null")]),t._v("，这条原型链才结束")]),t._v(" "),s("li",[t._v("因此，"),s("code",[t._v("__proto__")]),t._v("这个神秘的属性才是原型链形成的真正原因")])]),t._v(" "),s("h4",{attrs:{id:"原型链"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原型链"}},[t._v("#")]),t._v(" 原型链")]),t._v(" "),s("hr"),t._v(" "),s("ul",[s("li",[t._v("由于原型对象本身也是对象，根据上边的定义，它也有自己的原型，而它自己的原型对象又可以有自己的原型，这样就组成了一条链，这个就是原型链，"),s("code",[t._v("JavaScritp")]),t._v("引擎在访问对象的属性时，如果在对象本身中没有找到，则会去原型链中查找，如果找到，直接返回值，如果整个链都遍历且没有找到属性，则返回"),s("code",[t._v("undefined")]),t._v("。原型链一般实现为一个链表，这样就可以按照一定的顺序来查找")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://segmentfault.com/img/bVcXNb",alt:""}})]),t._v(" "),s("ul",[s("li",[s("p",[t._v("从上图看出：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("Object.prototype")]),t._v("是顶级对象，所有对象都继承自它。")]),t._v(" "),s("li",[s("code",[t._v("Function")]),t._v("继承 "),s("code",[t._v("Function")]),t._v("本身， "),s("code",[t._v("Function.prototype")]),t._v(" 继承 "),s("code",[t._v("Object.prototype")])]),t._v(" "),s("li",[s("code",[t._v("Function.prototype")]),t._v(" 和 "),s("code",[t._v("Function.__proto__")]),t._v(" 都指向 "),s("code",[t._v("Function.prototype")])]),t._v(" "),s("li",[s("code",[t._v("Object.prototype.__proto__ === null")]),t._v(" ，说明原型链到 "),s("code",[t._v("Object.prototype")]),t._v("终止")])])])])])}),[],!1,null,null,null);o.default=n.exports}}]);
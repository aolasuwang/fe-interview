(window.webpackJsonp=window.webpackJsonp||[]).push([[602],{1154:function(e,n,a){"use strict";a.r(n);var t=a(10),r=Object(t.a)({},(function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"构建基础篇-2：webpack-在-cli-3-中的应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构建基础篇-2：webpack-在-cli-3-中的应用"}},[e._v("#")]),e._v(" 构建基础篇 2：webpack 在 CLI 3 中的应用")]),e._v(" "),a("p",[e._v("webpack 作为目前最流行的项目打包工具，被广泛使用于项目的构建和开发过程中，其实说它是打包工具有点大材小用了，我个人认为它是一个集前端自动化、模块化、组件化于一体的可拓展系统，你可以根据自己的需要来进行一系列的配置和安装，最终实现你需要的功能并进行打包输出。")]),e._v(" "),a("p",[e._v("而在 Vue 的项目中，webpack 同样充当着举足轻重的作用，比如打包压缩、异步加载、模块化管理等等。如果你了解 webpack 那么相信本文会让你更了解其在 Vue 中的使用，如果你是一个 webpack 小白，那么也没事，相信你会很容易的了解它在项目中的配置和功能。")]),e._v(" "),a("h2",{attrs:{id:"webpack-的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack-的使用"}},[e._v("#")]),e._v(" webpack 的使用")]),e._v(" "),a("h3",{attrs:{id:"_1-与-vue-cli-2-x-的差异"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-与-vue-cli-2-x-的差异"}},[e._v("#")]),e._v(" 1. 与 vue-cli 2.x 的差异")]),e._v(" "),a("p",[e._v("如果你使用过 vue-cli 2.x，那么你应该了解其构建出的目录会包含相应的 webpack 配置文件，但是在 vue-cli 3.x 中你却见不到一份关于 webpack 的配置文件，难道 3.x 抛弃了 webpack？其实不然，3.x 提供了一种开箱即用的模式，即你无需配置 webpack 就可以运行项目，并且它提供了一个 vue.config.js 文件来满足开发者对其封装的 webpack 默认配置的修改。如图：")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://poetries1.gitee.io/img-repo/2020/08/vue/8.png",alt:""}})]),e._v(" "),a("h3",{attrs:{id:"_2-vue-config-js-的配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-vue-config-js-的配置"}},[e._v("#")]),e._v(" 2. vue.config.js 的配置")]),e._v(" "),a("p",[e._v("通过上方新老版本的对比，我们可以清晰的看出 vue.config.js 的配置项结构，如果你构建的项目中没有该文件，那么你需要在根目录手动创建它。下面我们就来介绍一下其常用配置项的功能和用途：")]),e._v(" "),a("h3",{attrs:{id:"a-baseurl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a-baseurl"}},[e._v("#")]),e._v(" a. baseurl")]),e._v(" "),a("p",[e._v("在第一节《Vue CLI 3 项目构建基础》中我们通过 vue-cli 3.x 成功构建并在浏览器中打开 "),a("code",[e._v("http://localhost:8080/")]),e._v(" 展示了项目首页。如果现在你想要将项目地址加一个二级目录，比如："),a("code",[e._v("http://localhost:8080/vue/")]),e._v("，那么我们需要在 vue.config.js 里配置 baseurl 这一项：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// vue.config.js\nmodule.exports = {\n    ...\n    \n    baseUrl: 'vue',\n    \n    ...\n}\n\n")])])]),a("p",[e._v("其改变的其实是 webpack 配置文件中 output 的 "),a("code",[e._v("publicPath")]),e._v(" 项，这时候你重启终端再次打开页面的时候我们首页的 url 就会变成带二级目录的形式。")]),e._v(" "),a("h3",{attrs:{id:"b-outputdir"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#b-outputdir"}},[e._v("#")]),e._v(" b. outputDir")]),e._v(" "),a("p",[e._v("如果你想将构建好的文件打包输出到 output 文件夹下（默认是 dist 文件夹），你可以配置：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// vue.config.js\nmodule.exports = {\n    ...\n    \n    outputDir: 'output',\n    \n    ...\n}\n\n")])])]),a("p",[e._v("然后运行命令 "),a("code",[e._v("yarn build")]),e._v(" 进行打包输出，你会发现项目跟目录会创建 output 文件夹， 这其实改变了 webpack 配置中 output 下的 "),a("code",[e._v("path")]),e._v(" 项，修改了文件的输出路径。")]),e._v(" "),a("h3",{attrs:{id:"c-productionsourcemap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c-productionsourcemap"}},[e._v("#")]),e._v(" c. productionSourceMap")]),e._v(" "),a("p",[e._v("该配置项用于设置是否为生产环境构建生成 source map，一般在生产环境下为了快速定位错误信息，我们都会开启 source map：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// vue.config.js\nmodule.exports = {\n    ...\n    \n    productionSourceMap: true,\n    \n    ...\n}\n\n")])])]),a("p",[e._v("该配置会修改 webpack 中 "),a("code",[e._v("devtool")]),e._v(" 项的值为 "),a("code",[e._v("source-map")]),e._v("。")]),e._v(" "),a("p",[e._v("开启 source map 后，我们打包输出的文件中会包含 js 对应的 .map 文件，其用途可以参考："),a("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("JavaScript Source Map 详解"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"d-chainwebpack"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#d-chainwebpack"}},[e._v("#")]),e._v(" d. chainWebpack")]),e._v(" "),a("p",[e._v("chainWebpack 配置项允许我们更细粒度的控制 webpack 的内部配置，其集成的是 "),a("a",{attrs:{href:"https://github.com/mozilla-neutrino/webpack-chain",target:"_blank",rel:"noopener noreferrer"}},[e._v("webpack-chain"),a("OutboundLink")],1),e._v(" 这一插件，该插件可以让我们能够使用链式操作来修改配置，比如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 用于做相应的合并处理\nconst merge = require('webpack-merge');\n\nmodule.exports = {\n    ...\n    \n    // config 参数为已经解析好的 webpack 配置\n    chainWebpack: config => {\n        config.module\n            .rule('images')\n            .use('url-loader')\n            .tap(options =>\n                merge(options, {\n                  limit: 5120,\n                })\n            )\n    }\n    \n    ...\n}\n\n")])])]),a("p",[e._v("以上操作我们可以成功修改 webpack 中 module 项里配置 rules 规则为图片下的 url-loader 值，将其 limit 限制改为 5M，修改后的 webpack 配置代码如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("{\n    ...\n    \n    module: {\n        rules: [\n            {   \n                /* config.module.rule('images') */\n                test: /\\.(png|jpe?g|gif|webp)(\\?.*)?$/,\n                use: [\n                    /* config.module.rule('images').use('url-loader') */\n                    {\n                        loader: 'url-loader',\n                        options: {\n                            limit: 5120,\n                            name: 'img/[name].[hash:8].[ext]'\n                        }\n                    }\n                ]\n            }\n        ]\n    }\n    \n    ...\n}\n\n")])])]),a("p",[e._v("这里需要注意的是我们使用了 webpack-merge 这一插件，该插件用于做 webpack 配置的合并处理，这样 options 下面的其他值就不会被覆盖或改变。")]),e._v(" "),a("p",[e._v("关于 webpack-chain 的使用可以参考其 github 官方地址："),a("a",{attrs:{href:"https://github.com/mozilla-neutrino/webpack-chain",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/mozilla-neutrino/webpack-chain"),a("OutboundLink")],1),e._v("，它提供了操作类似 JavaScript Set 和 Map 的方式，以及一系列速记方法。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://poetries1.gitee.io/img-repo/2020/08/vue/9.png",alt:""}})]),e._v(" "),a("h3",{attrs:{id:"e-configurewebpack"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#e-configurewebpack"}},[e._v("#")]),e._v(" e. configureWebpack")]),e._v(" "),a("p",[e._v("除了上述使用 chainWebpack 来改变 webpack 内部配置外，我们还可以使用 configureWebpack 来进行修改，两者的不同点在于 chainWebpack 是链式修改，而 configureWebpack 更倾向于整体替换和修改。示例代码如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// vue.config.js\nmodule.exports = {\n    ...\n    \n    // config 参数为已经解析好的 webpack 配置\n    configureWebpack: config => {\n        // config.plugins = []; // 这样会直接将 plugins 置空\n        \n        // 使用 return 一个对象会通过 webpack-merge 进行合并，plugins 不会置空\n        return {\n            plugins: []\n        }\n    }\n    \n    ...\n}\n\n")])])]),a("p",[e._v("configureWebpack 可以直接是一个对象，也可以是一个函数，如果是对象它会直接使用 webpack-merge 对其进行合并处理，如果是函数，你可以直接使用其 config 参数来修改 webpack 中的配置，或者返回一个对象来进行 merge 处理。")]),e._v(" "),a("p",[e._v("你可以在项目目录下运行 "),a("code",[e._v("vue inspect")]),e._v(" 来查看你修改后的 webpack 完整配置，当然你也可以缩小审查范围，比如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("# 只查看 plugins 的内容\nvue inspect plugins\n\n")])])]),a("h3",{attrs:{id:"f-devserver"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#f-devserver"}},[e._v("#")]),e._v(" f. devServer")]),e._v(" "),a("p",[e._v("vue.config.js 还提供了 devServer 项用于配置 webpack-dev-server 的行为，使得我们可以对本地服务器进行相应配置，我们在命令行中运行的 "),a("code",[e._v("yarn serve")]),e._v(" 对应的命令 "),a("code",[e._v("vue-cli-service serve")]),e._v(" 其实便是基于 webpack-dev-server 开启的一个本地服务器，其常用配置参数如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// vue.config.js\nmodule.exports = {\n    ...\n    \n    devServer: {\n        open: true, // 是否自动打开浏览器页面\n        host: '0.0.0.0', // 指定使用一个 host。默认是 localhost\n        port: 8080, // 端口地址\n        https: false, // 使用https提供服务\n        proxy: null, // string | Object 代理设置\n        \n        // 提供在服务器内部的其他中间件之前执行自定义中间件的能力\n        before: app => {\n          // `app` 是一个 express 实例\n        }\n    }\n    \n    ...\n}\n\n")])])]),a("p",[e._v("当然除了以上参数，其支持所有的 webpack-dev-server 中的选项，比如 "),a("code",[e._v("historyApiFallback")]),e._v(" 用于重写路由（会在后续的多页应用配置中讲解）、progress 将运行进度输出到控制台等，具体可参考："),a("a",{attrs:{href:"https://www.webpackjs.com/configuration/dev-server/",target:"_blank",rel:"noopener noreferrer"}},[e._v("devServer"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("以上讲解了 vue.config.js 中一些常用的配置项功能，具体的配置实现需要结合实际项目进行，完整的配置项可以查看："),a("a",{attrs:{href:"https://github.com/vuejs/vue-cli/blob/ce3e2d475d63895cbb40f62425bb6b3237469bcd/docs/zh/config/README.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("vue.config.js"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"_3-默认插件简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-默认插件简介"}},[e._v("#")]),e._v(" 3. 默认插件简介")]),e._v(" "),a("p",[e._v("通过对 vue.config.js 的了解，我们知道了 vue-cli 3.x 为我们默认封装了项目运行的常用 webpack 配置，那么它给我们提供了哪些默认插件，每一个 plugin 又有着怎样的用途呢？除了使用 "),a("code",[e._v("vue inspect plugins")]),e._v(" 我们还可以通过运行 "),a("code",[e._v("vue ui")]),e._v(" 进入可视化页面查看，步骤如下：")]),e._v(" "),a("ul",[a("li",[e._v("打开可视化页面，点击对应项目进入管理页面（如果没有对应项目，需要导入或新建）")]),e._v(" "),a("li",[e._v("点击侧边栏 Tasks 选项，再点击二级栏 inspect 选项")]),e._v(" "),a("li",[e._v("点击 Run task 按钮执行审查命令")])]),e._v(" "),a("p",[e._v("如图所示：")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://poetries1.gitee.io/img-repo/2020/08/vue/10.png",alt:""}})]),e._v(" "),a("p",[e._v("最后我们从输出的内容中找到 plugins 数组，其包含了如下插件（配置项已经省略，增加了定义插件的代码）：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// vue-loader是 webpack 的加载器，允许你以单文件组件的格式编写 Vue 组件\nconst VueLoaderPlugin = require('vue-loader/lib/plugin');\n\n// webpack 内置插件，用于创建在编译时可以配置的全局常量\nconst { DefinePlugin } = require('webpack');\n\n// 用于强制所有模块的完整路径必需与磁盘上实际路径的确切大小写相匹配\nconst CaseSensitivePathsPlugin = require('case-sensitive-paths-webpack-plugin');\n\n// 识别某些类型的 webpack 错误并整理，以提供开发人员更好的体验。\nconst FriendlyErrorsPlugin = require('friendly-errors-webpack-plugin');\n\n// 将 CSS 提取到单独的文件中，为每个包含 CSS 的 JS 文件创建一个 CSS 文件\nconst MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");\n\n// 用于在 webpack 构建期间优化、最小化 CSS文件\nconst OptimizeCssnanoPlugin = require('optimize-css-assets-webpack-plugin');\n\n// webpack 内置插件，用于根据模块的相对路径生成 hash 作为模块 id, 一般用于生产环境\nconst { HashedModuleIdsPlugin } = require('webpack');\n\n// 用于根据模板或使用加载器生成 HTML 文件\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\n// 用于在使用 html-webpack-plugin 生成的 html 中添加 <link rel ='preload'> 或 <link rel ='prefetch'>，有助于异步加载\nconst PreloadPlugin = require('preload-webpack-plugin');\n\n// 用于将单个文件或整个目录复制到构建目录\nconst CopyWebpackPlugin = require('copy-webpack-plugin');\n\nmodule.exports = {\n    plugins: [\n        /* config.plugin('vue-loader') */\n        new VueLoaderPlugin(), \n        \n        /* config.plugin('define') */\n        new DefinePlugin(),\n        \n        /* config.plugin('case-sensitive-paths') */\n        new CaseSensitivePathsPlugin(),\n        \n        /* config.plugin('friendly-errors') */\n        new FriendlyErrorsWebpackPlugin(),\n        \n        /* config.plugin('extract-css') */\n        new MiniCssExtractPlugin(),\n        \n        /* config.plugin('optimize-css') */\n        new OptimizeCssnanoPlugin(),\n        \n        /* config.plugin('hash-module-ids') */\n        new HashedModuleIdsPlugin(),\n        \n        /* config.plugin('html') */\n        new HtmlWebpackPlugin(),\n        \n        /* config.plugin('preload') */\n        new PreloadPlugin(),\n        \n        /* config.plugin('copy') */\n        new CopyWebpackPlugin()\n    ]\n}\n\n")])])]),a("p",[e._v("我们可以看到每个插件上方都添加了使用 chainWebpack 访问的方式，同时我也添加了每个插件相应的用途注释，需要注意的是要区分 webpack 内置插件和第三方插件的区别，如果是内置插件则无需安装下载，而外部插件大家可以直接访问："),a("a",{attrs:{href:"https://www.npmjs.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.npmjs.com/"),a("OutboundLink")],1),e._v(" 搜索对应的插件，了解其详细的 api 设置。")]),e._v(" "),a("h2",{attrs:{id:"结语"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结语"}},[e._v("#")]),e._v(" 结语")]),e._v(" "),a("p",[e._v("本文主要阐述了 vue-cli 3.x 下基于 vue.config.js 配置 webpack 的主要方法，同时也介绍了其默认的 webpack 插件与主要功能，相信大家在了解 webpack 的知识后能够更加轻松的开展后续内容的学习，为接下来项目的构建和开发奠定基础。")]),e._v(" "),a("h2",{attrs:{id:"思考-作业"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#思考-作业"}},[e._v("#")]),e._v(" 思考 & 作业")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("除了文章中介绍的配置项，"),a("code",[e._v("vue.config.js")]),e._v(" 中还有哪些额外的配置？")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("webpack-merge")]),e._v(" 的合并原理是怎样的？")])]),e._v(" "),a("li",[a("p",[e._v("使用 "),a("code",[e._v("chainWebpack")]),e._v(" 获取到 webpack 中的某一插件后，如何修改其配置？")])])])])}),[],!1,null,null,null);n.default=r.exports}}]);
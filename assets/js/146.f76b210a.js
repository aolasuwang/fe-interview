(window.webpackJsonp=window.webpackJsonp||[]).push([[146],{1379:function(t,e,s){"use strict";s.r(e);var a=s(10),v=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"一、必备知识点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、必备知识点"}},[t._v("#")]),t._v(" 一、必备知识点")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/1480597-e53fe40cce1f8eeb.png",alt:""}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/1480597-d907599b730fdeb0.png",alt:""}})]),t._v(" "),s("ul",[s("li",[s("code",[t._v("Remote")]),t._v(": 远程主仓库")]),t._v(" "),s("li",[s("code",[t._v("Repository/History")]),t._v("： 本地仓库")]),t._v(" "),s("li",[s("code",[t._v("Stage/Index")]),t._v("： Git追踪树,暂存区")]),t._v(" "),s("li",[s("code",[t._v("workspace")]),t._v("： 本地工作区（即你编辑器的代码）")])]),t._v(" "),s("h2",{attrs:{id:"二、git-add-提交到暂存区，出错怎么办"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、git-add-提交到暂存区，出错怎么办"}},[t._v("#")]),t._v(" 二、git add 提交到暂存区，出错怎么办")]),t._v(" "),s("blockquote",[s("p",[t._v("一般代码提交流程为：工作区 -> "),s("code",[t._v("git status")]),t._v(" 查看状态 -> "),s("code",[t._v("git add .")]),t._v(" 将所有修改加入暂存区-> "),s("code",[t._v('git commit -m "提交描述"')]),t._v(" 将代码提交到 本地仓库 -> "),s("code",[t._v("git push")]),t._v(" 将本地仓库代码更新到 远程仓库")])]),t._v(" "),s("p",[s("strong",[t._v("场景1：")])]),t._v(" "),s("blockquote",[s("p",[t._v("当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令 "),s("code",[t._v("git checkout -- file")])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 丢弃工作区的修改")]),t._v("\ngit checkout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("文件名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("p",[s("strong",[t._v("场景2：")])]),t._v(" "),s("blockquote",[s("p",[t._v("当你不但改乱了工作区某个文件的内容，还添加到了暂存时，想丢弃修改，分两步，第一步用命令 "),s("code",[t._v("git reset HEAD file")]),t._v("，就回到了场景1，第二步按场景1操作")])]),t._v(" "),s("h2",{attrs:{id:"三、git-commit-提交到本地仓库，出错怎么办？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、git-commit-提交到本地仓库，出错怎么办？"}},[t._v("#")]),t._v(" 三、git commit 提交到本地仓库，出错怎么办？")]),t._v(" "),s("p",[s("strong",[t._v("1.  提交信息出错")])]),t._v(" "),s("blockquote",[s("p",[t._v("更改 commit 信息")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("git commit "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("amend "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("m“新提交消息”\n")])])]),s("p",[s("strong",[t._v("2. 漏提交")])]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("commit")]),t._v(" 时，遗漏提交部分更新，有两种解决方案：")])]),t._v(" "),s("ol",[s("li",[t._v("方案一：再次 "),s("code",[t._v("commit")])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("git commit "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("m“提交消息”\n")])])]),s("blockquote",[s("p",[t._v("此时，"),s("code",[t._v("git")]),t._v(" 上会出现两次 "),s("code",[t._v("commit")])])]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("方案二：遗漏文件提交到之前 "),s("code",[t._v("commit")]),t._v(" 上")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("git add missed"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("file "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// missed-file 为遗漏提交文件")]),t._v("\ngit commit "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("amend "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("no"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("edit\n")])])]),s("blockquote",[s("p",[s("code",[t._v("--no-edit")]),t._v(" 表示提交消息不会更改，在 "),s("code",[t._v("git")]),t._v(" 上仅为一次提交")])]),t._v(" "),s("p",[s("strong",[t._v("3. 提交错误文件，回退到上一个 commit 版本，再 commit")])]),t._v(" "),s("ol",[s("li",[s("code",[t._v("git reset")])])]),t._v(" "),s("blockquote",[s("p",[t._v("删除指定的 "),s("code",[t._v("commit")])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 修改版本库，修改暂存区，修改工作区")]),t._v("\n\ngit reset "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HEAD")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("文件名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 把暂存区的修改撤销掉（unstage），重新放回工作区。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// git版本回退，回退到特定的commit_id版本，可以通过git log查看提交历史，以便确定要回退到哪个版本(commit 之后的即为ID);")]),t._v("\ngit reset "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("hard commit_id \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//将版本库回退1个版本，不仅仅是将本地版本库的头指针全部重置到指定版本，也会重置暂存区，并且会将工作区代码也回退到这个版本")]),t._v("\ngit reset "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("hard "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HEAD")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 修改版本库，保留暂存区，保留工作区")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将版本库软回退1个版本，软回退表示将本地版本库的头指针全部重置到指定版本，且将这次提交之后的所有变更都移动到暂存区。")]),t._v("\ngit reset "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("soft "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HEAD")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[s("code",[t._v("git revert")])])]),t._v(" "),s("blockquote",[s("p",[t._v("撤销某次操作，此次操作之前和之后的"),s("code",[t._v("commit")]),t._v("和"),s("code",[t._v("history")]),t._v("都会保留，并且把这次撤销")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 撤销前一次 commit")]),t._v("\ngit revert "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HEAD")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 撤销前前一次 commit")]),t._v("\ngit revert "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HEAD")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// (比如：fa042ce57ebbe5bb9c8db709f719cec2c58ee7ff）撤销指定的版本，撤销也会作为一次提交进行保存。")]),t._v("\ngit revert commit\n")])])]),s("blockquote",[s("p",[s("code",[t._v("git revert")]),t._v(" 是提交一个新的版本，将需要"),s("code",[t._v("revert")]),t._v("的版本的内容再反向修改回去，版本会递增，不影响之前提交的内容")])]),t._v(" "),s("p",[s("strong",[t._v("git revert 和 git reset 的区别")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("git revert")]),t._v("是用一次新的"),s("code",[t._v("commit")]),t._v("来回滚之前的"),s("code",[t._v("commit")]),t._v("，"),s("code",[t._v("git reset")]),t._v("是直接删除指定的"),s("code",[t._v("commit")])]),t._v(" "),s("li",[t._v("在回滚这一操作上看，效果差不多。但是在日后继续merge以前的老版本时有区别。因为"),s("code",[t._v("git revert")]),t._v("是用一次逆向的commit“中和”之前的提交，因此日后合并老的"),s("code",[t._v("branch")]),t._v("时，导致这部分改变不会再次出现，但是"),s("code",[t._v("git reset")]),t._v("是之间把某些"),s("code",[t._v("commit")]),t._v("在某个"),s("code",[t._v("branch")]),t._v("上删除，因而和老的"),s("code",[t._v("branch")]),t._v("再次"),s("code",[t._v("merge")]),t._v("时，这些被回滚的"),s("code",[t._v("commit")]),t._v("应该还会被引入")]),t._v(" "),s("li",[s("code",[t._v("git reset")]),t._v(" 是把HEAD向后移动了一下，而"),s("code",[t._v("git revert")]),t._v("是HEAD继续前进，只是新的"),s("code",[t._v("commit")]),t._v("的内容和要"),s("code",[t._v("revert")]),t._v("的内容正好相反，能够抵消要被"),s("code",[t._v("revert")]),t._v("的内容")])]),t._v(" "),s("h2",{attrs:{id:"四、常用命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、常用命令"}},[t._v("#")]),t._v(" 四、常用命令")]),t._v(" "),s("h3",{attrs:{id:"_4-1-初始开发-git-操作流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-初始开发-git-操作流程"}},[t._v("#")]),t._v(" 4.1 初始开发 git 操作流程")]),t._v(" "),s("ul",[s("li",[t._v("克隆最新主分支项目代码 "),s("code",[t._v("git clone 地址")])]),t._v(" "),s("li",[t._v("创建本地分支 "),s("code",[t._v("git branch 分支名")])]),t._v(" "),s("li",[t._v("查看本地分支 "),s("code",[t._v("git branch")])]),t._v(" "),s("li",[t._v("查看远程分支 "),s("code",[t._v("git branch -a")])]),t._v(" "),s("li",[t._v("切换分支  "),s("code",[t._v("git checkout 分支名")]),t._v("(一般修改未提交则无法切换，大小写问题经常会有，可强制切换  "),s("code",[t._v("git checkout 分支名 -f")]),t._v("  非必须慎用)")]),t._v(" "),s("li",[t._v("将本地分支推送到远程分支 "),s("code",[t._v("git push <远程仓库> <本地分支>:<远程分支>")])])]),t._v(" "),s("h3",{attrs:{id:"_4-2-git-fetch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-git-fetch"}},[t._v("#")]),t._v(" 4.2 git fetch")]),t._v(" "),s("blockquote",[s("p",[t._v("将某个远程主机的更新，全部/分支 取回本地（此时之更新了Repository）它取回的代码对你本地的开发代码没有影响，如需彻底更新需合并或使用"),s("code",[t._v("git pull")])])]),t._v(" "),s("h3",{attrs:{id:"_4-3-git-pull"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-git-pull"}},[t._v("#")]),t._v(" 4.3 git pull")]),t._v(" "),s("blockquote",[s("p",[t._v("拉取远程主机某分支的更新，再与本地的指定分支合并（相当与"),s("code",[t._v("fetch")]),t._v("加上了合并分支功能的操作）")])]),t._v(" "),s("h3",{attrs:{id:"_4-4-git-push"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-git-push"}},[t._v("#")]),t._v(" 4.4 git push")]),t._v(" "),s("blockquote",[s("p",[t._v("将本地分支的更新，推送到远程主机，其命令格式与"),s("code",[t._v("git pull")]),t._v("相似")])]),t._v(" "),s("h3",{attrs:{id:"_4-5-分支操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-分支操作"}},[t._v("#")]),t._v(" 4.5 分支操作")]),t._v(" "),s("ul",[s("li",[t._v("使用 "),s("code",[t._v("Git")]),t._v(" 下载指定分支命令为："),s("code",[t._v("git clone -b 分支名仓库地址")])]),t._v(" "),s("li",[t._v("拉取远程新分支 "),s("code",[t._v("git checkout -b serverfix origin/serverfix")])]),t._v(" "),s("li",[t._v("合并本地分支 "),s("code",[t._v("git merge hotfix")]),t._v("：(将 "),s("code",[t._v("hotfix")]),t._v(" 分支合并到当前分支)")]),t._v(" "),s("li",[t._v("合并远程分支 "),s("code",[t._v("git merge origin/serverfix")])]),t._v(" "),s("li",[t._v("删除本地分支 "),s("code",[t._v("git branch -d hotfix")]),t._v("：(删除本地 "),s("code",[t._v("hotfix")]),t._v(" 分支)")]),t._v(" "),s("li",[t._v("删除远程分支 "),s("code",[t._v("git push origin --delete serverfix")])]),t._v(" "),s("li",[t._v("上传新命名的本地分支："),s("code",[t._v("git push origin newName;")])]),t._v(" "),s("li",[t._v("创建新分支："),s("code",[t._v("git branch branchName")]),t._v("：(创建名为 "),s("code",[t._v("branchName")]),t._v(" 的本地分支)")]),t._v(" "),s("li",[t._v("切换到新分支："),s("code",[t._v("git checkout branchName")]),t._v("：(切换到 "),s("code",[t._v("branchName")]),t._v(" 分支)")]),t._v(" "),s("li",[t._v("创建并切换分支："),s("code",[t._v("git checkout -b branchName")]),t._v("：(相当于以上两条命令的合并)")]),t._v(" "),s("li",[t._v("查看本地分支："),s("code",[t._v("git branch")])]),t._v(" "),s("li",[t._v("查看远程仓库所有分支："),s("code",[t._v("git branch -a")])]),t._v(" "),s("li",[t._v("本地分支重命名："),s("code",[t._v("git branch -m oldName newName")])]),t._v(" "),s("li",[t._v("重命名远程分支对应的本地分支："),s("code",[t._v("git branch -m oldName newName")])]),t._v(" "),s("li",[t._v("把修改后的本地分支与远程分支关联："),s("code",[t._v("git branch --set-upstream-to origin/newName")])])]),t._v(" "),s("h2",{attrs:{id:"五、优化操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、优化操作"}},[t._v("#")]),t._v(" 五、优化操作")]),t._v(" "),s("h3",{attrs:{id:"_5-1-拉取代码-pull-rebase"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-拉取代码-pull-rebase"}},[t._v("#")]),t._v(" 5.1 拉取代码 pull --rebase")]),t._v(" "),s("ul",[s("li",[t._v("在团队协作过程中，假设你和你的同伴在本地中分别有各自的新提交，而你的同伴先于你 "),s("code",[t._v("push")]),t._v(" 了代码到远程分支上，所以你必须先执行 "),s("code",[t._v("git pull")]),t._v(" 来获取同伴的提交，然后才能"),s("code",[t._v("push")]),t._v(" 自己的提交到远程分支。")]),t._v(" "),s("li",[t._v("而按照 "),s("code",[t._v("Git")]),t._v(" 的默认策略，如果远程分支和本地分支之间的提交线图有分叉的话（即不是 fast-forwarded），"),s("code",[t._v("Git")]),t._v(" 会执行一次 "),s("code",[t._v("merge")]),t._v(" 操作，因此产生一次没意义的提交记录，从而造成了像上图那样的混乱。")]),t._v(" "),s("li",[t._v("其实在 "),s("code",[t._v("pull")]),t._v(" 操作的时候，，使用 "),s("code",[t._v("git pull --rebase")]),t._v("选项即可很好地解决上述问题。加上 "),s("code",[t._v("--rebase")]),t._v(" 参数的作用是，提交线图有分叉的话，"),s("code",[t._v("Git")]),t._v(" 会 "),s("code",[t._v("rebase")]),t._v(" 策略来代替默认的 "),s("code",[t._v("merge")]),t._v(" 策略。")])]),t._v(" "),s("p",[t._v("假设提交线图在执行 "),s("code",[t._v("pull")]),t._v(" 前是这样的")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("    A---B---C  remotes/origin/master\n    /\nD---E---F---G  master\n")])])]),s("p",[t._v("如果是执行 git pull 后，提交线图会变成这样：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("   A---B---C remotes/origin/master\n   /         \\\nD---E---F---G---H master\n")])])]),s("blockquote",[s("p",[t._v("结果多出了 H 这个没必要的提交记录。如果是执行 "),s("code",[t._v("git pull --rebase")]),t._v(" 的话，提交线图就会变成这样")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("remotes/origin/master\n   |\nD---E---A---B---C---F'---G'  master\n")])])]),s("blockquote",[s("p",[t._v("F G 两个提交通过 "),s("code",[t._v("rebase")]),t._v(" 方式重新拼接在 C 之后，多余的分叉去掉了，目的达到。")])]),t._v(" "),s("ul",[s("li",[t._v("大多数时候，使用 "),s("code",[t._v("git pull --rebase")]),t._v("是为了使提交线图更好看，从而方便 "),s("code",[t._v("code review")])]),t._v(" "),s("li",[t._v("不过，如果你对使用 "),s("code",[t._v("git")]),t._v(" 还不是十分熟练的话，我的建议是 "),s("code",[t._v("git pull --rebase")]),t._v("多练习几次之后再使用，因为 "),s("code",[t._v("rebase")]),t._v(" 在 "),s("code",[t._v("git")]),t._v(" 中，算得上是『危险行为』")]),t._v(" "),s("li",[t._v("另外，还需注意的是，使用 "),s("code",[t._v("git pull --rebase")]),t._v("比直接 "),s("code",[t._v("pull")]),t._v(" 容易导致冲突的产生，如果预期冲突比较多的话，建议还是直接 "),s("code",[t._v("pull")])])]),t._v(" "),s("p",[s("strong",[t._v("注意：")])]),t._v(" "),s("blockquote",[s("ul",[s("li",[s("code",[t._v("git pull = git fetch + git merge")])]),t._v(" "),s("li",[s("code",[t._v("git pull --rebase = git fetch + git rebase")])])])]),t._v(" "),s("h3",{attrs:{id:"_5-2-合代码-merge-no-ff"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-合代码-merge-no-ff"}},[t._v("#")]),t._v(" 5.2 合代码 merge --no-ff")]),t._v(" "),s("ul",[s("li",[t._v("上述的 "),s("code",[t._v("git pull --rebase")]),t._v(" 策略目的是修整提交线图，使其形成一条直线，而即将要用到的 "),s("code",[t._v("git merge --no-ff <branch-name>")]),t._v("策略偏偏是反行其道，刻意地弄出提交线图分叉出来。")]),t._v(" "),s("li",[t._v("假设你在本地准备合并两个分支，而刚好这两个分支是 "),s("code",[t._v("fast-forwarded")]),t._v(" 的，那么直接合并后你得到一个直线的提交线图，当然这样没什么坏处，但如果你想更清晰地告诉你同伴：这一系列的提交都是为了实现同一个目的，那么你可以刻意地将这次提交内容弄成一次提交线图分叉。")]),t._v(" "),s("li",[t._v("执行 "),s("code",[t._v("git merge --no-ff <branch-name>")]),t._v(" 的结果大概会是这样的：")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/1480597-140cfe6932a62a57.png",alt:""}})]),t._v(" "),s("p",[t._v("中间的分叉线路图很清晰的显示这些提交都是为了实现 complete adjusting user domains and tags")]),t._v(" "),s("blockquote",[s("p",[t._v("在合并分支之前（假设要在本地将 "),s("code",[t._v("feature")]),t._v(" 分支合并到 "),s("code",[t._v("dev")]),t._v(" 分支），会先检查 "),s("code",[t._v("feature")]),t._v(" 分支是否『部分落后』于远程 "),s("code",[t._v("dev")]),t._v(" 分支")])]),t._v(" "),s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git checkout dev\ngit pull # 更新 dev 分支\ngit log feature..dev\n")])])]),s("blockquote",[s("p",[t._v("如果没有输出任何提交信息的话，即表示 "),s("code",[t._v("feature")]),t._v(" 对于 "),s("code",[t._v("dev")]),t._v(" 分支是 "),s("code",[t._v("up-to-date")]),t._v(" 的。如果有输出的话而马上执行了 "),s("code",[t._v("git merge --no-ff")]),t._v(" 的话，提交线图会变成这样")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/1480597-6d83bae1d4f45a86.png",alt:""}})]),t._v(" "),s("p",[t._v("所以这时在合并前，通常我会先执行")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git checkout feature\ngit rebase dev\n")])])]),s("ul",[s("li",[t._v("这样就可以将 "),s("code",[t._v("feature")]),t._v(" 重新拼接到更新了的 "),s("code",[t._v("dev")]),t._v(" 之后，然后就可以合并了，最终得到一个干净舒服的提交线图。")]),t._v(" "),s("li",[t._v("再次提醒：像之前提到的，"),s("code",[t._v("rebase")]),t._v(" 是『危险行为』，建议你足够熟悉 "),s("code",[t._v("git")]),t._v(" 时才这么做，否则的话是得不偿失啊。")])]),t._v(" "),s("p",[s("strong",[t._v("总结")])]),t._v(" "),s("ul",[s("li",[t._v("使用 "),s("code",[t._v("git pull --rebase")]),t._v(" 和 "),s("code",[t._v("git merge --no-ff")]),t._v(" 其实和直接使用 "),s("code",[t._v("git pull git merge")]),t._v(" 得到的代码应该是一样。")]),t._v(" "),s("li",[t._v("使用 "),s("code",[t._v("git pull --rebase")]),t._v(" 主要是为是将提交约线图平坦化，而 "),s("code",[t._v("git merge --no-ff")]),t._v(" 则是刻意制造分叉")])]),t._v(" "),s("h2",{attrs:{id:"六、ssh"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#六、ssh"}},[t._v("#")]),t._v(" 六、SSH")]),t._v(" "),s("p",[s("strong",[t._v("1. 查看是否生成了 SSH 公钥")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ cd ~/.ssh\n$ ls\nid_rsa      id_rsa.pub      known_hosts\n")])])]),s("p",[t._v("其中 id_rsa 是私钥，id_rsa.pub 是公钥")]),t._v(" "),s("p",[s("strong",[t._v("2. 如果没有那就开始生成，设置全局的user.name与user.email")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("git config "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("list "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 查看是否设置了user.name与user.email，没有的话，去设置")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置全局的user.name与user.email")]),t._v("\ngit config "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("global user"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"XX"')]),t._v("\ngit config "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("global user"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("email "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"XX"')]),t._v("\n")])])]),s("p",[s("strong",[t._v("3. 输入 ssh-keygen 即可（或"),s("code",[t._v('ssh-keygen -t rsa -C "email"')]),t._v("）")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("$ ssh"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("keygen\nGenerating "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" rsa key pair"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\nEnter file "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" which to save the "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("key")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("Users"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("schacon"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ssh"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("id_rsa"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\nEnter "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("passphrase")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("empty "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" no passphrase"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\nEnter same passphrase again"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\nYour identification has been saved "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("Users"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("schacon"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ssh"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("id_rsa"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\nYour "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" key has been saved "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("Users"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("schacon"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ssh"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("id_rsa"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pub"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\nThe key fingerprint is"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n")])])]),s("p",[s("strong",[t._v("4. 生成之后获取公钥内容，输入 cat ~/.ssh/id_rsa.pub 即可， 复制 ssh-rsa 一直到 .local这一整段内容")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ cat ~/.ssh/id_rsa.pub\nssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom/BWDSU\nGPl+nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3\nPbv7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK/7XA\nt3FaoJoAsncM1Q9x5+3V0Ww68/eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw/Pb0rwert/En\nmZ+AW4OZPnTPI89ZPmVMLuayrD2cE86Z/il8b+gw3r3+1nKatmIkjn2so1d01QraTlMqVSsbx\nNrRFi9wrf+M7Q== schacon@agadorlaptop.local\n")])])]),s("p",[s("strong",[t._v("5. 打开 GitLab 或者 GitHub，点击头像，找到设置页")])]),t._v(" "),s("p",[s("strong",[t._v("6. 左侧找到 SSH keys 按钮并点击，输入刚刚复制的公钥即可")])]),t._v(" "),s("h2",{attrs:{id:"七、暂存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#七、暂存"}},[t._v("#")]),t._v(" 七、暂存")]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("git stash")]),t._v(" 可用来暂存当前正在进行的工作，比如想 "),s("code",[t._v("pull")]),t._v(" 最新代码又不想 "),s("code",[t._v("commit")]),t._v(" ， 或者另为了修改一个紧急的 "),s("code",[t._v("bug")]),t._v(" ，先 "),s("code",[t._v("stash")]),t._v("，使返回到自己上一个 "),s("code",[t._v("commit")]),t._v(",，改完 "),s("code",[t._v("bug")]),t._v(" 之后再 "),s("code",[t._v("stash pop")]),t._v(" , 继续原来的工作；")])]),t._v(" "),s("ul",[s("li",[t._v("添加缓存栈："),s("code",[t._v("git stash")]),t._v(" ;")]),t._v(" "),s("li",[t._v("查看缓存栈："),s("code",[t._v("git stash list")]),t._v(" ;")]),t._v(" "),s("li",[t._v("推出缓存栈："),s("code",[t._v("git stash pop")]),t._v(" ;")]),t._v(" "),s("li",[t._v("取出特定缓存内容："),s("code",[t._v("git stash apply stash@{1}")]),t._v(" ;")])]),t._v(" "),s("h2",{attrs:{id:"八、文件名过长错误"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#八、文件名过长错误"}},[t._v("#")]),t._v(" 八、文件名过长错误")]),t._v(" "),s("p",[t._v("Filename too long warning: Clone succeeded, but checkout failed.")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git config --system core.longpaths true\n")])])]),s("h2",{attrs:{id:"九、邮箱和用户名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#九、邮箱和用户名"}},[t._v("#")]),t._v(" 九、邮箱和用户名")]),t._v(" "),s("p",[s("strong",[t._v("查看")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("git config user.name")])]),t._v(" "),s("li",[s("code",[t._v("git config user.email")])])]),t._v(" "),s("p",[s("strong",[t._v("修改")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v('git config --global user.name "username"')])]),t._v(" "),s("li",[s("code",[t._v('git config --global user.email "email"')])])]),t._v(" "),s("h2",{attrs:{id:"十、-gitignore-更新后生效："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#十、-gitignore-更新后生效："}},[t._v("#")]),t._v(" 十、.gitignore 更新后生效：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('git rm -r --cached .\ngit add .\ngit commit -m ".gitignore is now working”\n')])])]),s("h2",{attrs:{id:"十一、同步github-fork-出来的分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#十一、同步github-fork-出来的分支"}},[t._v("#")]),t._v(" 十一、同步Github fork 出来的分支")]),t._v(" "),s("p",[s("strong",[t._v("1. 配置remote，指向原始仓库")])]),t._v(" "),s("blockquote",[s("p",[t._v("git remote add upstream https://github.com/InterviewMap/InterviewMap.git")])]),t._v(" "),s("p",[s("strong",[t._v("2. 上游仓库获取到分支，及相关的提交信息，它们将被保存在本地的 upstream/master 分支")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" fetch upstream\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# remote: Counting objects: 75, done.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# remote: Compressing objects: 100% (53/53), done.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# remote: Total 62 (delta 27), reused 44 (delta 9)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Unpacking objects: 100% (62/62), done.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# From https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# * [new branch] master -> upstream/master")]),t._v("\n")])])]),s("p",[s("strong",[t._v("3. 切换到本地的 master 分支")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout master\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Switched to branch 'master'")]),t._v("\n")])])]),s("p",[s("strong",[t._v("4. 把 upstream/master 分支合并到本地的 master 分支，本地的 master 分支便跟上游仓库保持同步了，并且没有丢失本地的修改")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge upstream/master\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Updating a422352..5fdff0f")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Fast-forward")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# README | 9 -------")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# README.md | 7 ++++++")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2 files changed, 7 insertions(+), 9 deletions(-)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# delete mode 100644 README")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# create mode 100644 README.md")]),t._v("\n")])])]),s("p",[s("strong",[t._v("5. 上传到自己的远程仓库中")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git push \n")])])])])}),[],!1,null,null,null);e.default=v.exports}}]);
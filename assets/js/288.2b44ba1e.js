(window.webpackJsonp=window.webpackJsonp||[]).push([[288],{849:function(t,s,n){"use strict";n.r(s);var a=n(10),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"一、前言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、前言"}},[t._v("#")]),t._v(" 一、前言")]),t._v(" "),n("blockquote",[n("p",[t._v("nodejs是事件驱动、非阻塞I/O模型")])]),t._v(" "),n("ul",[n("li",[t._v("阻塞：i/o时进程休眠等待完成后进行下一步")]),t._v(" "),n("li",[t._v("非阻塞：i/o时函数立即返回，进程不等待i/o返回")])]),t._v(" "),n("blockquote",[n("p",[t._v("i/o完成后通知主程序，如何告诉呢？通过事件驱动")])]),t._v(" "),n("p",[n("strong",[t._v("事件驱动")])]),t._v(" "),n("ul",[n("li",[t._v("i/o等异步操作结束后通知")]),t._v(" "),n("li",[t._v("内部实现是观察者模式")])]),t._v(" "),n("p",[n("strong",[t._v("CPU密集和I/O密集")])]),t._v(" "),n("ul",[n("li",[n("code",[t._v("CPU")]),t._v("密集：压缩、解压、加密、解密")]),t._v(" "),n("li",[n("code",[t._v("I/O")]),t._v("密集：文件操作、网络操作、数据库")])]),t._v(" "),n("p",[n("strong",[t._v("web常见场景(web是一个I/O密集)")])]),t._v(" "),n("ul",[n("li",[t._v("静态资源读取")]),t._v(" "),n("li",[t._v("数据库操作")]),t._v(" "),n("li",[t._v("渲染页面")])]),t._v(" "),n("p",[n("strong",[t._v("高并发应用之道")])]),t._v(" "),n("ul",[n("li",[t._v("增加机器数")]),t._v(" "),n("li",[t._v("增加每台机器CPU数-多核")])]),t._v(" "),n("p",[n("img",{attrs:{src:"https://poetries1.gitee.io/img-repo/2019/10/347.png",alt:""}})]),t._v(" "),n("p",[n("strong",[t._v("进程、线程")])]),t._v(" "),n("ul",[n("li",[t._v("进程：一个运行的程序（进程包括线程，如何水分子里面还有分子原子）")]),t._v(" "),n("li",[t._v("线程：进程内一个独立的，可调度的执行单元")]),t._v(" "),n("li",[t._v("多线程：启动一个进程，在一个进程内启动多个线程，这样多个线程可以执行多个任务")])]),t._v(" "),n("p",[n("strong",[t._v("Nodejs的单线程")])]),t._v(" "),n("ul",[n("li",[t._v("单线程只是针对主进程，I/O操作系统底层多线程调度")]),t._v(" "),n("li",[t._v("单线程并不是单进程")])]),t._v(" "),n("p",[n("strong",[t._v("Nodejs原理")])]),t._v(" "),n("ul",[n("li",[t._v("Node是单线程的，只开一个进程，一个进程也只开一个线程。一个CPU上只开一个进程，一个进程里面只有一个线程")])]),t._v(" "),n("p",[n("strong",[t._v("nodejs高性能的前提")])]),t._v(" "),n("ul",[n("li",[t._v("高并发")]),t._v(" "),n("li",[n("code",[t._v("I/O")]),t._v("密集")])]),t._v(" "),n("p",[n("strong",[t._v("常用场景")])]),t._v(" "),n("ul",[n("li",[n("code",[t._v("web Server")])]),t._v(" "),n("li",[t._v("本地代码构建 ("),n("code",[t._v("webpack/grunt/gulp")]),t._v(")")]),t._v(" "),n("li",[t._v("使用工具的开发")])]),t._v(" "),n("h2",{attrs:{id:"二、nodejs与javascrip异同"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、nodejs与javascrip异同"}},[t._v("#")]),t._v(" 二、nodejs与JavaScrip异同")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("ECMAScript")])]),t._v(" "),n("li",[t._v("语法")]),t._v(" "),n("li",[t._v("内置对象、方法")])]),t._v(" "),n("p",[n("strong",[t._v("顶层对象")])]),t._v(" "),n("ul",[n("li",[n("p",[n("code",[t._v("JavaScript")]),t._v("："),n("code",[t._v("window")])])]),t._v(" "),n("li",[n("p",[n("code",[t._v("nodejs")]),t._v(": "),n("code",[t._v("global")])])]),t._v(" "),n("li",[n("p",[t._v("在ECMA部分node和JavaScript是一样的，比如数据类型的定义，语法结构、内置对象")])])]),t._v(" "),n("h2",{attrs:{id:"三、模块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、模块"}},[t._v("#")]),t._v(" 三、模块")]),t._v(" "),n("ul",[n("li",[t._v("在"),n("code",[t._v("node")]),t._v("中文件和模块是一一对应的，也就是一个文件一个模块。__file是每个模块下必有的一个属性，输出文件的绝对路径。"),n("code",[t._v("__dirname")]),t._v(" 是文件夹名称绝对路径")]),t._v(" "),n("li",[t._v("每个模块都有自己的作用域")]),t._v(" "),n("li",[t._v("我们通过var声明的变量并非全局，而是该模块作用域下的")])]),t._v(" "),n("p",[n("strong",[t._v("模块加载机制")])]),t._v(" "),n("ul",[n("li",[n("code",[t._v("require")]),t._v("加载模块")]),t._v(" "),n("li",[t._v("1、首先按照加载模块的文件名称进行查找")]),t._v(" "),n("li",[t._v("2、如果没有找到就会在文件模块文件名称后加载"),n("code",[t._v(".js")]),t._v("进行查找")]),t._v(" "),n("li",[t._v("3、如果还没有找到，就在文件名称后加载"),n("code",[t._v(".json")]),t._v("后缀，进行查找")]),t._v(" "),n("li",[t._v("4、如果还没找到，就会在文件名称后加上"),n("code",[t._v(".node")]),t._v("进行查找")]),t._v(" "),n("li",[t._v("查找流程："),n("strong",[t._v("文件名称->.js -> .json->.node")])])]),t._v(" "),n("p",[n("strong",[t._v("exports、module")])]),t._v(" "),n("ul",[n("li",[t._v("保存当前模块有关的一些信息")]),t._v(" "),n("li",[n("code",[t._v("module.exports")]),t._v(" 一般使用这个,把一个模块中的变量对外提供访问")]),t._v(" "),n("li",[t._v("在模块作用域，还有一个内置的模块对象，"),n("code",[t._v("exports")]),t._v("其实就是"),n("code",[t._v("module.exports")]),t._v(",他们两个都是指向同一个对象")])]),t._v(" "),n("h2",{attrs:{id:"四、node目录的配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四、node目录的配置"}},[t._v("#")]),t._v(" 四、node目录的配置")]),t._v(" "),n("ul",[n("li",[t._v("配置文件 : "),n("code",[t._v("package.json")]),t._v(" "),n("ul",[n("li",[t._v("dependencies :  当前项目所使用到的依赖模块")]),t._v(" "),n("li",[t._v("安装方式: "),n("code",[t._v("npm install")]),t._v(" 自动读取"),n("code",[t._v("package.json")]),t._v("自动安装")])])]),t._v(" "),n("li",[n("code",[t._v("router")]),t._v("目录 用来存放路由文件")]),t._v(" "),n("li",[n("code",[t._v("views")]),t._v("目录  用来存放"),n("code",[t._v("html")]),t._v("模板文件")]),t._v(" "),n("li",[n("code",[t._v("module")]),t._v("目录  自己写的一些模块")])]),t._v(" "),n("h2",{attrs:{id:"五、第一个node服务器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#五、第一个node服务器"}},[t._v("#")]),t._v(" 五、第一个node服务器")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   安装好node就有的一个模块")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  用来创建http服务器的")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" http "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("http")]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nhttp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("createServer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("request"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("response")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//request 请求对象     浏览器 请求 服务器所有的内容保存在这个对象里")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//response 响应对象     服务器响应浏览器 所有的方法")]),t._v("\n    response"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("writeHead")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Content-Type'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'text/html'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  .end() 结束响应 同时发送一个 Hello Word")]),t._v("\n    response"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello Word'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("listen")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("233")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//.listen(); 监听端口 233  自定义的端口号")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果开启了node服务器  修改完之后的代码必须 重启才能生效")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);
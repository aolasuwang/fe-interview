(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{189:function(e,t,s){"use strict";var n=s(22);e.exports=function(e,t){return!!e&&n((function(){t?e.call(null,(function(){}),1):e.call(null)}))}},190:function(e,t,s){"use strict";var n=s(100),a=s(101)(!1),r=[].indexOf,v=!!r&&1/[1].indexOf(1,-0)<0;n(n.P+n.F*(v||!s(189)(r)),"Array",{indexOf:function(e){return v?r.apply(this,arguments)||0:a(this,e,arguments[1])}})},677:function(e,t,s){"use strict";s.r(t);s(190);var n={mounted:function(){var e=-1!==location.href.indexOf("FE-Interview-Questions")?"59154049":"66575297",t=document.createElement("script");t.type="text/javascript",t.charset="UTF-8",t.src="http://tajs.qq.com/stats?sId=".concat(e),document.body.appendChild(t)}},a=s(10),r=Object(a.a)(n,(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"_1-初识-npm-script"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-初识-npm-script"}},[e._v("#")]),e._v(" 1 初识 npm script")]),e._v(" "),s("blockquote",[s("p",[e._v("首先介绍创建 "),s("code",[e._v("package.json")]),e._v(" 文件的科学方法，目标是掌握 "),s("code",[e._v("npm init")]),e._v(" 命令。然后，通过在终端中运行自动生成的 "),s("code",[e._v("test")]),e._v(" 命令，详细讲解 "),s("code",[e._v("npm")]),e._v(" 脚本基本执行流程。 然后，动手给项目增加 "),s("code",[e._v("eslint")]),e._v(" 命令，熟悉创建自定义命令的基本流程。")])]),e._v(" "),s("h3",{attrs:{id:"用-npm-init-快速创建项目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用-npm-init-快速创建项目"}},[e._v("#")]),e._v(" 用 npm init 快速创建项目")]),e._v(" "),s("blockquote",[s("p",[e._v("开始探索 "),s("code",[e._v("npm script")]),e._v(" 之前，我们先聊聊这些 "),s("code",[e._v("scripts")]),e._v(" 所依赖的文件 "),s("code",[e._v("package.json")]),e._v("，以它为基础的 "),s("code",[e._v("npm")]),e._v(" 则是 "),s("code",[e._v("node.js")]),e._v(" 社区蓬勃发展的顶梁柱。")])]),e._v(" "),s("p",[s("code",[e._v("npm")]),e._v(" 为我们提供了快速创建 "),s("code",[e._v("package.json")]),e._v(" 文件的命令 "),s("code",[e._v("npm init")]),e._v("，执行该命令会问几个基本问题，如包名称、版本号、作者信息、入口文件、仓库地址、许可协议等，多数问题已经提供了默认值，你可以在问题后敲回车接受默认值：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("package name: (hello-npm-script)\nversion: (0.1.0)\ndescription: hello npm script\nentry point: (index.js)\ntest command:\ngit repository:\nkeywords: npm, script\nlicense: (MIT)\n")])])]),s("blockquote",[s("p",[e._v("上面的例子指定了描述（description）和关键字（keywords）两个字段，基本问题问完之后 "),s("code",[e._v("npm")]),e._v(" 会把 "),s("code",[e._v("package.json")]),e._v(" 文件内容打出来供你确认：")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('{\n  "name": "hello-npm-script",\n  "version": "0.1.0",\n  "description": "hello npm script",\n  "main": "index.js",\n  "scripts": {\n    "test": "echo \\"Error: no test specified\\" && exit 1"\n  },\n  "keywords": [\n    "npm",\n    "script"\n  ],\n  "author": "wangshijun <wangshijun2010@gmail.com> (https://github.com/wangshijun)",\n  "license": "MIT"\n}\n\n')])])]),s("blockquote",[s("p",[e._v("按回车确认就能把"),s("code",[e._v("package.json")]),e._v(" 的内容写到文件系统，如果要修改 "),s("code",[e._v("package.json")]),e._v("，可以直接用编辑器编辑，或者再次运行 "),s("code",[e._v("npm init")]),e._v("，"),s("code",[e._v("npm")]),e._v(" 默认不会覆盖修改里面已经存在的信息。")])]),e._v(" "),s("blockquote",[s("p",[s("strong",[e._v("TIP#1")]),e._v(": 嫌上面的初始化方式太啰嗦？你可以使用 "),s("code",[e._v("npm init -f")]),e._v("（意指 "),s("code",[e._v("--force")]),e._v("，或者使用 "),s("code",[e._v("--yes")]),e._v("）告诉 "),s("code",[e._v("npm")]),e._v(" 直接跳过参数问答环节，快速生成 "),s("code",[e._v("package.json")]),e._v("。")])]),e._v(" "),s("p",[e._v("初始化 "),s("code",[e._v("package.json")]),e._v(" 时的字段默认值是可以自己配置的，细心的同学可能已经发现，我上面的默认版本号是 0.1.0，而 npm 默认的版本号是 0.0.1，可以用下面的命令去修改默认配置：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('npm config set init.author.email "wangshijun2010@gmail.com"\nnpm config set init.author.name "wangshijun"\nnpm config set init.author.url "http://github.com/wangshijun"\nnpm config set init.license "MIT"\nnpm config set init.version "0.1.0"\n')])])]),s("blockquote",[s("p",[s("strong",[e._v("TIP#2")]),e._v(": 将默认配置和 -f 参数结合使用，能让你用最短的时间创建 package.json，快去自己试试吧。")])]),e._v(" "),s("p",[e._v("严肃的工程师都会使用 Git 对源代码进行版本管理，在 "),s("code",[e._v("npm init")]),e._v(" 的基础上，你可以使用 git init 来初始化 git 仓库，不再展开。")]),e._v(" "),s("p",[e._v("纸上得来终觉浅，想掌握 "),s("code",[e._v("npm script")]),e._v("，请打开终端，执行下列命令：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("cd ~\nmkdir hello-npm-script && cd $_\nnpm init\nnpm init -f\n")])])]),s("p",[s("strong",[e._v("执行上面第 3、4 行命令时结果是否符合预期？如果不符合预期，请在下面留言，或者在读者群里反馈。")])]),e._v(" "),s("h3",{attrs:{id:"用-npm-run-执行任意命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用-npm-run-执行任意命令"}},[e._v("#")]),e._v(" 用 npm run 执行任意命令")]),e._v(" "),s("p",[e._v("使用 "),s("code",[e._v("npm init")]),e._v(" 创建的 "),s("code",[e._v("package.json")]),e._v(" 文件中包含了 "),s("code",[e._v("scripts")]),e._v(" 字段：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('"scripts": {\n  "test": "echo \\"Error: no test specified\\" && exit 1"\n},\n\n')])])]),s("ul",[s("li",[e._v("在终端中运行 "),s("code",[e._v("npm run test")]),e._v("，能看到 "),s("code",[e._v("Error: no test specified")]),e._v(" 的输出。"),s("code",[e._v("npm run test")]),e._v(" 可以简写为 "),s("code",[e._v("npm test")]),e._v("，或更简单的 "),s("code",[e._v("npm t")]),e._v("，得到的结果是几乎相同的。"),s("code",[e._v("npm test")]),e._v(" 顾名思义，就是运行项目测试，实际用法在实战环节会有介绍。")]),e._v(" "),s("li",[e._v("和 "),s("code",[e._v("test")]),e._v(" 类似，"),s("code",[e._v("start")]),e._v(" 也是 "),s("code",[e._v("npm")]),e._v(" 内置支持的命令，但是需要先在 "),s("code",[e._v("scripts")]),e._v(" 字段中声明该脚本的实际内容，如果没声明就执行 "),s("code",[e._v("npm start")]),e._v("，会直接报错。如下图所示：")])]),e._v(" "),s("p",[s("img",{attrs:{src:"https://poetries1.gitee.io/img-repo/2020/07/npm/1.png",alt:""}})]),e._v(" "),s("blockquote",[s("p",[e._v("那么，"),s("code",[e._v("npm")]),e._v(" 是如何管理和执行各种 "),s("code",[e._v("scripts")]),e._v(" 的呢？作为 "),s("code",[e._v("npm")]),e._v(" 内置的核心功能之一，"),s("code",[e._v("npm run")]),e._v(" 实际上是 "),s("code",[e._v("npm run-script")]),e._v(" 命令的简写。当我们运行 "),s("code",[e._v("npm run xxx")]),e._v(" 时，基本步骤如下：")])]),e._v(" "),s("ol",[s("li",[e._v("从 "),s("code",[e._v("package.json")]),e._v(" 文件中读取 "),s("code",[e._v("scripts")]),e._v(" 对象里面的全部配置；")]),e._v(" "),s("li",[e._v("以传给 "),s("code",[e._v("npm run")]),e._v(" 的第一个参数作为键，本例中为 "),s("code",[e._v("xxx")]),e._v("，在 "),s("code",[e._v("scripts")]),e._v(" 对象里面获取对应的值作为接下来要执行的命令，如果没找到直接报错；")]),e._v(" "),s("li",[e._v("在系统默认的 "),s("code",[e._v("shell")]),e._v(" 中执行上述命令，系统默认 "),s("code",[e._v("shell")]),e._v(" 通常是 "),s("code",[e._v("bash")]),e._v("，"),s("code",[e._v("windows")]),e._v(" 环境下可能略有不同，稍后再讲。")])]),e._v(" "),s("p",[e._v("注意，上面这是简化的流程，更复杂的钩子机制后面章节单独介绍。")]),e._v(" "),s("p",[e._v("举例来说，如果 "),s("code",[e._v("package.json")]),e._v(" 文件内容如下：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('{\n  "name": "hello-npm-script",\n  "devDependencies": {\n    "eslint": "latest"\n  },\n  "scripts": {\n    "eslint": "eslint **.js"\n  }\n}\n\n')])])]),s("p",[e._v("如果不带任何参数执行 "),s("code",[e._v("npm run")]),e._v("，它会列出可执行的所有命令，比如下面这样：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Available scripts in the myproject package:\n  eslint\n    eslint **.js\n\n")])])]),s("p",[e._v("如果运行 "),s("code",[e._v("npm run eslint")]),e._v("，"),s("code",[e._v("npm")]),e._v(" 会在 "),s("code",[e._v("shell")]),e._v(" 中运行 "),s("code",[e._v("eslint \\*\\*.js")]),e._v("。")]),e._v(" "),s("blockquote",[s("p",[e._v("有没有好奇过上面的 eslint 命令是从哪里来的？其实，npm 在执行指定 "),s("code",[e._v("script")]),e._v(" 之前会把 "),s("code",[e._v("node\\_modules/.bin")]),e._v(" 加到环境变量 "),s("code",[e._v("$PATH")]),e._v(" 的前面，这意味着任何内含可执行文件的 "),s("code",[e._v("npm")]),e._v(" 依赖都可以在 "),s("code",[e._v("npm script")]),e._v(" 中直接调用，换句话说，你不需要在 "),s("code",[e._v("npm script")]),e._v(" 中加上可执行文件的完整路径，比如 "),s("code",[e._v("./node_modules/.bin/eslint **.js")]),e._v("。")])]),e._v(" "),s("h3",{attrs:{id:"创建自定义-npm-script"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建自定义-npm-script"}},[e._v("#")]),e._v(" 创建自定义 npm script")]),e._v(" "),s("blockquote",[s("p",[e._v("知道如何运行 "),s("code",[e._v("npm script")]),e._v(" 之后，接下来我们在 "),s("code",[e._v("hello-npm-script")]),e._v(" 项目中添加有实际用途的 "),s("code",[e._v("eslint")]),e._v(" 脚本，"),s("a",{attrs:{href:"https://eslint.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("eslint"),s("OutboundLink")],1),e._v(" 是社区中接受度比较高的 javascript 风格检查工具，有大把现成的规则集可供你选择，比如 "),s("a",{attrs:{href:"https://github.com/google/eslint-config-google",target:"_blank",rel:"noopener noreferrer"}},[e._v("google"),s("OutboundLink")],1),e._v("、 "),s("a",{attrs:{href:"https://www.npmjs.com/package/eslint-config-airbnb",target:"_blank",rel:"noopener noreferrer"}},[e._v("airbnb"),s("OutboundLink")],1),e._v("。")])]),e._v(" "),s("p",[e._v("在新项目或者任何现有项目中添加 eslint 自定义脚本的步骤如下：")]),e._v(" "),s("p",[s("strong",[e._v("1. 准备被检查的代码")])]),e._v(" "),s("p",[e._v("要做代码检查，我们必须有代码，创建 "),s("code",[e._v("index.js")]),e._v(" 文件，输入如下内容：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const str = 'some value';\n\nfunction fn(){\n    console.log('some log');\n}\n\n")])])]),s("p",[s("strong",[e._v("2. 添加 eslint 依赖")])]),e._v(" "),s("p",[e._v("执行如下命令将 "),s("code",[e._v("eslint")]),e._v(" 添加为 "),s("code",[e._v("devDependencies")]),e._v("：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm install eslint -D\n\n")])])]),s("p",[s("strong",[e._v("3. 初始化 eslint 配置")])]),e._v(" "),s("p",[e._v("用 "),s("code",[e._v("eslint")]),e._v(" 做检查需要配置规则集，存放规则集的文件就是配置文件，使用如下文件生成配置文件：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("./node_modules/.bin/eslint --init\n")])])]),s("blockquote",[s("p",[s("strong",[e._v("TIP#3")]),e._v(": 把 eslint 安装为项目依赖而非全局命令，项目可移植性更高。")])]),e._v(" "),s("p",[e._v("在命令行提示中选择 "),s("code",[e._v("Answer questions about your style")]),e._v("，如下图回答几个问题，答案可以根据自己的偏好：")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://poetries1.gitee.io/img-repo/2020/07/npm/2.png",alt:""}})]),e._v(" "),s("p",[e._v("回车后根目录下就有了 "),s("code",[e._v(".eslintrc.js")]),e._v(" 配置文件：")]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[e._v("module"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("exports "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  env"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    es6"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("extends")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'eslint:recommended'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  rules"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    indent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'error'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'linebreak-style'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'error'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'unix'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    quotes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'error'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'single'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    semi"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'error'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'always'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n")])])]),s("p",[s("strong",[e._v("4. 添加 eslint 命令")])]),e._v(" "),s("blockquote",[s("p",[e._v("在 "),s("code",[e._v("package.json")]),e._v(" 的 "),s("code",[e._v("scripts")]),e._v(" 字段中新增命令 "),s("code",[e._v("eslint")]),e._v("：")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('{\n  "scripts": {\n    "eslint": "eslint *.js",\n    "test": "echo \\"Error: no test specified\\" && exit 1"\n  },\n}\n\n')])])]),s("p",[s("strong",[e._v("手动修改 package.json 时一定要注意语法正确。")])]),e._v(" "),s("p",[s("strong",[e._v("5. 运行 eslint 命令")])]),e._v(" "),s("blockquote",[s("p",[e._v("执行 "),s("code",[e._v("npm run eslint")]),e._v("，可以看到，按照官方推荐规则代码里有 3 处不符合规范的地方：")])]),e._v(" "),s("p",[s("img",{attrs:{src:"https://poetries1.gitee.io/img-repo/2020/07/npm/3.png",alt:""}})]),e._v(" "),s("p",[e._v("如果读到这里，相信你已经完成 "),s("code",[e._v("npm script")]),e._v(" 上手，接下来我们去探索更高级的话题。")]),e._v(" "),s("p",[s("strong",[e._v("6. eslint 完成 react、vue.js 代码的检查")])]),e._v(" "),s("blockquote",[s("p",[e._v("如果需要结合 "),s("code",[e._v("eslint")]),e._v(" 检查主流前端框架 react、vue.js，下面提供两条线索，因为官方仓库的 README 就可以作为入门文档，仔细读读相信绝大多数同学都能配置好。")])]),e._v(" "),s("ul",[s("li",[e._v("使用 "),s("a",{attrs:{href:"https://github.com/yannickcr/eslint-plugin-react",target:"_blank",rel:"noopener noreferrer"}},[e._v("eslint-plugin-react"),s("OutboundLink")],1),e._v(" 检查 react 代码")]),e._v(" "),s("li",[e._v("使用 "),s("a",{attrs:{href:"https://github.com/Intellicode/eslint-plugin-react-native",target:"_blank",rel:"noopener noreferrer"}},[e._v("react-plugin-react-native"),s("OutboundLink")],1),e._v(" 检查 react-native 代码，如果你比较懒，可以直接使用 "),s("a",{attrs:{href:"https://www.npmjs.com/package/eslint-config-airbnb",target:"_blank",rel:"noopener noreferrer"}},[e._v("eslint-config-airbnb"),s("OutboundLink")],1),e._v("，里面内置了 eslint-plugin-react，新人常遇到 peerDependencies 安装失败问题可参照 npmjs 主页上的如下方法解决：")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('(\n  export PKG=eslint-config-airbnb;\n  npm info "$PKG@latest" peerDependencies --json | command sed \'s/[\\{\\},]//g ; s/: /@/g\' | xargs npm install --save-dev "$PKG@latest"\n)\n')])])]),s("ul",[s("li",[e._v("推荐使用 vue.js 官方的 eslint 插件："),s("a",{attrs:{href:"https://github.com/vuejs/eslint-plugin-vue",target:"_blank",rel:"noopener noreferrer"}},[e._v("eslint-plugin-vue"),s("OutboundLink")],1),e._v(" 来检查 vue.js 代码，具体的配置方法官方 README 写的清晰明了，这里就不赘述了。")]),e._v(" "),s("li",[e._v("上面的几种 eslint 规则集的官方仓库都列出了各自支持的规则，如果你需要关闭某些规则，可以直接在自己的 .eslintrc* 里面的 rules 中配置，比如我们仓库里面的：")])]),e._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[e._v("module"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("exports "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  env"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    es6"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("extends")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'eslint:recommended'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  rules"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    indent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'error'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'linebreak-style'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'error'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'unix'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    quotes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'error'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'single'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    semi"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'error'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'always'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),s("h2",{attrs:{id:"_2-运行多个-npm-script-的各种姿势"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-运行多个-npm-script-的各种姿势"}},[e._v("#")]),e._v(" 2 运行多个 npm script 的各种姿势")]),e._v(" "),s("blockquote",[s("p",[e._v("前端项目通常会包括多个 "),s("code",[e._v("npm script")]),e._v("，对多个命令进行编排是很自然的需求，有时候需要将多个命令串行，即脚本遵循严格的执行顺序；有时候则需要让它们并行来提高速度，比如不相互阻塞的 "),s("code",[e._v("npm script")]),e._v("。社区中也有比 "),s("code",[e._v("npm")]),e._v(" 内置的多命令运行机制更好用的解决方案："),s("code",[e._v("npm-run-all")]),e._v("。")])]),e._v(" "),s("h3",{attrs:{id:"哪来那么多命令？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#哪来那么多命令？"}},[e._v("#")]),e._v(" 哪来那么多命令？")]),e._v(" "),s("blockquote",[s("p",[e._v("通常来说，前端项目会包含 "),s("code",[e._v("js")]),e._v("、"),s("code",[e._v("css")]),e._v("、"),s("code",[e._v("less")]),e._v("、"),s("code",[e._v("scss")]),e._v("、"),s("code",[e._v("json")]),e._v("、"),s("code",[e._v("markdown")]),e._v(" 等格式的文件，为保障代码质量，给不同的代码添加检查是很有必要的，代码检查不仅保障代码没有低级的语法错误，还可确保代码都遵守社区的最佳实践和一致的编码风格，在团队协作中尤其有用，即使是个人项目，加上代码检查，也会提高你的效率和质量。")])]),e._v(" "),s("p",[e._v("我通常会给前端项目加上下面 4 种代码检查：")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://eslint.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("eslint"),s("OutboundLink")],1),e._v("，可定制的 js 代码检查")]),e._v(" "),s("li",[s("a",{attrs:{href:"https://stylelint.io",target:"_blank",rel:"noopener noreferrer"}},[e._v("stylelint"),s("OutboundLink")],1),e._v("，可定制的样式文件检查，支持 "),s("code",[e._v("css")]),e._v("、"),s("code",[e._v("less")]),e._v("、"),s("code",[e._v("scss")]),e._v("；")]),e._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/zaach/jsonlint",target:"_blank",rel:"noopener noreferrer"}},[e._v("jsonlint"),s("OutboundLink")],1),e._v("，"),s("code",[e._v("json")]),e._v(" 文件语法检查，踩过坑的同学会清楚，"),s("code",[e._v("json")]),e._v(" 文件语法错误会知道导致各种失败；")]),e._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/igorshubovych/markdownlint-cli",target:"_blank",rel:"noopener noreferrer"}},[e._v("markdownlint-cli"),s("OutboundLink")],1),e._v("，Markdown 文件最佳实践检查，个人偏好；")])]),e._v(" "),s("p",[e._v("需要注意的是，"),s("code",[e._v("html")]),e._v(" 代码也应该检查，但是工具支持薄弱，就略过不表。此外，为代码添加必要的单元测试也是质量保障的重要手段，常用的单测技术栈是：")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://mochajs.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("mocha"),s("OutboundLink")],1),e._v("，测试用例组织，测试用例运行和结果收集的框架；")]),e._v(" "),s("li",[s("a",{attrs:{href:"http://chaijs.com",target:"_blank",rel:"noopener noreferrer"}},[e._v("chai"),s("OutboundLink")],1),e._v("，测试断言库，必要的时候可以结合 "),s("a",{attrs:{href:"http://sinonjs.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("sinon"),s("OutboundLink")],1),e._v(" 使用；")])]),e._v(" "),s("blockquote",[s("p",[s("strong",[e._v("TIP#4")]),e._v("：测试工具如 "),s("a",{attrs:{href:"http://www.node-tap.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("tap"),s("OutboundLink")],1),e._v("、"),s("a",{attrs:{href:"https://github.com/avajs/ava",target:"_blank",rel:"noopener noreferrer"}},[e._v("ava"),s("OutboundLink")],1),e._v(" 也都提供了命令行接口，能很好的集成到 "),s("code",[e._v("npm script")]),e._v(" 中，原理是相通的。")])]),e._v(" "),s("p",[e._v("包含了基本的代码检查、单元测试命令的 "),s("code",[e._v("package.json")]),e._v(" 如下：")]),e._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"name"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"hello-npm-script"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"version"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"0.1.0"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"main"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"index.js"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"scripts"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"lint:js"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"eslint *.js"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"lint:css"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"stylelint *.less"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"lint:json"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"jsonlint --quiet *.json"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"lint:markdown"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"markdownlint --config .markdownlint.json *.md"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"test"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"mocha tests/"')]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"devDependencies"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"chai"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"^4.1.2"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"eslint"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"^4.11.0"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"jsonlint"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"^1.6.2"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"markdownlint-cli"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"^0.5.0"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"mocha"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"^4.0.1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"stylelint"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"^8.2.0"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"stylelint-config-standard"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"^17.0.0"')]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n")])])]),s("h3",{attrs:{id:"让多个-npm-script-串行？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#让多个-npm-script-串行？"}},[e._v("#")]),e._v(" 让多个 npm script 串行？")]),e._v(" "),s("blockquote",[s("p",[e._v("在我们运行测试之前确保我们的代码都通过代码检查会是比较不错的实践，这也是让多个 "),s("code",[e._v("npm script")]),e._v(" 串行的典型用例，实现方式也比较简单，只需要用 "),s("code",[e._v("&&")]),e._v(" 符号把多条 "),s("code",[e._v("npm script")]),e._v(" 按先后顺序串起来即可，具体到我们的项目，修改如下图所示：")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('diff --git a/package.json b/package.json\nindex c904250..023d71e 100644\n--- a/package.json\n+++ b/package.json\n@@ -8,7 +8,7 @@\n-    "test": "mocha tests/"\n+    "test": "npm run lint:js && npm run lint:css && npm run lint:json && npm run lint:markdown && mocha tests/"\n   },\n\n')])])]),s("blockquote",[s("p",[e._v("然后直接执行 "),s("code",[e._v("npm test")]),e._v(" 或 "),s("code",[e._v("npm t")]),e._v("，从输出可以看到子命令的执行顺序是严格按照我们在 "),s("code",[e._v("scripts")]),e._v(" 中声明的先后顺序来的：")])]),e._v(" "),s("blockquote",[s("p",[s("code",[e._v("eslint ==> stylelint ==> jsonlint ==> markdownlint ==> mocha")])])]),e._v(" "),s("p",[s("img",{attrs:{src:"https://poetries1.gitee.io/img-repo/2020/07/npm/4.png",alt:""}})]),e._v(" "),s("p",[e._v("需要注意的是，串行执行的时候如果前序命令失败（通常进程退出码非0），后续全部命令都会终止，我们可以尝试在 "),s("code",[e._v("index.js")]),e._v(" 中引入错误（删掉行末的分号）：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("diff --git a/index.js b/index.js\nindex ab8bd0e..b817ea4 100644\n--- a/index.js\n+++ b/index.js\n@@ -4,7 +4,7 @@ const add = (a, b) => {\n   }\n\n   return NaN;\n-};\n+}\n\n module.exports = { add  };\n")])])]),s("p",[e._v("然后重新运行 "),s("code",[e._v("npm t")]),e._v("，结果如下，"),s("code",[e._v("npm run lint:js")]),e._v(" 失败之后，后续命令都没有执行：")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://poetries1.gitee.io/img-repo/2020/07/npm/5.png",alt:""}})]),e._v(" "),s("h3",{attrs:{id:"让多个-npm-script-并行？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#让多个-npm-script-并行？"}},[e._v("#")]),e._v(" 让多个 npm script 并行？")]),e._v(" "),s("blockquote",[s("p",[e._v("在严格串行的情况下，我们必须要确保代码中没有编码规范问题才能运行测试，在某些时候可能并不是我们想要的，因为我们真正需要的是，代码变更时同时给出测试结果和测试运行结果。这就需要把子命令的运行从串行改成并行，实现方式更简单，把连接多条命令的 "),s("code",[e._v("&&")]),e._v(" 符号替换成 "),s("code",[e._v("&")]),e._v(" 即可。")])]),e._v(" "),s("p",[e._v("代码变更如下：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('diff --git a/package.json b/package.json\nindex 023d71e..2d9bd6f 100644\n--- a/package.json\n+++ b/package.json\n@@ -8,7 +8,7 @@\n-    "test": "npm run lint:js && npm run lint:css && npm run lint:json && npm run lint:markdown && mocha tests/"\n+    "test": "npm run lint:js & npm run lint:css & npm run lint:json & npm run lint:markdown & mocha tests/"\n   },\n\n')])])]),s("p",[e._v("重新运行 "),s("code",[e._v("npm t")]),e._v("，我们得到如下结果：")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://poetries1.gitee.io/img-repo/2020/07/npm/6.png",alt:""}})]),e._v(" "),s("blockquote",[s("p",[e._v("细心的同学可能已经发现上图中哪里不对，"),s("code",[e._v("npm run lint:js")]),e._v(" 的结果在进程退出之后才输出，如果你自己运行，不一定能稳定复现这个问题，但 "),s("code",[e._v("npm")]),e._v(" 内置支持的多条命令并行跟 "),s("code",[e._v("js")]),e._v(" 里面同时发起多个异步请求非常类似，它只负责触发多条命令，而不管结果的收集，如果并行的命令执行时间差异非常大，上面的问题就会稳定复现。怎么解决这个问题呢？")])]),e._v(" "),s("p",[e._v("答案也很简单，在命令的增加 "),s("code",[e._v("& wait")]),e._v(" 即可，这样我们的 test 命令长这样：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm run lint:js & npm run lint:css & npm run lint:json & npm run lint:markdown & mocha tests/ & wait\n")])])]),s("blockquote",[s("p",[e._v("加上 "),s("code",[e._v("wait")]),e._v(" 的额外好处是，如果我们在任何子命令中启动了长时间运行的进程，比如启用了 "),s("code",[e._v("mocha")]),e._v(" 的 "),s("code",[e._v("--watch")]),e._v(" 配置，可以使用 "),s("code",[e._v("ctrl + c")]),e._v(" 来结束进程，如果没加的话，你就没办法直接结束启动到后台的进程。")])]),e._v(" "),s("h3",{attrs:{id:"有没有更好的管理方式？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#有没有更好的管理方式？"}},[e._v("#")]),e._v(" 有没有更好的管理方式？")]),e._v(" "),s("ul",[s("li",[e._v("有强迫症的同学可能会觉得像上面这样用原生方式来运行多条命令很臃肿，幸运的是，我们可以使用 "),s("code",[e._v("npm-run-all")]),e._v(" 实现更轻量和简洁的多命令运行。")]),e._v(" "),s("li",[e._v("用如下命令将 "),s("code",[e._v("npm-run-all")]),e._v(" 添加到项目依赖中：")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm i npm-run-all -D\n")])])]),s("p",[e._v("然后修改 "),s("code",[e._v("package.json")]),e._v(" 实现多命令的串行执行：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('diff --git a/package.json b/package.json\nindex b3b1272..83974d6 100644\n--- a/package.json\n+++ b/package.json\n@@ -8,7 +8,8 @@\n-    "test": "npm run lint:js & npm run lint:css & npm run lint:json & npm run lint:markdown & mocha tests/ & wait"\n+    "mocha": "mocha tests/",\n+    "test": "npm-run-all lint:js lint:css lint:json lint:markdown mocha"\n   },\n\n')])])]),s("blockquote",[s("p",[s("code",[e._v("npm-run-all")]),e._v(" 还支持通配符匹配分组的 "),s("code",[e._v("npm script")]),e._v("，上面的脚本可以进一步简化成：")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('diff --git a/package.json b/package.json\nindex 83974d6..7b327cd 100644\n--- a/package.json\n+++ b/package.json\n@@ -9,7 +9,7 @@\n-    "test": "npm-run-all lint:js lint:css lint:json lint:markdown mocha"\n+    "test": "npm-run-all lint:* mocha"\n   },\n\n')])])]),s("blockquote",[s("p",[e._v("如何让多个 "),s("code",[e._v("npm script")]),e._v(" 并行执行？也很简单：")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('diff --git a/package.json b/package.json\nindex 7b327cd..c32da1c 100644\n--- a/package.json\n+++ b/package.json\n@@ -9,7 +9,7 @@\n-    "test": "npm-run-all lint:* mocha"\n+    "test": "npm-run-all --parallel lint:* mocha"\n   },\n\n')])])]),s("blockquote",[s("p",[e._v("并行执行的时候，我们并不需要在后面增加 "),s("code",[e._v("& wait")]),e._v("，因为 npm-run-all 已经帮我们做了。")])]),e._v(" "),s("blockquote",[s("p",[s("strong",[e._v("TIP#5")]),e._v("：npm-run-all 还提供了很多配置项支持更复杂的命令编排，比如多个命令并行之后接串行的命令，感兴趣的同学请阅读"),s("a",{attrs:{href:"https://github.com/mysticatea/npm-run-all/blob/HEAD/docs/npm-run-all.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("文档"),s("OutboundLink")],1),e._v("，自己玩儿。")])]),e._v(" "),s("h2",{attrs:{id:"_3-给-npm-script-传递参数和添加注释"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-给-npm-script-传递参数和添加注释"}},[e._v("#")]),e._v(" 3 给 npm script 传递参数和添加注释")]),e._v(" "),s("p",[e._v("本小节会介绍 3 个知识点：给 "),s("code",[e._v("npm script")]),e._v(" 传递参数以减少重复的 "),s("code",[e._v("npm script")]),e._v("；增加注释提高 "),s("code",[e._v("npm script")]),e._v(" 脚本的可读性；控制运行时日志输出能让你专注在重要信息上。")]),e._v(" "),s("h3",{attrs:{id:"给-npm-script-传递参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#给-npm-script-传递参数"}},[e._v("#")]),e._v(" 给 npm script 传递参数")]),e._v(" "),s("blockquote",[s("p",[s("code",[e._v("eslint")]),e._v(" 内置了代码风格自动修复模式，只需给它传入 "),s("code",[e._v("--fix")]),e._v(" 参数即可，在 "),s("code",[e._v("scripts")]),e._v(" 中声明检查代码命令的同时你可能也需要声明修复代码的命令，面对这种需求，大多数同学可能会忍不住复制粘贴，如下：")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('diff --git a/package.json b/package.json\nindex c32da1c..b6fb03e 100644\n--- a/package.json\n+++ b/package.json\n@@ -5,6 +5,7 @@\n     "lint:js": "eslint *.js",\n+    "lint:js:fix": "eslint *.js --fix",\n')])])]),s("blockquote",[s("p",[e._v("在 "),s("code",[e._v("lint:js")]),e._v(" 命令比较短的时候复制粘贴的方法简单粗暴有效，但是当 "),s("code",[e._v("lint:js")]),e._v(" 命令变的很长之后，难免后续会有人改了 "),s("code",[e._v("lint:js")]),e._v(" 而忘记修改 "),s("code",[e._v("lint:js:fix")]),e._v("（"),s("strong",[e._v("别问我为啥，我就是踩着坑过来的")]),e._v("），更健壮的做法是，在运行 "),s("code",[e._v("npm script")]),e._v(" 时给定额外的参数，代码修改如下：")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('diff --git a/package.json b/package.json\n--- a/package.json\n+++ b/package.json\n@@ -5,6 +5,7 @@\n     "lint:js": "eslint *.js",\n+    "lint:js:fix": "npm run lint:js -- --fix",\n')])])]),s("blockquote",[s("p",[e._v("要格外注意 "),s("code",[e._v("--fix")]),e._v(" 参数前面的 "),s("code",[e._v("--")]),e._v(" 分隔符，意指要给 "),s("code",[e._v("npm run lint:js")]),e._v(" 实际指向的命令传递额外的参数。")])]),e._v(" "),s("p",[e._v("运行效果如下图：")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://poetries1.gitee.io/img-repo/2020/07/npm/7.png",alt:""}})]),e._v(" "),s("p",[e._v("上图第2个红色框里面是实际执行的命令，可以看到 "),s("code",[e._v("--fix")]),e._v(" 参数附加在了后面。")]),e._v(" "),s("blockquote",[s("p",[s("strong",[e._v("TIP#6")]),e._v("：如果你不想单独声明 "),s("code",[e._v("lint:js:fix")]),e._v(" 命令，在需要的时候直接运行： "),s("code",[e._v("npm run lint:js -- --fix")]),e._v(" 来实现同样的效果。")])]),e._v(" "),s("blockquote",[s("p",[e._v("问题来了，如果我想为 mocha 命令增加 "),s("code",[e._v("--watch")]),e._v(" 模式方便在开发时立即看到测试结果，该怎么做呢？相信读到这里你心中已经有了答案。")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(":stuck\\_out\\_tongue:\n")])])]),s("h3",{attrs:{id:"给-npm-script-添加注释"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#给-npm-script-添加注释"}},[e._v("#")]),e._v(" 给 npm script 添加注释")]),e._v(" "),s("ul",[s("li",[e._v("如果 "),s("code",[e._v("package.json")]),e._v(" 中的 "),s("code",[e._v("scripts")]),e._v(" 越来越多，或者出现复杂的编排命令，你可能需要给它们添加注释以保障代码可读性，但 "),s("code",[e._v("json")]),e._v(" 天然是不支持添加注释的，下面是 2 种比较 "),s("code",[e._v("trick")]),e._v(" 的方式。")]),e._v(" "),s("li",[e._v("第一种方式是，"),s("code",[e._v("package.json")]),e._v(" 中可以增加 "),s("code",[e._v("//")]),e._v(" 为键的值，注释就可以写在对应的值里面，npm 会忽略这种键，比如，我们想要给 "),s("code",[e._v("test")]),e._v(" 命令添加注释，按如下方式添加：")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('diff --git a/package.json b/package.json\n--- a/package.json\n+++ b/package.json\n@@ -10,6 +10,7 @@\n+    "//": "运行所有代码检查和单元测试",\n     "test": "npm-run-all --parallel lint:* mocha"\n')])])]),s("p",[e._v("这种方式的明显不足是，"),s("code",[e._v("npm run")]),e._v(" 列出来的命令列表不能把注释和实际命令对应上，如果你声明了多个，"),s("code",[e._v("npm run")]),e._v(" 只会列出最后那个，如下图：")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://poetries1.gitee.io/img-repo/2020/07/npm/8.png",alt:""}})]),e._v(" "),s("blockquote",[s("p",[e._v("另外一种方式是直接在 "),s("code",[e._v("script")]),e._v(" 声明中做手脚，因为命令的本质是 "),s("code",[e._v("shell")]),e._v(" 命令（适用于 linux 平台），我们可以在命令前面加上注释，具体做法如下：")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('diff --git a/package.json b/package.json\n--- a/package.json\n+++ b/package.json\n@@ -10,8 +10,7 @@\n-    "//": "运行所有代码检查和单元测试",\n-    "test": "npm-run-all --parallel lint:* mocha"\n+    "test": "# 运行所有代码检查和单元测试 \\n    npm-run-all --parallel lint:* mocha"\n')])])]),s("blockquote",[s("p",[e._v("注意注释后面的换行符 "),s("code",[e._v("\\n")]),e._v(" 和多余的空格，换行符是用于将注释和命令分隔开，这样命令就相当于微型的 shell 脚本，多余的空格是为了控制缩进，也可以用制表符 "),s("code",[e._v("\\t")]),e._v(" 替代。这种做法能让 "),s("code",[e._v("npm run")]),e._v(" 列出来的命令更美观，但是 "),s("code",[e._v("scripts")]),e._v(" 声明阅读起来不那么整齐美观。")])]),e._v(" "),s("p",[s("img",{attrs:{src:"https://poetries1.gitee.io/img-repo/2020/07/npm/9.png",alt:""}})]),e._v(" "),s("p",[e._v("上面两种方式都有明显的缺陷，个人建议的更优方案还是把复杂的命令剥离到单独的文件中管理，在单独的文件中可以自由给它添加注释，详见后续章节。")]),e._v(" "),s("h3",{attrs:{id:"调整-npm-script-运行时日志输出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#调整-npm-script-运行时日志输出"}},[e._v("#")]),e._v(" 调整 npm script 运行时日志输出")]),e._v(" "),s("blockquote",[s("p",[e._v("在运行 "),s("code",[e._v("npm script")]),e._v(" 出现问题时你需要有能力去调试它，某些情况下你需要让 "),s("code",[e._v("npm script")]),e._v(" 以静默的方式运行，这类需求可通过控制运行时日志输出级别来实现。")])]),e._v(" "),s("p",[e._v("日志级别控制参数有好几个，简单举例如下：")]),e._v(" "),s("p",[s("strong",[e._v("1. 默认日志输出级别")])]),e._v(" "),s("p",[e._v("即不加任何日志控制参数得到的输出，可能是你最常用的，能看到执行的命令、命令执行的结果。")]),e._v(" "),s("p",[s("strong",[e._v("2. 显示尽可能少的有用信息")])]),e._v(" "),s("blockquote",[s("p",[e._v("结合其他工具调用 "),s("code",[e._v("npm script")]),e._v(" 的时候比较有用，需要使用 "),s("code",[e._v("--loglevel silent")]),e._v("，或者 "),s("code",[e._v("--silent")]),e._v("，或者更简单的 "),s("code",[e._v("-s")]),e._v(" 来控制，这个日志级别的输出实例如下（只有命令本身的输出，读起来非常的简洁）：")])]),e._v(" "),s("p",[s("img",{attrs:{src:"https://poetries1.gitee.io/img-repo/2020/07/npm/10.png",alt:""}})]),e._v(" "),s("blockquote",[s("p",[e._v("如果执行各种 "),s("code",[e._v("lint script")]),e._v(" 的时候启用了 "),s("code",[e._v("-s")]),e._v(" 配置，代码都符合规范的话，你不会看到任何输出，这就是"),s("strong",[e._v("没有消息是最好的消息")]),e._v("的由来，哈哈！")])]),e._v(" "),s("p",[s("strong",[e._v("3. 显示尽可能多的运行时状态")])]),e._v(" "),s("blockquote",[s("p",[e._v("排查脚本问题的时候比较有用，需要使用 "),s("code",[e._v("--loglevel verbose")]),e._v("，或者 "),s("code",[e._v("--verbose")]),e._v("，或者更简单的 "),s("code",[e._v("-d")]),e._v(" 来控制，这个日志级别的输出实例如下（详细打印出了每个步骤的参数、返回值，下面的截图只是部分）：")])]),e._v(" "),s("p",[s("img",{attrs:{src:"https://poetries1.gitee.io/img-repo/2020/07/npm/11.png",alt:""}})]),e._v(" "),s("h2",{attrs:{id:"_4-使用-npm-script-的钩子"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-使用-npm-script-的钩子"}},[e._v("#")]),e._v(" 4 使用 npm script 的钩子")]),e._v(" "),s("blockquote",[s("p",[e._v("为了方便开发者自定义，"),s("code",[e._v("npm script")]),e._v(" 的设计者为命令的执行增加了类似生命周期的机制，具体来说就是 "),s("code",[e._v("pre")]),e._v(" 和 "),s("code",[e._v("post")]),e._v(" 钩子脚本。这种特性在某些操作前需要做检查、某些操作后需要做清理的情况下非常有用。")])]),e._v(" "),s("p",[s("strong",[e._v("举例来说，运行 npm run test 的时候，分 3 个阶段：")])]),e._v(" "),s("ol",[s("li",[e._v("检查 "),s("code",[e._v("scripts")]),e._v(" 对象中是否存在 "),s("code",[e._v("pretest")]),e._v(" 命令，如果有，先执行该命令；")]),e._v(" "),s("li",[e._v("检查是否有 "),s("code",[e._v("test")]),e._v(" 命令，有的话运行 "),s("code",[e._v("test")]),e._v(" 命令，没有的话报错；")]),e._v(" "),s("li",[e._v("检查是否存在 "),s("code",[e._v("posttest")]),e._v(" 命令，如果有，执行 "),s("code",[e._v("posttest")]),e._v(" 命令；")])]),e._v(" "),s("blockquote",[s("p",[e._v("到目前为止我们所覆盖的前端工作流包含了代码检查和测试自动化运行环节，"),s("strong",[e._v("衡量测试效果的重要指标是测试覆盖率")]),e._v("，而收集覆盖率也非常的简单，"),s("strong",[e._v("下面逐步讲解如何把代码检查、测试运行、覆盖率收集这些步骤串起来")]),e._v("。")])]),e._v(" "),s("h3",{attrs:{id:"改造-test-命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#改造-test-命令"}},[e._v("#")]),e._v(" 改造 test 命令")]),e._v(" "),s("p",[e._v("首先，我们基于钩子机制对现有的 "),s("code",[e._v("scripts")]),e._v(" 做以下 3 点重构，把代码检查和测试运行串起来：")]),e._v(" "),s("ul",[s("li",[e._v("增加简单的 "),s("code",[e._v("lint")]),e._v(" 命令，并行运行所有的 "),s("code",[e._v("lint")]),e._v(" 子命令；")]),e._v(" "),s("li",[e._v("增加 "),s("code",[e._v("pretest")]),e._v(" 钩子，在其中运行 "),s("code",[e._v("lint")]),e._v(" 命令；")]),e._v(" "),s("li",[e._v("把 "),s("code",[e._v("test")]),e._v(" 替换为更简单的 "),s("code",[e._v("mocha tests/")]),e._v("；")])]),e._v(" "),s("p",[e._v("代码 "),s("code",[e._v("diff")]),e._v(" 如下：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('diff --git a/package.json b/package.json\nindex 8f67810..d297f2e 100644\n--- a/package.json\n+++ b/package.json\n@@ -4,13 +4,17 @@\n+    "lint": "npm-run-all --parallel lint:*",\n     "lint:js": "eslint *.js",\n     "lint:js:fix": "npm run lint:js -- --fix",\n     "lint:css": "stylelint *.less",\n     "lint:json": "jsonlint --quiet *.json",\n     "lint:markdown": "markdownlint --config .markdownlint.json *.md",\n-    "mocha": "mocha tests/",\n-    "test": "# 运行所有代码检查和单元测试 \\n    npm-run-all --parallel lint:* mocha"\n+    "pretest": "npm run lint",\n+    "test": "mocha tests/",\n')])])]),s("blockquote",[s("p",[e._v("当我们运行 "),s("code",[e._v("npm test")]),e._v(" 的时候，会先自动执行 "),s("code",[e._v("pretest")]),e._v(" 里面的 "),s("code",[e._v("lint")]),e._v("，实际输出如下：")])]),e._v(" "),s("p",[s("img",{attrs:{src:"https://poetries1.gitee.io/img-repo/2020/07/npm/12.png",alt:""}})]),e._v(" "),s("h3",{attrs:{id:"增加覆盖率收集"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#增加覆盖率收集"}},[e._v("#")]),e._v(" 增加覆盖率收集")]),e._v(" "),s("blockquote",[s("p",[e._v("接下来，我们把运行测试和覆盖率收集串起来，具体做法是：增加覆盖率收集的命令，并且覆盖率收集完毕之后自动打开 "),s("code",[e._v("html")]),e._v(" 版本的覆盖率报告。要实现目标，我们需要引入两个新工具：")])]),e._v(" "),s("ol",[s("li",[e._v("覆盖率收集工具 "),s("a",{attrs:{href:"https://github.com/istanbuljs/nyc",target:"_blank",rel:"noopener noreferrer"}},[e._v("nyc"),s("OutboundLink")],1),e._v("，是覆盖率收集工具 "),s("a",{attrs:{href:"https://istanbul.js.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("istanbul"),s("OutboundLink")],1),e._v(" 的命令行版本，"),s("code",[e._v("istanbul")]),e._v(" 支持生成各种格式的覆盖率报告，我已经使用多年；")]),e._v(" "),s("li",[e._v("打开 "),s("code",[e._v("html")]),e._v(" 文件的工具 "),s("a",{attrs:{href:"https://github.com/sindresorhus/opn-cli",target:"_blank",rel:"noopener noreferrer"}},[e._v("opn-cli"),s("OutboundLink")],1),e._v("，是能够打开任意程序的工具 "),s("a",{attrs:{href:"https://github.com/sindresorhus/opn",target:"_blank",rel:"noopener noreferrer"}},[e._v("opn"),s("OutboundLink")],1),e._v(" 的命令行版本，作者是\b前端社区非常高产的 "),s("a",{attrs:{href:"https://github.com/sindresorhus",target:"_blank",rel:"noopener noreferrer"}},[e._v("Sindre Sorhus"),s("OutboundLink")],1),e._v("，它在 npm 上发布了超过 1000 个包，并且质量都很不错。")])]),e._v(" "),s("p",[e._v("使用如下命令安装依赖：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm i nyc opn-cli -D\n")])])]),s("blockquote",[s("p",[e._v("然后在 "),s("code",[e._v("package.json")]),e._v(" 增加 "),s("code",[e._v("nyc")]),e._v(" 的配置，告诉 "),s("code",[e._v("nyc")]),e._v(" 该忽略哪些文件。最后是在 "),s("code",[e._v("scripts")]),e._v(" 中新增 3 条命令：")])]),e._v(" "),s("ol",[s("li",[s("code",[e._v("precover")]),e._v("，收集覆盖率之前把之前的覆盖率报告目录清理掉；")]),e._v(" "),s("li",[s("code",[e._v("cover")]),e._v("，直接调用 "),s("code",[e._v("nyc")]),e._v("，让其生成 "),s("code",[e._v("html")]),e._v(" 格式的覆盖率报告；")]),e._v(" "),s("li",[s("code",[e._v("postcover")]),e._v("，清理掉临时文件，并且在浏览器中预览覆盖率报告；")])]),e._v(" "),s("p",[e._v("具体 "),s("code",[e._v("diff")]),e._v(" 如下：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('diff --git a/package.json b/package.json\nindex 8f67810..d297f2e 100644\n--- a/package.json\n+++ b/package.json\n@@ -4,13 +4,17 @@\n   scripts: {\n+    "precover": "rm -rf coverage",\n+    "cover": "nyc --reporter=html npm test",\n+    "postcover": "rm -rf .nyc_output && opn coverage/index.html"\n   },\n@@ -22,7 +26,15 @@\n   "devDependencies": {\n     "npm-run-all": "^4.1.2",\n+    "nyc": "^11.3.0",\n+    "opn-cli": "^3.1.0",\n     "stylelint": "^8.2.0",\n     "stylelint-config-standard": "^17.0.0"\n+  },\n+  "nyc": {\n+    "exclude": [\n+      "**/*.spec.js",\n+      ".*.js"\n+    ]\n   }\n }\n')])])]),s("blockquote",[s("p",[e._v("改完之后，我们可以直接运行 "),s("code",[e._v("npm run cover")]),e._v("，运行的详细截图如下：")])]),e._v(" "),s("p",[s("img",{attrs:{src:"https://poetries1.gitee.io/img-repo/2020/07/npm/13.png",alt:""}})]),e._v(" "),s("blockquote",[s("p",[s("strong",[e._v("TIP#7")]),e._v("：到目前为止，我们的工作流中已经包含代码检查、测试运行、覆盖率收集、覆盖率查看等功能，你是不是可以用来改进下自己的工作流呢？")])]),e._v(" "),s("blockquote",[s("p",[e._v("本节用到的代码见 "),s("a",{attrs:{href:"https://github.com/wangshijun/automated-workflow-with-npm-script/tree/04-pre-and-post-hooks",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitHub"),s("OutboundLink")],1),e._v("，想边看边动手练习的同学可以拉下来自己改，注意切换到正确的分支 "),s("code",[e._v("04-pre-and-post-hooks")]),e._v("。")])]),e._v(" "),s("h2",{attrs:{id:"_5-在-npm-script-中使用变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-在-npm-script-中使用变量"}},[e._v("#")]),e._v(" 5 在 npm script 中使用变量")]),e._v(" "),s("blockquote",[s("p",[s("code",[e._v("npm")]),e._v(" 为加高效的执行 "),s("code",[e._v("npm script")]),e._v(" 做了大量的优化，"),s("a",{attrs:{href:"https://juejin.im/book/5a1212bc51882531ea64df07/section/5a1213d4f265da4335625b4a",target:"_blank",rel:"noopener noreferrer"}},[e._v("创建并运行 npm script 命令"),s("OutboundLink")],1),e._v(" 里面讲到的环境变量特性能让我们在 npm script 中直接调用依赖包里的可执行文件，更强大的是，npm 还提供了 "),s("code",[e._v("$PATH")]),e._v(" 之外的更多的变量，比如当前正在执行的命令、包的名称和版本号、日志输出的级别等。")])]),e._v(" "),s("p",[e._v("DRY（Don't Repeat Yourself）是基本的编程原则，在 "),s("code",[e._v("npm script")]),e._v(" 中使用预定义变量和自定义变量让我们更容易遵从 DRY 原则，因为使用这些变量之后，"),s("code",[e._v("npm script")]),e._v(" 就具备了自适应的能力，我们可以直接把积累起来的 "),s("code",[e._v("npm script")]),e._v(" 使用到其他项目里面，而不用做任何修改。")]),e._v(" "),s("h3",{attrs:{id:"使用预定义变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用预定义变量"}},[e._v("#")]),e._v(" 使用预定义变量")]),e._v(" "),s("blockquote",[s("p",[e._v("首先我们来看预定义变量，通过运行 "),s("code",[e._v("npm run env")]),e._v(" 就能拿到完整的变量列表，这个列表非常长，这里我使用 "),s("code",[e._v("npm run env | grep npm_package | sort")]),e._v(" 拿到部分排序后的预定义环境变量：")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// 作者信息...\nnpm_package_author_email=wangshijun2010@gmail.com\nnpm_package_author_name=wangshijun\nnpm_package_author_url=http://github.com/wangshijun\n// 依赖信息...\nnpm_package_devDependencies_markdownlint_cli=^0.5.0\nnpm_package_devDependencies_mocha=^4.0.1\nnpm_package_devDependencies_npm_run_all=^4.1.2\n// 各种 npm script\nnpm_package_scripts_lint=npm-run-all --parallel lint:*\nnpm_package_scripts_lint_css=stylelint *.less\nnpm_package_scripts_lint_js=eslint *.js\nnpm_package_scripts_lint_js_fix=npm run lint:js -- --fix\nnpm_package_scripts_lint_json=jsonlint --quiet *.json\n// 基本信息\nnpm_package_version=0.1.0\nnpm_package_gitHead=3796e548cfe406ec33ab837ac00bcbd6ee8a38a0\nnpm_package_license=MIT\nnpm_package_main=index.js\nnpm_package_name=hello-npm-script\nnpm_package_readmeFilename=README.md\n// 依赖的配置\nnpm_package_nyc_exclude_0=**/*.spec.js\nnpm_package_nyc_exclude_1=.*.js\n")])])]),s("p",[e._v("变量的使用方法遵循 "),s("code",[e._v("shell")]),e._v(" 里面的语法，直接在 "),s("code",[e._v("npm script")]),e._v(" 给想要引用的变量前面加上 "),s("code",[e._v("$")]),e._v(" 符号即可。比如：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('{\n  "dummy": "echo $npm_package_name"\n}\n')])])]),s("p",[e._v("回到我们的项目，测试覆盖率归档是比较常见的需求，因为它方便我们追踪覆盖率的变化趋势，最彻底的做法是归档到 CI 系统里面，对于简单项目，则可以直接归档到文件系统中，即把收集到的覆盖率报告按版本号去存放。")]),e._v(" "),s("p",[e._v("比如，我们在根目录下新建 "),s("code",[e._v("coverage\\_archive")]),e._v(" 目录存储覆盖率归档，并利用变量机制把归档和版本号关联起来。具体的 "),s("code",[e._v("npm script")]),e._v(" 修改如下：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('diff --git a/package.json b/package.json\nindex d297f2e..d86f65c 100644\n--- a/package.json\n+++ b/package.json\n@@ -12,9 +12,10 @@\n   "scripts": {\n-    "precover": "rm -rf coverage",\n     "cover": "nyc --reporter=html npm test",\n-    "postcover": "rm -rf .nyc_output && opn coverage/index.html"\n+    "cover:cleanup": "rm -rf coverage && rm -rf .nyc_output",\n+    "cover:archive": "mkdir -p coverage_archive/$npm_package_version && cp -r coverage/* coverage_archive/$npm_package_version",\n+    "postcover": "npm run cover:archive && npm run cover:cleanup && opn coverage_archive/$npm_package_version/index.html"\n   },\n')])])]),s("blockquote",[s("p",[e._v("主要改动是：增加 "),s("code",[e._v("cover:cleanup")]),e._v(" 和 "),s("code",[e._v("cover:archive")]),e._v("命令，并且修改 "),s("code",[e._v("postcover")]),e._v(" 命令。下面对使用了环境变量的 "),s("code",[e._v("npm script")]),e._v(" 稍作解释：")])]),e._v(" "),s("p",[s("strong",[e._v("cover:archive 做了 2 件事情：")])]),e._v(" "),s("ol",[s("li",[s("code",[e._v("mkdir -p coverage_archive/$npm_package_version")]),e._v(" 准备当前版本号的归档目录；")]),e._v(" "),s("li",[s("code",[e._v("cp -r coverage/* coverage_archive/$npm_package_version")]),e._v("，直接复制文件来归档；")])]),e._v(" "),s("p",[s("strong",[e._v("而 postcover 做了 3 件事情：")])]),e._v(" "),s("ol",[s("li",[s("code",[e._v("npm run cover:archive")]),e._v("，归档本次覆盖率报告；")]),e._v(" "),s("li",[s("code",[e._v("npm run cover:cleanup")]),e._v("，清理本次覆盖率报告；")]),e._v(" "),s("li",[s("code",[e._v("opn coverage_archive/$npm_package_version/index.html")]),e._v("，直接预览覆盖率报告；")])]),e._v(" "),s("p",[e._v("配置好之后，我们直接运行 "),s("code",[e._v("npm run cover")]),e._v("，最后的目录结构如下：")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://poetries1.gitee.io/img-repo/2020/07/npm/14.png",alt:""}})]),e._v(" "),s("h3",{attrs:{id:"使用自定义变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用自定义变量"}},[e._v("#")]),e._v(" 使用自定义变量")]),e._v(" "),s("ul",[s("li",[e._v("除了预定义变量外，我们还可以在 "),s("code",[e._v("package.json")]),e._v(" 中添加自定义变量，并且在 "),s("code",[e._v("npm script")]),e._v(" 中使用这些变量。")]),e._v(" "),s("li",[e._v("为把测试覆盖率报告分享给其他同事浏览，我们就不能使用 "),s("code",[e._v("opn-cli")]),e._v(" 打开文件了，需要启动简单的 "),s("code",[e._v("http")]),e._v(" 服务，把网址发给别人浏览，比如我们约定网址 "),s("code",[e._v("http://IP:3000")]),e._v("，这里的 "),s("code",[e._v("IP")]),e._v(" 需要替换成自己的实际 "),s("code",[e._v("IP")]),e._v("。")])]),e._v(" "),s("p",[s("a",{attrs:{href:"https://www.npmjs.com/package/http-server",target:"_blank",rel:"noopener noreferrer"}},[e._v("http-server"),s("OutboundLink")],1),e._v(" 提供了非常轻量的 http 服务，我们先把它加到 devDependencies 中：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm i http-server -D    # 等价命令 npm install http-server --save-dev\n")])])]),s("p",[e._v("接下来，在 "),s("code",[e._v("package.json")]),e._v(" 增加自定义端口配置和相应的 "),s("code",[e._v("npm script")]),e._v(" 命令，完整的 "),s("code",[e._v("diff")]),e._v(" 如下：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('diff --git a/package.json b/package.json\nindex d86f65c..abc9d01 100644\n--- a/package.json\n+++ b/package.json\n@@ -3,6 +3,9 @@\n   "version": "0.1.0",\n+  "config": {\n+    "port": 3000\n+  },\n   "scripts": {\n@@ -15,7 +18,9 @@\n     "cover": "nyc --reporter=html npm test",\n-    "postcover": "npm run cover:archive && npm run cover:cleanup && opn coverage_archive/$npm_package_version/index.html"\n+    "cover:serve": "http-server coverage_archive/$npm_package_version -p $npm_package_config_port",\n+    "cover:open": "opn http://localhost:$npm_package_config_port",\n+    "postcover": "npm-run-all cover:archive cover:cleanup --parallel cover:serve cover:open"\n   },\n@@ -23,6 +28,7 @@\n   "devDependencies": {\n     "chai": "^4.1.2",\n+    "http-server": "^0.10.0",\n     "mocha": "^4.0.1",\n')])])]),s("p",[s("strong",[e._v("关于改动做以下几点解释：")])]),e._v(" "),s("ul",[s("li",[e._v("新增的命令 "),s("code",[e._v("cover:serve")]),e._v(" 中同时使用了预定义变量 "),s("code",[e._v("$npm_package_version")]),e._v(" 和自定义变量 "),s("code",[e._v("$npm_package_config_port")]),e._v("；")]),e._v(" "),s("li",[e._v("预览覆盖率报告的方式从直接打开文件修改为打开网址： "),s("code",[e._v("http://localhost:$npm_package_config_port")]),e._v("；")]),e._v(" "),s("li",[s("code",[e._v("postcover")]),e._v(" 命令要做的事情比较多，我们直接使用 "),s("code",[e._v("npm-run-all")]),e._v(" 来编排子命令。")])]),e._v(" "),s("blockquote",[s("p",[s("strong",[e._v("TIP#8")]),e._v("：注意这里给 "),s("code",[e._v("cover:serve")]),e._v(" 和 "),s("code",[e._v("cover:open")]),e._v(" 增加了并行参数 "),s("code",[e._v("--parallel")]),e._v("，因为 "),s("code",[e._v("cover:serve")]),e._v(" 不会自动退出。")]),e._v(" "),s("p",[s("strong",[e._v("TIP#9")]),e._v("：可能有同学会好奇，是否可以在自定义变量的声明中使用预定义变量，笔者也有这种好奇，并且做过尝试，结果是不支持。")])]),e._v(" "),s("p",[e._v("修改完之后，我们再次运行 "),s("code",[e._v("npm run cover")]),e._v("，终端会在 "),s("code",[e._v("cover:serve")]),e._v(" 之后进入等待状态：")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://poetries1.gitee.io/img-repo/2020/07/npm/15.png",alt:""}})]),e._v(" "),s("p",[e._v("同时浏览器会打开覆盖率报告，如下图：")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://poetries1.gitee.io/img-repo/2020/07/npm/16.png",alt:""}})]),e._v(" "),s("p",[s("strong",[e._v("好，关于 npm script 里面的变量使用就介绍到这里，留给你的问题是，在你的项目里面怎么用起来呢？如果想到了，什么时候落地？")])]),e._v(" "),s("blockquote",[s("p",[e._v("本节用到的代码见 "),s("a",{attrs:{href:"https://github.com/wangshijun/automated-workflow-with-npm-script/tree/05-use-config-variables",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitHub"),s("OutboundLink")],1),e._v("，想边看边动手练习的同学可以拉下来自己改，注意切换到正确的分支 "),s("code",[e._v("05-use-config-variables")]),e._v("。")])]),e._v(" "),s("h2",{attrs:{id:"_6-实现命令行自动补全"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-实现命令行自动补全"}},[e._v("#")]),e._v(" 6 实现命令行自动补全")]),e._v(" "),s("blockquote",[s("p",[e._v("当 "),s("code",[e._v("npm script")]),e._v(" 里面积累的命令越来越多时，重度命令行用户肯定会好奇，能不能实现类似 "),s("code",[e._v("bash")]),e._v("、"),s("code",[e._v("zsh")]),e._v(" 里面的命令自动补全？答案是肯定的，下面来逐一介绍。")])]),e._v(" "),s("h3",{attrs:{id:"使用-npm-run-直接列出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-npm-run-直接列出"}},[e._v("#")]),e._v(" 使用 npm run 直接列出")]),e._v(" "),s("blockquote",[s("p",[e._v("不带任何参数运行 "),s("code",[e._v("npm run")]),e._v(" 能列出 "),s("code",[e._v("scripts")]),e._v(" 对象中定义的所有命令，再结合管道操作符、"),s("code",[e._v("less")]),e._v(" 命令（这里的 "),s("code",[e._v("less")]),e._v(" 不是 "),s("code",[e._v("css")]),e._v(" 领域的 "),s("code",[e._v("less")]),e._v("，而是 "),s("code",[e._v("linux")]),e._v(" 里面的工具），即使 "),s("code",[e._v("scripts")]),e._v(" 子命令很多我们也能移动自如。")])]),e._v(" "),s("blockquote",[s("p",[e._v("比如，我们在项目中执行："),s("code",[e._v("npm run | less")]),e._v("，得到如下结果，注意截图左下方的红框，按空格能翻页：")])]),e._v(" "),s("p",[s("img",{attrs:{src:"https://poetries1.gitee.io/img-repo/2020/07/npm/17.png",alt:""}})]),e._v(" "),s("p",[e._v("在这个结果里面，我们可以进行类似于 Vim 中的搜索，先按 "),s("code",[e._v("/")]),e._v(" 进入搜索模式，然后输入 "),s("code",[e._v("markdown")]),e._v("，搜索结果如下图：")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://poetries1.gitee.io/img-repo/2020/07/npm/18.png",alt:""}})]),e._v(" "),s("h3",{attrs:{id:"把-npm-completion-集成到-shell-中"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#把-npm-completion-集成到-shell-中"}},[e._v("#")]),e._v(" 把 npm completion 集成到 shell 中")]),e._v(" "),s("p",[e._v("npm 自身提供了自动完成工具 "),s("a",{attrs:{href:"https://docs.npmjs.com/cli/completion",target:"_blank",rel:"noopener noreferrer"}},[e._v("completion"),s("OutboundLink")],1),e._v("，将其集成到 "),s("a",{attrs:{href:"https://www.gnu.org/software/bash",target:"_blank",rel:"noopener noreferrer"}},[e._v("bash"),s("OutboundLink")],1),e._v(" 或者 "),s("a",{attrs:{href:"https://github.com/robbyrussell/oh-my-zsh",target:"_blank",rel:"noopener noreferrer"}},[e._v("zsh"),s("OutboundLink")],1),e._v(" 里也非常容易（顺便说一句，早期我是 bash 的忠实用户，两年前切换到 zsh，就再也没回头）。")]),e._v(" "),s("p",[e._v("官方文档里面的集成方法如下：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm completion >> ~/.bashrc\nnpm completion >> ~/.zshrc\n")])])]),s("blockquote",[s("p",[s("strong",[e._v("TIP#10")]),e._v("：如果你好奇上面的命令究竟做了什么，尝试直接运行 "),s("code",[e._v("npm completion")]),e._v("，就能看到它其实在你的配置文件中追加了一大坨 shell。上面命令中的 "),s("code",[e._v(">>")]),e._v(" 意思是把前面命令的输出追加到后面的文件中。")])]),e._v(" "),s("blockquote",[s("p",[e._v("如果你也有代码洁癖，为了保持 ."),s("code",[e._v("zshrc")]),e._v(" 或者 "),s("code",[e._v(".bashrc")]),e._v(" 文件的整洁，可以用下面的方法：")])]),e._v(" "),s("p",[s("strong",[e._v("第 1 步，把 npm completion 产生的那坨命令放在单独的文件中：")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm completion >> ~/.npm-completion.bash\n\n")])])]),s("p",[s("strong",[e._v("第 2 步，在 .bashrc 或者 .zshrc 中引入这个文件：")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('echo "[ -f ~/.npm-completion.bash ] && source ~/.npm-completion.bash;" >> ~/.bashrc\necho "[ -f ~/.npm-completion.bash ] && source ~/.npm-completion.bash;" >> ~/.zshrc\n\n')])])]),s("blockquote",[s("p",[s("strong",[e._v("TIP#11")]),e._v("：执行完上面的命令一定要记得 "),s("code",[e._v("source ~/.zshrc")]),e._v(" 或者 "),s("code",[e._v("source ~/.bashrc")]),e._v("，来让自动完成生效。")])]),e._v(" "),s("blockquote",[s("p",[e._v("接下来我们就可以尽情享受自动完成带来的便利了，尝试在命令行中输入 "),s("code",[e._v("npm run")]),e._v("，"),s("strong",[e._v("然后键入空格（空格很重要）")]),e._v("，然后键入 tab 键，发现命令行有什么反应了么？在列出备选项之后，继续按 tab，就能在不同的选项之间切换，找到自己想要的，直接回车就能完成命令补全。多练习几次，你的手指和大脑就能熟练掌握这个过程。")])]),e._v(" "),s("ul",[s("li",[e._v("在我们的项目目录里面键入 "),s("code",[e._v("npm run cov")]),e._v(" 再键入 tab 键，命令行又有什么反应？")]),e._v(" "),s("li",[e._v("需要单独说明的是，"),s("code",[e._v("npm completion")]),e._v(" 能实现的自动完成不仅仅是 "),s("code",[e._v("scripts")]),e._v(" 里面的子自命令，"),s("code",[e._v("npm")]),e._v(" 的子命令也是可以的，可以依次输入 "),s("code",[e._v("npm")]),e._v("、空格、"),s("code",[e._v("tab")]),e._v("，看看命令行的反应。")])]),e._v(" "),s("h3",{attrs:{id:"更高级的自动完成"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#更高级的自动完成"}},[e._v("#")]),e._v(" 更高级的自动完成")]),e._v(" "),s("ul",[s("li",[e._v("人类对于效率的追求是永无止境的，工程师更是如此，npm 命令补全到目前为止显然还不够高效，能不能补全 "),s("code",[e._v("package.json")]),e._v(" 里面的依赖名称？能不能在补全 "),s("code",[e._v("npm script")]),e._v(" 的时候列出这个命令是干啥的？")]),e._v(" "),s("li",[e._v("有人已经帮我们解决了这个痛点，还写成了 "),s("code",[e._v("zsh")]),e._v(" 插件（bash 的同学无福消受了）："),s("a",{attrs:{href:"https://github.com/lukechilds/zsh-better-npm-completion",target:"_blank",rel:"noopener noreferrer"}},[e._v("zsh-better-npm-completion"),s("OutboundLink")],1),e._v("，它有以下几个让人无法拒绝的便利：")])]),e._v(" "),s("p",[s("strong",[e._v("1. 在 npm install 时自动根据历史安装过的包给出补全建议")])]),e._v(" "),s("p",[s("img",{attrs:{src:"https://poetries1.gitee.io/img-repo/2020/07/npm/19.png",alt:""}})]),e._v(" "),s("p",[s("strong",[e._v("2. 在 npm uninstall 时候根据 package.json 里面的声明给出补全建议")])]),e._v(" "),s("p",[s("img",{attrs:{src:"https://poetries1.gitee.io/img-repo/2020/07/npm/20.png",alt:""}})]),e._v(" "),s("p",[s("strong",[e._v("3. 在 npm run 时补全建议中列出命令细节")])]),e._v(" "),s("p",[s("img",{attrs:{src:"https://poetries1.gitee.io/img-repo/2020/07/npm/21.png",alt:""}}),e._v(" "),s("img",{attrs:{src:"https://poetries1.gitee.io/img-repo/2020/07/npm/22.png",alt:""}})]),e._v(" "),s("p",[e._v("看到这里，是不是心痒痒？具体的安装方法参照官方 "),s("a",{attrs:{href:"https://github.com/lukechilds/zsh-better-npm-completion",target:"_blank",rel:"noopener noreferrer"}},[e._v("README.md"),s("OutboundLink")],1),e._v(" 文件就好，我就不在这里啰嗦了。")]),e._v(" "),s("blockquote",[s("p",[s("strong",[e._v("TIP#12")]),e._v("：如果你要使用 "),s("code",[e._v("zsh-better-npm-completion")]),e._v(" 插件，需要把 "),s("code",[e._v(".bashrc")]),e._v("、"),s("code",[e._v(".zshrc")]),e._v(" 文件里面 "),s("code",[e._v("npm completion")]),e._v(" 部分的配置删掉，避免冲突。")])]),e._v(" "),s("h3",{attrs:{id:"如何实现-yarn-的命令自动补全？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何实现-yarn-的命令自动补全？"}},[e._v("#")]),e._v(" 如何实现 yarn 的命令自动补全？")]),e._v(" "),s("blockquote",[s("p",[e._v("已经有人帮我们做好了 "),s("a",{attrs:{href:"https://github.com/mklabs/yarn-completions",target:"_blank",rel:"noopener noreferrer"}},[e._v("yarn-completions"),s("OutboundLink")],1),e._v("，能实现类似于 zsh-better-npm-completion 的命令补全，参照官方 README.md 安装即可。")])]),e._v(" "),s("h2",{attrs:{id:"_7-实现-npm-script-跨平台兼容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-实现-npm-script-跨平台兼容"}},[e._v("#")]),e._v(" 7 实现 npm script 跨平台兼容")]),e._v(" "),s("blockquote",[s("p",[e._v("到目前为止，如果你在 Linux、Mac 平台做开发，所有的 npm script 都会顺利运行，但是 Windows 下面的同学可能就比较痛苦了，因为不是所有的 shell 命令都是跨平台兼容的，甚至各种常见的文件系统操作也是不兼容的。")])]),e._v(" "),s("p",[e._v("可能有部分同学处理过 "),s("code",[e._v("npm script")]),e._v(" 跨平台兼容的问题，比如粗暴的为两种平台各写一份 "),s("code",[e._v("npm script")]),e._v("，像下面这样：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('{\n  "name": "hello-npm-script",\n  "scripts": {\n    "bash-script": "echo Hello $npm_package_name",\n    "win-script": "echo Hello %npm_package_name%"\n  }\n}\n\n')])])]),s("p",[e._v("有技术追求的工程师肯定不会满足上面的解决方案，实际上社区中已经有非常多的小工具可以帮我们优雅的实现跨平台的 npm script，下面我们探索下如何实现跨平台的文件系统操作、变量引用、环境变量设置。")]),e._v(" "),s("p",[s("strong",[e._v("特别说明，windows 环境的同学建议使用 git bash 来运行 npm script，使用 windows 自带的 cmd 可能会遇到比较多的问题")])]),e._v(" "),s("h3",{attrs:{id:"文件系统操作的跨平台兼容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#文件系统操作的跨平台兼容"}},[e._v("#")]),e._v(" 文件系统操作的跨平台兼容")]),e._v(" "),s("blockquote",[s("p",[s("code",[e._v("npm script")]),e._v(" 中涉及到的文件系统操作包括文件和目录的创建、删除、移动、复制等操作，而社区为这些基本操作也提供了跨平台兼容的包，列举如下：")])]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/isaacs/rimraf",target:"_blank",rel:"noopener noreferrer"}},[e._v("rimraf"),s("OutboundLink")],1),e._v(" 或 "),s("a",{attrs:{href:"https://www.npmjs.com/package/del-cli",target:"_blank",rel:"noopener noreferrer"}},[e._v("del-cli"),s("OutboundLink")],1),e._v("，用来删除文件和目录，实现类似于 "),s("code",[e._v("rm -rf")]),e._v(" 的功能；")]),e._v(" "),s("li",[s("a",{attrs:{href:"https://www.npmjs.com/package/cpr",target:"_blank",rel:"noopener noreferrer"}},[e._v("cpr"),s("OutboundLink")],1),e._v("，用于拷贝、复制文件和目录，实现类似于 "),s("code",[e._v("cp -r")]),e._v(" 的功能；")]),e._v(" "),s("li",[s("a",{attrs:{href:"https://www.npmjs.com/package/make-dir-cli",target:"_blank",rel:"noopener noreferrer"}},[e._v("make-dir-cli"),s("OutboundLink")],1),e._v("，用于创建目录，实现类似于 "),s("code",[e._v("mkdir -p")]),e._v(" 的功能；")])]),e._v(" "),s("p",[e._v("使用上面这几个小工具改造 npm script 的具体步骤如下：")]),e._v(" "),s("p",[s("strong",[e._v("第 1 步，添加开发依赖：")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm i rimraf cpr make-dir-cli -D\n# npm install rimraf cpr make-dir-cli --save-dev\n# yarn add rimraf cpr make-dir-cli -D\n\n")])])]),s("p",[s("strong",[e._v("第 2 步，改造涉及文件系统操作的 npm script：")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('  "scripts": {\n-    "cover:cleanup": "rm -rf coverage && rm -rf .nyc_output",\n-    "cover:archive": "cross-var \\"mkdir -p coverage_archive/$npm_package_version && cp -r coverage/* coverage_archive/$npm_package_version\\"",\n+    "cover:cleanup": "rimraf coverage && rimraf .nyc_output",\n+    "cover:archive": "cross-var \\"make-dir coverage_archive/$npm_package_version && cpr coverage/* coverage_archive/$npm_package_version -o\\"",\n     "cover:serve": "cross-var http-server coverage_archive/$npm_package_version -p $npm_package_config_port",\n     "cover:open": "cross-var opn http://localhost:$npm_package_config_port",\n-    "postcover": "npm-run-all cover:archive cover:cleanup --parallel cover:serve cover:open"\n+    "precover": "npm run cover:cleanup",\n+    "postcover": "npm-run-all cover:archive --parallel cover:serve cover:open"\n  },\n\n')])])]),s("p",[e._v("对改动的几点说明：")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("rm -rf")]),e._v(" 直接替换成 "),s("code",[e._v("rimraf")]),e._v("；")]),e._v(" "),s("li",[s("code",[e._v("mkdir -p")]),e._v(" 直接替换成 "),s("code",[e._v("make-dir")]),e._v("；")]),e._v(" "),s("li",[s("code",[e._v("cp -r")]),e._v(" 的替换需特别说明下，"),s("code",[e._v("cpr")]),e._v(" 默认是不覆盖的，需要显示传入 "),s("code",[e._v("-o")]),e._v(" 配置项，并且参数必须严格是 "),s("code",[e._v("cpr <source> <destination> [options]")]),e._v(" 的格式，即配置项放在最后面；")]),e._v(" "),s("li",[e._v("把 "),s("code",[e._v("cover:cleanup")]),e._v(" 从 "),s("code",[e._v("postcover")]),e._v(" 挪到 "),s("code",[e._v("precover")]),e._v(" 里面去执行，规避 "),s("code",[e._v("cpr")]),e._v(" 没归档完毕覆盖率报告就被清空的问题；")])]),e._v(" "),s("blockquote",[s("p",[s("strong",[e._v("TIP#13")]),e._v("：任何改动之后记得重新运行 "),s("code",[e._v("npm run cover")]),e._v("，确保所有的 "),s("code",[e._v("npm script")]),e._v(" 还是按预期工作的")])]),e._v(" "),s("h3",{attrs:{id:"用-cross-var-引用变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用-cross-var-引用变量"}},[e._v("#")]),e._v(" 用 cross-var 引用变量")]),e._v(" "),s("blockquote",[s("p",[s("a",{attrs:{href:"https://juejin.im/book/5a1212bc51882531ea64df07/section/5a12146951882531bb6c68fe",target:"_blank",rel:"noopener noreferrer"}},[e._v("2.2 在 npm script 中使用变量"),s("OutboundLink")],1),e._v(" 介绍了如何使用内置和预定义变量减少代码重复的技巧，如本节开头的例子，Linux 和 Windows 下引用变量的方式是不同的，Linux 下直接可以用 "),s("code",[e._v("$npm_package_name")]),e._v("，而 Windows 下必须使用 "),s("code",[e._v("%npm_package_name%")]),e._v("，我们可以使用 "),s("a",{attrs:{href:"https://www.npmjs.com/package/cross-var",target:"_blank",rel:"noopener noreferrer"}},[e._v("cross-var"),s("OutboundLink")],1),e._v(" 实现跨平台的变量引用，具体步骤如下：")])]),e._v(" "),s("p",[s("strong",[e._v("第1 步，安装 cross-var 为开发依赖：")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm i cross-var -D\n# npm install cross-var --save-dev\n# yarn add cross-var -D\n\n")])])]),s("p",[s("strong",[e._v("第 2 步，改写引用变量 npm script，具体 diff 如下：")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('  "scripts": {\n     "cover:cleanup": "rm -rf coverage && rm -rf .nyc_output",\n-    "cover:archive": "mkdir -p coverage_archive/$npm_package_version && cp -r coverage/* coverage_archive/$npm_package_version",\n-    "cover:serve": "http-server coverage_archive/$npm_package_version -p $npm_package_config_port",\n-    "cover:open": "opn http://localhost:$npm_package_config_port",\n+    "cover:archive": "cross-var \\"mkdir -p coverage_archive/$npm_package_version && cp -r coverage/* coverage_archive/$npm_package_version\\"",\n+    "cover:serve": "cross-var http-server coverage_archive/$npm_package_version -p $npm_package_config_port",\n+    "cover:open": "cross-var opn http://localhost:$npm_package_config_port",\n     "postcover": "npm-run-all cover:archive cover:cleanup --parallel cover:serve cover:open"\n   },\n\n')])])]),s("blockquote",[s("p",[e._v("因为 "),s("code",[e._v("cover:serve")]),e._v(" 和 "),s("code",[e._v("cover:open")]),e._v(" 命令都比较简单，直接在原始命令前增加 "),s("code",[e._v("cross-var")]),e._v(" 命令即可，而 "),s("code",[e._v("cover:archive")]),e._v(" 内含了两条子命令，我们需要用引号把整个命令包起来（注意这里是用的双引号，且必须转义），然后在前面加上 "),s("code",[e._v("cross-var")]),e._v("。")])]),e._v(" "),s("p",[e._v("此外，细心的同学可能发现引入 "),s("code",[e._v("cross-var")]),e._v(" 之后，它竟然给我们安装了 "),s("code",[e._v("babel")]),e._v("，如果想保持依赖更轻量的话，可以考虑使用 "),s("a",{attrs:{href:"https://www.npmjs.com/package/cross-var-no-babel",target:"_blank",rel:"noopener noreferrer"}},[e._v("cross-var-no-babel"),s("OutboundLink")],1),e._v("。")]),e._v(" "),s("h3",{attrs:{id:"用-cross-env-设置环境变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用-cross-env-设置环境变量"}},[e._v("#")]),e._v(" 用 cross-env 设置环境变量")]),e._v(" "),s("blockquote",[s("p",[e._v("在 "),s("code",[e._v("node.js")]),e._v(" 脚本和 "),s("code",[e._v("npm script")]),e._v(" 使用环境变量也是比较常见的，比如我们在运行测试时，需要加上 "),s("code",[e._v("NODE_ENV=test")]),e._v("，或者在启动静态资源服务器时自定义端口号。因为不同平台的环境变量语法不同，我们可以使用 "),s("a",{attrs:{href:"https://www.npmjs.com/package/cross-env",target:"_blank",rel:"noopener noreferrer"}},[e._v("cross-env"),s("OutboundLink")],1),e._v(" 来实现 "),s("code",[e._v("npm script")]),e._v(" 的跨平台兼容，具体步骤如下：")])]),e._v(" "),s("p",[s("strong",[e._v("第 1 步，添加 cross-env 到开发依赖：")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm i cross-env -D\n# npm install cross-env --save-dev\n# yarn add cross-env -D\n\n")])])]),s("p",[s("strong",[e._v("第 2 步，改写使用了环境变量的 npm script：")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('  "scripts": {\n-    "test": "NODE_ENV=test mocha tests/",\n+    "test": "cross-env NODE_ENV=test mocha tests/",\n  },\n\n')])])]),s("blockquote",[s("p",[e._v("上面的改动更简单，直接在设置了环境变量的命令前面加上 "),s("code",[e._v("cross-env")]),e._v(" 即可。")])]),e._v(" "),s("h3",{attrs:{id:"再多说几句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#再多说几句"}},[e._v("#")]),e._v(" 再多说几句")]),e._v(" "),s("p",[s("strong",[e._v("关于 "),s("code",[e._v("npm script")]),e._v(" 的跨平台兼容，还有几点需要大家注意：")])]),e._v(" "),s("ul",[s("li",[e._v("所有使用引号的地方，建议使用双引号，并且加上转义；")]),e._v(" "),s("li",[e._v("没做特殊处理的命令比如 "),s("code",[e._v("eslint")]),e._v("、"),s("code",[e._v("stylelint")]),e._v("、"),s("code",[e._v("mocha")]),e._v("、"),s("code",[e._v("opn")]),e._v(" 等工具本身都是跨平台兼容的；")]),e._v(" "),s("li",[e._v("还是强烈建议有能力的同学能使用 Linux 做开发，只要你入门并且熟练了，效率提升会惊人；")]),e._v(" "),s("li",[e._v("短时间内继续拥抱 Windows 的同学，可以考虑看看 Windows 10 里面引入的 "),s("a",{attrs:{href:"https://msdn.microsoft.com/en-us/commandline/wsl/about",target:"_blank",rel:"noopener noreferrer"}},[e._v("Subsystem"),s("OutboundLink")],1),e._v("，让你不用虚拟机即可在 Windows 下使用大多数 Linux 命令。")])]),e._v(" "),s("blockquote",[s("p",[s("strong",[e._v("TIP#14")]),e._v("：如果你在编写 "),s("code",[e._v("npm script")]),e._v(" 过程中有更多的跨平台兼容需求，基本思路是去 "),s("a",{attrs:{href:"https://www.npmjs.com/search?q=cross%20platform",target:"_blank",rel:"noopener noreferrer"}},[e._v("npmjs.com"),s("OutboundLink")],1),e._v(" 上找对应的包，关键词自然少不了 "),s("code",[e._v("cross platform")]),e._v("，你遇到的问题，肯定很多其他人遇到过，相信我，你并不孤独！")])]),e._v(" "),s("blockquote",[s("p",[e._v("本节用到的代码见 "),s("a",{attrs:{href:"https://github.com/wangshijun/automated-workflow-with-npm-script/tree/06-add-cross-platform-support",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitHub"),s("OutboundLink")],1),e._v("，想边看边动手练习的同学可以拉下来自己改，注意切换到正确的分支 "),s("code",[e._v("06-add-cross-platform-support")]),e._v("。")])]),e._v(" "),s("h2",{attrs:{id:"_8-把庞大的-npm-script-拆到单独文件中"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-把庞大的-npm-script-拆到单独文件中"}},[e._v("#")]),e._v(" 8 把庞大的 npm script 拆到单独文件中")]),e._v(" "),s("blockquote",[s("p",[e._v("当 "),s("code",[e._v("npm script")]),e._v(" 不断累积、膨胀的时候，全部放在 "),s("code",[e._v("package.json")]),e._v(" 里面可能并不是个好主意，因为这样会导致 package.json 糟乱，可读性降低。")])]),e._v(" "),s("blockquote",[s("p",[e._v("借助 "),s("a",{attrs:{href:"https://github.com/testdouble/scripty",target:"_blank",rel:"noopener noreferrer"}},[e._v("scripty"),s("OutboundLink")],1),e._v(" 我们可以将 "),s("code",[e._v("npm script")]),e._v(" 剥离到单独的文件中，从而把复杂性隔到单独的模块里面，让代码整体看起来更加清晰。")])]),e._v(" "),s("p",[e._v("示例项目中的覆盖率相关的 "),s("code",[e._v("npm script")]),e._v(" 占据了很大的篇幅，如下：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('  "scripts": {\n    "cover": "nyc --reporter=html npm test",\n    "cover:cleanup": "rimraf coverage && rimraf .nyc_output",\n    "cover:archive": "cross-var \\"make-dir coverage_archive/$npm_package_version && cpr coverage/* coverage_archive/$npm_package_version -o\\"",\n    "cover:serve": "cross-var http-server coverage_archive/$npm_package_version -p $npm_package_config_port",\n    "cover:open": "cross-var opn http://localhost:$npm_package_config_port",\n    "precover": "npm run cover:cleanup",\n    "postcover": "npm-run-all cover:archive --parallel cover:serve cover:open"\n  },\n\n')])])]),s("p",[e._v("如果要隔离复杂性，我们可以考虑从 "),s("code",[e._v("cover")]),e._v(" 相关的 "),s("code",[e._v("script")]),e._v(" 入手，具体操作步骤如下：")]),e._v(" "),s("h3",{attrs:{id:"安装依赖"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装依赖"}},[e._v("#")]),e._v(" 安装依赖")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm i scripty -D\n# npm install scripty --save-dev\n# yarn add scripty -D\n\n")])])]),s("h3",{attrs:{id:"准备目录和文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#准备目录和文件"}},[e._v("#")]),e._v(" 准备目录和文件")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("mkdir -p scripts/cover\n\n")])])]),s("blockquote",[s("p",[e._v("先创建两层的目录，因为我们计划把 "),s("code",[e._v("cover")]),e._v(" 脚本写成多个，方便单独去执行，这里命名为 "),s("code",[e._v("scripts")]),e._v(" 是 "),s("code",[e._v("scripty")]),e._v(" 默认的，实际上是可以自定义的。")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("touch scripts/cover.sh\ntouch scripts/cover/serve.sh\ntouch scripts/cover/open.sh\n\n")])])]),s("blockquote",[s("p",[e._v("然后创建空白的脚本文件，因为有了单独的脚本，我们可以把原来的 "),s("code",[e._v("precover")]),e._v("、"),s("code",[e._v("cover")]),e._v("、"),s("code",[e._v("postcover")]),e._v("、"),s("code",[e._v("cover:archive")]),e._v("、"),s("code",[e._v("cover:cleanup")]),e._v(" 合并到一个文件中。")])]),e._v(" "),s("p",[s("strong",[e._v("特别注意的是，给所有脚本增加可执行权限是必须的，否则 scripty 执行时会报错")]),e._v("，我们可以给所有的脚本增加可执行权限：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("chmod -R a+x scripts/**/*.sh\n")])])]),s("h3",{attrs:{id:"修改-scripty-脚本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修改-scripty-脚本"}},[e._v("#")]),e._v(" 修改 scripty 脚本")]),e._v(" "),s("blockquote",[s("p",[e._v("准备好目录和文件之后，接下来需要给脚本填充内容，脚本内容如下（因为脚本使用的是 "),s("code",[e._v("bash")]),e._v("，所以直接忽略了跨平台兼容的处理，跨平台兼容脚本最好使用 "),s("code",[e._v("Node.js")]),e._v(" 编写，下节会介绍）：")])]),e._v(" "),s("blockquote",[s("p",[s("code",[e._v("scripts/cover.sh")]),e._v(" 内容如下（"),s("code",[e._v("cleanup")]),e._v(" --\x3e "),s("code",[e._v("cover")]),e._v(" --\x3e "),s("code",[e._v("archive")]),e._v(" --\x3e "),s("code",[e._v("preview")]),e._v("）：")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("#!/usr/bin/env bash\n\n# remove old coverage reports\nrimraf coverage && rimraf .nyc_output\n\n# run test and collect new coverage\nnyc --reporter=html npm run test\n\n# achive coverage report by version\nmkdir -p coverage_archive/$npm_package_version\ncp -r coverage/* coverage_archive/$npm_package_version\n\n# open coverage report for preview\nnpm-run-all --parallel cover:serve cover:open\n\n")])])]),s("blockquote",[s("p",[s("code",[e._v("scripts/cover/serve.sh")]),e._v(" 内容如下：")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("#!/usr/bin/env bash\n\nhttp-server coverage_archive/$npm_package_version -p $npm_package_config_port\n\n")])])]),s("p",[s("code",[e._v("scripts/cover/open.sh")]),e._v(" 内容如下（这里有个 sleep，是为了确保文件系统写入完成）：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("#!/usr/bin/env bash\n\nsleep 1\nopn http://localhost:$npm_package_config_port\n\n")])])]),s("p",[e._v("细心的同学可能注意到了，在 "),s("code",[e._v("shell")]),e._v(" 脚本里面是可以随意使用 "),s("code",[e._v("npm")]),e._v(" 的内置变量和自定义变量的。")]),e._v(" "),s("h3",{attrs:{id:"修改-package-json"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修改-package-json"}},[e._v("#")]),e._v(" 修改 package.json")]),e._v(" "),s("blockquote",[s("p",[e._v("主要改动是清理 "),s("code",[e._v("cover:\\*")]),e._v(" 命令，接入 "),s("code",[e._v("scripty")]),e._v("，具体的 "),s("code",[e._v("diff")]),e._v(" 如下：")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('   "scripts": {\n     "test": "cross-env NODE_ENV=test mocha tests/",\n-    "cover": "nyc --reporter=html npm test",\n-    "cover:cleanup": "rimraf coverage && rimraf .nyc_output",\n-    "cover:archive": "cross-var \\"make-dir coverage_archive/$npm_package_version && cpr coverage/* coverage_archive/$npm_package_version -o\\"",\n-    "cover:serve": "cross-var http-server coverage_archive/$npm_package_version -p $npm_package_config_port",\n-    "cover:open": "cross-var opn http://localhost:$npm_package_config_port",\n-    "precover": "npm run cover:cleanup",\n-    "postcover": "npm-run-all cover:archive --parallel cover:serve cover:open"\n+    "cover": "scripty",\n+    "cover:serve": "scripty",\n+    "cover:open": "scripty"\n   },\n\n')])])]),s("p",[e._v("这里我们只保留了 "),s("code",[e._v("cover")]),e._v("、"),s("code",[e._v("cover:serve")]),e._v("、"),s("code",[e._v("cover:open")]),e._v(" 等 3 个命令，让它们都指向 "),s("code",[e._v("scripty")]),e._v("，调用哪个脚本都由 scripty 来处理。")]),e._v(" "),s("h3",{attrs:{id:"实际测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实际测试"}},[e._v("#")]),e._v(" 实际测试")]),e._v(" "),s("p",[e._v("修改完毕之后，重新运行 "),s("code",[e._v("npm run cover")]),e._v("，不出意外的话，我们能得到和原来完全相同的结果，仔细观察运行的日志，会发现在代码执行前有段额外的输出，如下图中红色框中的内容，"),s("code",[e._v("scripty")]),e._v(" 在实际执行的时候会把执行的命令内容打印出来，方便调试：")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://poetries1.gitee.io/img-repo/2020/07/npm/23.png",alt:""}})]),e._v(" "),s("h3",{attrs:{id:"高级技巧"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#高级技巧"}},[e._v("#")]),e._v(" 高级技巧")]),e._v(" "),s("blockquote",[s("p",[s("code",[e._v("scripty")]),e._v(" 比上面演示的要更强大，也支持通配符运行、脚本并行等特性、静默模式，如果有需求可以阅读官方的 "),s("a",{attrs:{href:"https://github.com/testdouble/scripty#advanced-usage",target:"_blank",rel:"noopener noreferrer"}},[e._v("README.md"),s("OutboundLink")],1),e._v("，毕竟咱们已经入门了，不是么？")])]),e._v(" "),s("blockquote",[s("p",[e._v("本节用到的代码见 "),s("a",{attrs:{href:"https://github.com/wangshijun/automated-workflow-with-npm-script/tree/07-manage-complexity-using-scripty",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitHub"),s("OutboundLink")],1),e._v("，想边看边动手练习的同学可以拉下来自己改，注意切换到正确的分支 "),s("code",[e._v("07-manage-complexity-using-scripty")]),e._v("。")])]),e._v(" "),s("h2",{attrs:{id:"_9-用-node-js-脚本替代复杂的-npm-script"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-用-node-js-脚本替代复杂的-npm-script"}},[e._v("#")]),e._v(" 9 用 node.js 脚本替代复杂的 npm script")]),e._v(" "),s("blockquote",[s("p",[s("a",{attrs:{href:"https://nodejs.org/en/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Node.js"),s("OutboundLink")],1),e._v(" 丰富的生态能赋予我们更强的能力，对于前端工程师来说，使用 Node.js 来编写复杂的 npm script 具有明显的 2 个优势：首先，编写简单的工具脚本对前端工程师来说额外的学习成本很低甚至可以忽略不计，其次，因为 Node.js 本身是跨平台的，用它编写的脚本出现跨平台兼容问题的概率很小。")])]),e._v(" "),s("p",[e._v("下面我们就一起探索下，如何把上节中使用 shell 编写的 "),s("code",[e._v("cover")]),e._v(" 脚本改写成 Node.js 脚本，在 "),s("code",[e._v("Node.js")]),e._v(" 脚本中我们也能体味到 "),s("a",{attrs:{href:"https://www.npmjs.com/package/shelljs",target:"_blank",rel:"noopener noreferrer"}},[e._v("shelljs"),s("OutboundLink")],1),e._v(" 这个工具包的强大。")]),e._v(" "),s("h3",{attrs:{id:"安装-shelljs-依赖"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装-shelljs-依赖"}},[e._v("#")]),e._v(" 安装 shelljs 依赖")]),e._v(" "),s("p",[e._v("使用如下命令安装 "),s("code",[e._v("shelljs")]),e._v(" 到项目依赖中：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm i shelljs -D\n# npm install shelljs --save-dev\n# yarn add shelljs -D\n\n")])])]),s("blockquote",[s("p",[e._v("此外，我们计划使用 "),s("a",{attrs:{href:"https://www.npmjs.com/package/chalk",target:"_blank",rel:"noopener noreferrer"}},[e._v("chalk"),s("OutboundLink")],1),e._v(" 来给输出加点颜色，让脚本变的更有趣，同样安装到 "),s("code",[e._v("devDependencies")]),e._v(" 里面：")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm i chalk -D\n# npm install chalk --save-dev\n# yarn add chalk -D\n\n")])])]),s("h3",{attrs:{id:"创建-node-js-脚本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建-node-js-脚本"}},[e._v("#")]),e._v(" 创建 Node.js 脚本")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("touch scripts/cover.js\n")])])]),s("h3",{attrs:{id:"用-node-js-实现同等功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用-node-js-实现同等功能"}},[e._v("#")]),e._v(" 用 Node.js 实现同等功能")]),e._v(" "),s("blockquote",[s("p",[s("code",[e._v("shelljs")]),e._v(" 为我们提供了各种常见命令的跨平台支持，比如 "),s("code",[e._v("cp")]),e._v("、"),s("code",[e._v("mkdir")]),e._v("、"),s("code",[e._v("rm")]),e._v("、"),s("code",[e._v("cd")]),e._v(" 等命令，此外，理论上你可以在 Node.js 脚本中使用任何 "),s("a",{attrs:{href:"https://www.npmjs.com",target:"_blank",rel:"noopener noreferrer"}},[e._v("npmjs.com"),s("OutboundLink")],1),e._v(" 上能找到的包。清理归档目录、运行测试、归档并预览覆盖率报告的完整 Node.js 代码如下：")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const { rm, cp, mkdir, exec, echo } = require('shelljs');\nconst chalk = require('chalk');\n\nconsole.log(chalk.green('1. remove old coverage reports...'));\nrm('-rf', 'coverage');\nrm('-rf', '.nyc_output');\n\nconsole.log(chalk.green('2. run test and collect new coverage...'));\nexec('nyc --reporter=html npm run test');\n\nconsole.log(chalk.green('3. archive coverage report by version...'));\nmkdir('-p', 'coverage_archive/$npm_package_version');\ncp('-r', 'coverage/*', 'coverage_archive/$npm_package_version');\n\nconsole.log(chalk.green('4. open coverage report for preview...'));\nexec('npm-run-all --parallel cover:serve cover:open');\n\n")])])]),s("p",[e._v("关于改动的几点说明：")]),e._v(" "),s("ul",[s("li",[e._v("简单的文件系统操作，建议直接使用 shelljs 提供的 cp、rm 等替换；")]),e._v(" "),s("li",[e._v("部分稍复杂的命令，比如 nyc 可以使用 exec 来执行，也可以使用 istanbul 包来完成；")]),e._v(" "),s("li",[e._v("在 exec 中也可以大胆的使用 npm script 运行时的环境变量，比如 "),s("code",[e._v("$npm_package_version")]),e._v("；")])]),e._v(" "),s("h3",{attrs:{id:"让-package-json-指向新脚本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#让-package-json-指向新脚本"}},[e._v("#")]),e._v(" 让 package.json 指向新脚本")]),e._v(" "),s("p",[e._v("准备好 Node.js 脚本之后，我们需要修改 "),s("code",[e._v("package.json")]),e._v(" 里面的命令，使其运行该脚本：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('   "scripts": {\n     "test": "cross-env NODE_ENV=test mocha tests/",\n-    "cover": "scripty",\n+    "cover": "node scripts/cover.js",\n     "cover:open": "scripty"\n   },\n\n')])])]),s("h3",{attrs:{id:"测试-cover-命名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#测试-cover-命名"}},[e._v("#")]),e._v(" 测试 cover 命名")]),e._v(" "),s("p",[e._v("重新运行 "),s("code",[e._v("npm run cover")]),e._v(" 命令，不出意外的话，基本功能是正常的，除了我们新加的绿色输出，如下图：")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://poetries1.gitee.io/img-repo/2020/07/npm/24.png",alt:""}})]),e._v(" "),s("p",[e._v("以上，本小节完，这里只是简单展示了如何组织 Node.js 脚本并且让其与 npm script 关联起来，至于具体在脚本中做什么事情，请你自由发挥吧。")]),e._v(" "),s("blockquote",[s("p",[e._v("本节用到的代码见 "),s("a",{attrs:{href:"https://github.com/wangshijun/automated-workflow-with-npm-script/tree/08-using-nodejs-script-as-replacement",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitHub"),s("OutboundLink")],1),e._v("，想边看边动手练习的同学可以拉下来自己改，注意切换到正确的分支 "),s("code",[e._v("08-using-nodejs-script-as-replacement")]),e._v("。")])]),e._v(" "),s("h2",{attrs:{id:"_10-实战1-文件变化时自动运行-npm-script"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-实战1-文件变化时自动运行-npm-script"}},[e._v("#")]),e._v(" 10 实战1 文件变化时自动运行 npm script")]),e._v(" "),s("p",[e._v("软件工程师做的事情基本都是在实现自动化，比如各种业务系统是为了业务运转的自动化，部署系统是为了运维的自动化，对于开发者本身，自动化也是提升效率的关键环节，在实际开发过程中也有不少事情是可以自动化的。")]),e._v(" "),s("p",[e._v("拥抱现代前端工作流的同学都会有代码风格检查、单元测试等环节，这样就很需要在代码变更之后立即得到反馈，如代码改动导致了那个 Case 失败，哪块不符合团队的编码规范等。")]),e._v(" "),s("p",[e._v("使用 gulp、grunt 的同学，可能对这种功能非常熟悉，不就是 watch 么？确实是，使用 npm script 我们也可以实现类似的功能。下面详细介绍如何改造我们的项目实现单测、代码检查的自动化。")]),e._v(" "),s("h3",{attrs:{id:"单元测试自动化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单元测试自动化"}},[e._v("#")]),e._v(" 单元测试自动化")]),e._v(" "),s("blockquote",[s("p",[e._v("幸运的是，"),s("code",[e._v("mocha")]),e._v(" 本身支持 "),s("code",[e._v("--watch")]),e._v(" 参数，即在代码变化时自动重跑所有的测试，我们只需要在 scripts 对象中新增一条命令即可：")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('     "test": "cross-env NODE_ENV=test mocha tests/",\n+    "watch:test": "npm t -- --watch",\n     "cover": "node scripts/cover.js",\n\n')])])]),s("p",[e._v("尝试运行 "),s("code",[e._v("npm run watch:test")]),e._v("，我们会发现进程并没有退出，接下来尝试去修改测试代码，测试是不是自动重跑了呢？自己试试看。")]),e._v(" "),s("h3",{attrs:{id:"代码检查自动化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码检查自动化"}},[e._v("#")]),e._v(" 代码检查自动化")]),e._v(" "),s("blockquote",[s("p",[e._v("我们使用的代码检查工具 "),s("a",{attrs:{href:"https://stylelint.io",target:"_blank",rel:"noopener noreferrer"}},[e._v("stylelint"),s("OutboundLink")],1),e._v("、"),s("a",{attrs:{href:"https://eslint.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("eslint"),s("OutboundLink")],1),e._v("、"),s("a",{attrs:{href:"https://github.com/zaach/jsonlint",target:"_blank",rel:"noopener noreferrer"}},[e._v("jsonlint"),s("OutboundLink")],1),e._v(" 不全支持 watch 模式，这里我们需要借助 "),s("a",{attrs:{href:"https://github.com/Qard/onchange",target:"_blank",rel:"noopener noreferrer"}},[e._v("onchange"),s("OutboundLink")],1),e._v(" 工具包来实现，onchange 可以方便的让我们在文件被修改、添加、删除时运行需要的命令。")])]),e._v(" "),s("p",[s("strong",[e._v("1. 安装项目依赖")])]),e._v(" "),s("p",[e._v("使用如下命令安装 "),s("code",[e._v("onchange")]),e._v(" 到项目依赖中：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm i onchange -D\n# npm install onchange --save-dev\n# yarn add onchange -D\n\n")])])]),s("p",[s("strong",[e._v("2. 添加 npm script")])]),e._v(" "),s("p",[e._v("按照如下提示添加 "),s("code",[e._v("watch:lint")]),e._v(" 和 "),s("code",[e._v("watch")]),e._v(" 两个子命令：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('+    "watch": "npm-run-all --parallel watch:*",\n+    "watch:lint": "onchange -i \\"**/*.js\\" \\"**/*.less\\" -- npm run lint",\n     "watch:test": "npm t -- --watch",\n')])])]),s("p",[s("strong",[e._v("关于改动的几点说明：")])]),e._v(" "),s("ul",[s("li",[s("code",[e._v("watch:lint")]),e._v(" 里面的文件匹配模式可以使用通配符，但是模式两边使用了转义的双引号，这样是跨平台兼容的；")]),e._v(" "),s("li",[s("code",[e._v("watch:lint")]),e._v(" 里面的 "),s("code",[e._v("-i")]),e._v(" 参数是让 "),s("code",[e._v("onchange")]),e._v(" 在启动时就运行一次 "),s("code",[e._v("--")]),e._v(" 之后的命令，即代码没变化的时候，变化前后的对比大多数时候还是有价值的；")]),e._v(" "),s("li",[s("code",[e._v("watch")]),e._v(" 命令实际上是使用了 "),s("code",[e._v("npm-run-all")]),e._v(" 来运行所有的 "),s("code",[e._v("watch")]),e._v(" 子命令；")])]),e._v(" "),s("blockquote",[s("p",[s("strong",[e._v("TIP#15")]),e._v("：有没有好奇过 onchange 是怎么实现文件系统监听的？所有的魔法都藏在它的源代码里面，实际上它使用了跨平台的文件系统监听包 "),s("a",{attrs:{href:"https://github.com/paulmillr/chokidar",target:"_blank",rel:"noopener noreferrer"}},[e._v("chokidar"),s("OutboundLink")],1),e._v("，基于它，你能做点什么有意思的事情呢？")])]),e._v(" "),s("blockquote",[s("p",[s("code",[e._v("onchange")]),e._v(" 有个不太醒目的特性是，文件系统发生变化之后，他在运行指定命令之前输出哪个文件发生了哪些变化，如下图红框中的内容：")])]),e._v(" "),s("p",[s("img",{attrs:{src:"https://poetries1.gitee.io/img-repo/2020/07/npm/25.png",alt:""}})]),e._v(" "),s("p",[e._v("读到这里，有没有觉得 "),s("code",[e._v("onchange")]),e._v(" 可以和 "),s("code",[e._v("gulp")]),e._v("、"),s("code",[e._v("grunt")]),e._v(" 的 "),s("code",[e._v("watch")]),e._v(" 一样强大。")]),e._v(" "),s("blockquote",[s("p",[e._v("除了上面的单测重跑和代码检查之外，你还有什么需求需要放在 "),s("code",[e._v("onchange")]),e._v(" 里面？欢迎留言讨论。")])]),e._v(" "),s("blockquote",[s("p",[e._v("本节用到的代码见 "),s("a",{attrs:{href:"https://github.com/wangshijun/automated-workflow-with-npm-script/tree/09-run-npm-script-with-onchange",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitHub"),s("OutboundLink")],1),e._v("，想边看边动手练习的同学可以拉下来自己改，注意切换到正确的分支 "),s("code",[e._v("09-run-npm-script-with-onchange")]),e._v("。")])]),e._v(" "),s("h2",{attrs:{id:"_11-实战2-结合-live-reload-实现自动刷新"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-实战2-结合-live-reload-实现自动刷新"}},[e._v("#")]),e._v(" 11 实战2 结合 live-reload 实现自动刷新")]),e._v(" "),s("p",[e._v("前端工程师日常开发最频繁（实际上最浪费时间）的操作是什么？可能你已经想到了，就是刷新页面，要让变更生效，需要重新加载，刷新页面的操作就变成了重复低效的操作。")]),e._v(" "),s("p",[e._v("于是社区里出现了 "),s("a",{attrs:{href:"https://www.npmjs.com/package/livereload",target:"_blank",rel:"noopener noreferrer"}},[e._v("LiveReload"),s("OutboundLink")],1),e._v(" 来把这个过程自动化，react 种子项目生成工具 "),s("a",{attrs:{href:"https://github.com/facebookincubator/create-react-app",target:"_blank",rel:"noopener noreferrer"}},[e._v("create-react-app"),s("OutboundLink")],1),e._v(" 中就使用了这种技术。")]),e._v(" "),s("p",[e._v("但随着技术的演化，在单页应用中刷新页面意味着客户端状态的全部丢失，特别是复杂的单页应用刷新意味着更大量的重复工作才能回到刷新前的状态，于是社区又捣鼓出了 "),s("a",{attrs:{href:"https://webpack.js.org/concepts/hot-module-replacement/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Hot Module Replacement，简称为 HMR"),s("OutboundLink")],1),e._v("，比如使用 "),s("a",{attrs:{href:"https://github.com/vuejs/vue-cli",target:"_blank",rel:"noopener noreferrer"}},[e._v("vue-cli"),s("OutboundLink")],1),e._v(" 创建的 "),s("a",{attrs:{href:"https://github.com/vuejs-templates/webpack",target:"_blank",rel:"noopener noreferrer"}},[e._v("webpack"),s("OutboundLink")],1),e._v(" 种子项目中就包含这种特性，"),s("a",{attrs:{href:"https://facebook.github.io/react-native/blog/2016/03/24/introducing-hot-reloading.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("react-native"),s("OutboundLink")],1),e._v(" 也内置了这种特性，来帮助开发者提高效率。")]),e._v(" "),s("p",[e._v("读到这里，你可能会嘀咕，看起来 LiveReload 并不是最新的技术，还讨论它干啥，实际上它是自动刷新技术的鼻祖，后续的 HMR、HR 等都是它的改良版，动手配置下自动刷新，也能让你对这些技术的基本原理略知一二。")]),e._v(" "),s("p",[e._v("下面介绍如何在经典的前端项目中（引用了 css、js 的 html 页面）接入 LiveReload 的详细步骤：")]),e._v(" "),s("h3",{attrs:{id:"安装项目依赖"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装项目依赖"}},[e._v("#")]),e._v(" 安装项目依赖")]),e._v(" "),s("p",[e._v("使用如下命令安装 "),s("a",{attrs:{href:"https://www.npmjs.com/package/livereload",target:"_blank",rel:"noopener noreferrer"}},[e._v("livereload"),s("OutboundLink")],1),e._v(" 和 "),s("a",{attrs:{href:"https://www.npmjs.com/package/http-server",target:"_blank",rel:"noopener noreferrer"}},[e._v("http-server"),s("OutboundLink")],1),e._v(" 到项目依赖中：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm i livereload http-server -D\n# npm install livereload http-server --save-dev\n# yarn add livereload http-server -D\n\n")])])]),s("h3",{attrs:{id:"添加-npm-script"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#添加-npm-script"}},[e._v("#")]),e._v(" 添加 npm script")]),e._v(" "),s("p",[e._v("按如下提示添加命令，方便我们启动 "),s("code",[e._v("LiveReload")]),e._v(" 服务器和通过 HTTP 的方式访问页面：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('-    "cover:open": "scripty"\n+    "cover:open": "scripty",\n+    "client": "npm-run-all --parallel client:*",\n+    "client:reload-server": "livereload client/",\n+    "client:static-server": "http-server client/"\n\n')])])]),s("p",[e._v("其中 "),s("code",[e._v("client")]),e._v(" 命令能同时启动 "),s("code",[e._v("livereload")]),e._v(" 服务、静态文件服务。")]),e._v(" "),s("blockquote",[s("p",[s("strong",[e._v("TIP#16")]),e._v("：可能有同学会问，为什么需要启动两个服务，其中 "),s("code",[e._v("http-server")]),e._v(" 启动的是静态文件服务器，该服务启动后可以通过 http 的方式访问文件系统上的文件，而 "),s("code",[e._v("livereload")]),e._v(" 是启动了自动刷新服务，该服务负责监听文件系统变化，并在文件系统变化时通知所有连接的客户端，在 "),s("code",[e._v("client/index.html")]),e._v(" 中嵌入的那段 js 实际上是和 "),s("code",[e._v("livereload-server")]),e._v(" 连接的一个 livereload-client。")])]),e._v(" "),s("h3",{attrs:{id:"在页面中嵌入-livereload-脚本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在页面中嵌入-livereload-脚本"}},[e._v("#")]),e._v(" 在页面中嵌入 livereload 脚本")]),e._v(" "),s("blockquote",[s("p",[e._v("修改 "),s("code",[e._v("client/index.html")]),e._v(" 嵌入 livereload 脚本（能够连接我们的 livereload 服务），diff 如下：")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" <body>\n   <h2>LiveReload Demo</h2>\n+  <script>\n+    document.write('<script src=\"http://' + (location.host || 'localhost').split(':')[0] +\n+      ':35729/livereload.js?snipver=1\"></' + 'script>')\n+  <\/script>\n </body>\n\n")])])]),s("blockquote",[s("p",[s("strong",[e._v("TIP#17")]),e._v("：livereload 是支持在启动时自定义端口的，如果你使用了自定义端口，在页面中嵌入的这段 js 里面的 "),s("code",[e._v("35729")]),e._v(" 也需要替换成对应的端口。")])]),e._v(" "),s("h3",{attrs:{id:"启动服务并测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#启动服务并测试"}},[e._v("#")]),e._v(" 启动服务并测试")]),e._v(" "),s("p",[e._v("最后，运行 "),s("code",[e._v("npm run client")]),e._v(" 之后，截图如下，注意两个红框里面的输出表示服务启动成功：")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://poetries1.gitee.io/img-repo/2020/07/npm/26.png",alt:""}})]),e._v(" "),s("p",[e._v("然后，打开浏览器访问："),s("code",[e._v("http://localhost:8080")]),e._v("，接着修改 "),s("code",[e._v("client/main.css")]),e._v(" 并保存（"),s("strong",[e._v("别忘了保存")]),e._v("），你会发现浏览器自动刷新了")]),e._v(" "),s("blockquote",[s("p",[s("strong",[e._v("TIP#18")]),e._v("：有代码洁癖的同学可能会问，在页面中嵌入的那段 js 在线上环境咋办？实际上在嵌入这段脚本的时候可以通过简单的手段（比如判断 "),s("code",[e._v("location.hostname")]),e._v("）去检查当前页面运行环境，如果是线上环境就不嵌入了，或者使用打包工具处理 html 文件，上线前直接去掉即可。")])]),e._v(" "),s("blockquote",[s("p",[e._v("本节用到的代码见 "),s("a",{attrs:{href:"https://github.com/wangshijun/automated-workflow-with-npm-script/tree/10-livereload-with-npm-script",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitHub"),s("OutboundLink")],1),e._v("，想边看边动手练习的同学可以拉下来自己改，注意切换到正确的分支 "),s("code",[e._v("10-livereload-with-npm-script")]),e._v("。")])]),e._v(" "),s("h2",{attrs:{id:"_12-实战3-在-git-hooks-中运行-npm-script"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12-实战3-在-git-hooks-中运行-npm-script"}},[e._v("#")]),e._v(" 12 实战3 在 git hooks 中运行 npm script")]),e._v(" "),s("p",[e._v("严肃的研发团队都会使用 Git 之类的版本管理系统来管理代码，随着 GitHub 的广受欢迎，相信大家对 Git 并不陌生。Git 在代码版本管理之外，也提供了类似 "),s("code",[e._v("npm script")]),e._v(" 里 "),s("code",[e._v("pre")]),e._v("、"),s("code",[e._v("post")]),e._v(" 的钩子机制，叫做 "),s("a",{attrs:{href:"https://git-scm.com/book/gr/v2/Customizing-Git-Git-Hooks",target:"_blank",rel:"noopener noreferrer"}},[e._v("Git Hooks"),s("OutboundLink")],1),e._v("，钩子机制能让我们在代码 commit、push 之前（后）做自己想做的事情。")]),e._v(" "),s("blockquote",[s("p",[e._v("Git Hooks 能给我们的开发工作流带来哪些可能呢？我带的团队中，大部分项目通过 npm script 为本地仓库配置了 "),s("code",[e._v("pre-commit")]),e._v("、"),s("code",[e._v("pre-push")]),e._v(" 钩子检查，且正计划为远程仓库（"),s("a",{attrs:{href:"https://git-scm.com/book/en/v1/Git-Basics-Working-with-Remotes",target:"_blank",rel:"noopener noreferrer"}},[e._v("Remotes"),s("OutboundLink")],1),e._v("）配置 "),s("code",[e._v("pre-receive")]),e._v(" 钩子检查。两种钩子的检查目的各不相同，本地检查是为了尽早给提交代码的同学反馈，哪些地方不符合规范，哪些地方需要注意；而远程检查是为了确保远程仓库收到的代码是符合团队约定的规范的，因为如果没有远程检查环节，熟悉 Git 的同学使用 "),s("code",[e._v("--no-verify")]),e._v("（简写为 "),s("code",[e._v("-n")]),e._v("） 参数跳过本地检查时，本地检查就形同虚设。")])]),e._v(" "),s("p",[e._v("可能有同学会嘀咕，在 IDE 里面配置各种检查难道还不够么？对个人开发者来说足够了，但对于团队，如果对代码里面的坏味道听之任之，久而久之整个团队的代码质量标准都会被拉低，到最后坑的还是团队的每个成员，不是么？之前没想到这层的同学建议去看看破窗理论。")]),e._v(" "),s("p",[e._v("那么增加 "),s("code",[e._v("Git Hooks")]),e._v(" 的必要性聊清楚了，我们应该在 "),s("code",[e._v("Git Hooks")]),e._v(" 里面做哪些事情呢？通常来说：检查编码规范，把低级错误趁早挖出来修好；运行测试，用自动化的方法做功能回归，测试本身就包含很多话题，且按下不表。")]),e._v(" "),s("blockquote",[s("p",[e._v("前端社区里有多种结合 "),s("code",[e._v("npm script")]),e._v(" 和 "),s("code",[e._v("git-hooks")]),e._v(" 的方案，比如 "),s("a",{attrs:{href:"https://github.com/observing/pre-commit",target:"_blank",rel:"noopener noreferrer"}},[e._v("pre-commit"),s("OutboundLink")],1),e._v("、"),s("a",{attrs:{href:"https://github.com/typicode/husky",target:"_blank",rel:"noopener noreferrer"}},[e._v("husky"),s("OutboundLink")],1),e._v("，相比较而言 "),s("code",[e._v("husky")]),e._v(" 更好用，它支持更多的 "),s("code",[e._v("Git Hooks")]),e._v(" 种类，再结合 "),s("a",{attrs:{href:"https://github.com/okonet/lint-staged",target:"_blank",rel:"noopener noreferrer"}},[e._v("lint-staged"),s("OutboundLink")],1),e._v(" 试用就更溜。")])]),e._v(" "),s("p",[e._v("接下来我们逐步给示例项目配置本地的 "),s("code",[e._v("Git Hooks")]),e._v("，而在钩子中运行的是已有的 "),s("code",[e._v("npm script")]),e._v("，比如 "),s("code",[e._v("lint")]),e._v("、"),s("code",[e._v("test")]),e._v("：")]),e._v(" "),s("h3",{attrs:{id:"安装项目依赖-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装项目依赖-2"}},[e._v("#")]),e._v(" 安装项目依赖")]),e._v(" "),s("p",[e._v("使用如下命令安装 "),s("code",[e._v("husky")]),e._v("、"),s("code",[e._v("lint-staged")]),e._v(" 到项目依赖中：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm i husky lint-staged -D\n# npm install husky lint-staged --save-dev\n# yarn add husky lint-staged -D\n\n")])])]),s("blockquote",[s("p",[s("code",[e._v("husky")]),e._v(" 的基本工作原理可以稍作解释下，翻看 "),s("code",[e._v("husky")]),e._v(" 的 "),s("a",{attrs:{href:"https://github.com/typicode/husky/blob/master/package.json",target:"_blank",rel:"noopener noreferrer"}},[e._v("package.json"),s("OutboundLink")],1),e._v("，注意其中的 "),s("code",[e._v("scripts")]),e._v(" 声明：")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('  "scripts": {\n    "test": "jest",\n    "format": "prettier --single-quote --no-semi --write **/*.js",\n    "install": "node ./bin/install.js",\n    "uninstall": "node ./bin/uninstall.js"\n  },\n\n')])])]),s("p",[e._v("这里面的 "),s("code",[e._v("install")]),e._v(" 就是你在项目中安装 "),s("code",[e._v("husky")]),e._v(" 时执行的脚本（所有的魔法都藏在在这里了，哈哈）。")]),e._v(" "),s("p",[e._v("然后再检查我们仓库的 "),s("code",[e._v(".git/hooks")]),e._v(" 目录，会发现里面的钩子都被 "),s("code",[e._v("husky")]),e._v(" 替换掉了，注意下图中三个红色框中的内容：")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://poetries1.gitee.io/img-repo/2020/07/npm/27.png",alt:""}})]),e._v(" "),s("h3",{attrs:{id:"添加-npm-script-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#添加-npm-script-2"}},[e._v("#")]),e._v(" 添加 npm script")]),e._v(" "),s("p",[e._v("接下来需要在 "),s("code",[e._v("scripts")]),e._v(" 对象中增加 "),s("code",[e._v("husky")]),e._v(" 能识别的 "),s("code",[e._v("Git Hooks")]),e._v(" 脚本：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('   "scripts": {\n+    "precommit": "npm run lint",\n+    "prepush": "npm run test",\n     "lint": "npm-run-all --parallel lint:*",\n     "lint:js": "eslint *.js",\n\n')])])]),s("blockquote",[s("p",[e._v("这两个命令的作用是在代码提交前运行所有的代码检查 "),s("code",[e._v("npm run lint")]),e._v("；在代码 "),s("code",[e._v("push")]),e._v(" 到远程之前，运行 "),s("code",[e._v("lint")]),e._v(" 和自动化测试（"),s("strong",[e._v("言外之意，如果测试失败，push 就不会成功")]),e._v("），虽然运行的是 "),s("code",[e._v("npm run test")]),e._v("，但是 lint 也配置在了 "),s("code",[e._v("pretest")]),e._v(" 里面。")])]),e._v(" "),s("p",[e._v("然后尝试提交代码："),s("code",[e._v("git commit -am 'add husky hooks'")]),e._v("，能看到 "),s("code",[e._v("pre-commit")]),e._v(" 钩子已经生效：")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://poetries1.gitee.io/img-repo/2020/07/npm/28.png",alt:""}})]),e._v(" "),s("h3",{attrs:{id:"用-lint-staged-改进-pre-commit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用-lint-staged-改进-pre-commit"}},[e._v("#")]),e._v(" 用 lint-staged 改进 pre-commit")]),e._v(" "),s("p",[e._v("如上的配置乍看起来没有任何问题，但是在大型项目、遗留项目中接入过 lint 工作流的同学可能深有体会，每次提交代码会检查所有的代码，可能比较慢就不说了，接入初期 lint 工具可能会报告几百上千个错误，这时候估计大多数人内心是崩溃的，尤其是当你是新规范的推进者，遇到的阻力会增大好几倍，毕竟大多数人不愿意背别人的锅，坏笑。")]),e._v(" "),s("p",[e._v("好在，我们有 "),s("code",[e._v("lint-staged")]),e._v(" 来环节这个问题，每个团队成员提交的时候，只检查当次改动的文件，具体改动如下：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('   "scripts": {\n-    "precommit": "npm run lint",\n+    "precommit": "lint-staged",\n     "prepush": "npm run test",\n     "lint": "npm-run-all --parallel lint:*",\n   },\n+  "lint-staged": {\n+    "*.js": "eslint",\n+    "*.less": "stylelint",\n+    "*.css": "stylelint",\n+    "*.json": "jsonlint --quiet",\n+    "*.md": "markdownlint --config .markdownlint.json"\n+  },\n   "keywords": [],\n\n')])])]),s("p",[e._v("接下来我们故意在 "),s("code",[e._v("index.js")]),e._v(" 中引入错误：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("-  return NaN;\n+  return NaN\n\n")])])]),s("p",[e._v("然后尝试提交这个文件："),s("code",[e._v("git commit -m 'try to add eslint error' index.js")]),e._v("，结果如下图：")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://poetries1.gitee.io/img-repo/2020/07/npm/29.png",alt:""}})]),e._v(" "),s("p",[e._v("上图中带有 "),s("code",[e._v("Running Tasks")]),e._v(" 字样的列表就是 "),s("code",[e._v("lint-staged")]),e._v(" 根据当前要提交的文件和 "),s("code",[e._v("package.json")]),e._v(" 中配置的检查命令去执行的动态输出。红色框里面提示 "),s("code",[e._v("husky")]),e._v(" 的 "),s("code",[e._v("pre-commit")]),e._v(" 钩子执行失败，提交也就没有成功。")]),e._v(" "),s("p",[e._v("关于 "),s("code",[e._v("lint-staged")]),e._v(" 还有些高级的用法，比如对单个文件执行多条命令，对单个文件动态自动修复，自动格式化等等，留待大家自己去探索好了。")]),e._v(" "),s("p",[e._v("撤销掉有错误的修改，提交之后，我们往远程 "),s("code",[e._v("push")]),e._v(" 新分支，结果如下图：")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://poetries1.gitee.io/img-repo/2020/07/npm/30.png",alt:""}})]),e._v(" "),s("blockquote",[s("p",[e._v("读过我其他文章的同学可能已经想到，本小节的内容部分和我早期的文章"),s("a",{attrs:{href:"https://juejin.im/post/592615580ce463006bf19aa0",target:"_blank",rel:"noopener noreferrer"}},[e._v("《用 husky 和 lint-staged 构建超溜的代码检查工作流》"),s("OutboundLink")],1),e._v("有部分内容是重叠的。")])]),e._v(" "),s("blockquote",[s("p",[e._v("本节用到的代码见 "),s("a",{attrs:{href:"https://github.com/wangshijun/automated-workflow-with-npm-script/tree/11-run-npm-script-in-git-hooks",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitHub"),s("OutboundLink")],1),e._v("，想边看边动手练习的同学可以拉下来自己改（"),s("strong",[e._v("记得安装 npm 依赖之后再运行脚本")]),e._v("），注意切换到正确的分支 "),s("code",[e._v("11-run-npm-script-in-git-hooks")]),e._v("。")])]),e._v(" "),s("h2",{attrs:{id:"_13-实战4-用-npm-script-实现构建流水线"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-实战4-用-npm-script-实现构建流水线"}},[e._v("#")]),e._v(" 13 实战4 用 npm script 实现构建流水线")]),e._v(" "),s("p",[e._v("在现代前端项目的交付工作流中，部署前最关键的环节就是构建，构建环节要完成的事情通常包括：")]),e._v(" "),s("ul",[s("li",[e._v("源代码预编译：比如 "),s("code",[e._v("less")]),e._v("、"),s("code",[e._v("sass")]),e._v("、"),s("code",[e._v("typescript")]),e._v("；")]),e._v(" "),s("li",[e._v("图片优化、雪碧图生成；")]),e._v(" "),s("li",[e._v("JS、CSS 合并、压缩；")]),e._v(" "),s("li",[e._v("静态资源加版本号和引用替换；")]),e._v(" "),s("li",[e._v("静态资源传 CDN 等。")])]),e._v(" "),s("p",[e._v("现在大多数同学所接触的项目构建过程可能都是别人配置好的，但是对于构建过程中的某些考量可能并不是很清楚。")]),e._v(" "),s("p",[e._v("接下来，我们将组合 npm script 和简单的命令行工具为实际项目添加构建过程，以加深对构建过程的理解，同时也会用到前面很多章节的知识点。")]),e._v(" "),s("h3",{attrs:{id:"项目目录结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#项目目录结构"}},[e._v("#")]),e._v(" 项目目录结构")]),e._v(" "),s("p",[e._v("对之前的示例项目做简单改造，让目录结构包括典型的前端项目资源引用情况：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("client\n├── images\n│   └── schedule.png\n├── index.html\n├── scripts\n│   └── main.js\n└── styles\n    └── main.css\n\n")])])]),s("p",[e._v("可能的资源依赖关系如下：")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("css")]),e._v("、"),s("code",[e._v("html")]),e._v(" 文件中引用了图片；")]),e._v(" "),s("li",[s("code",[e._v("html")]),e._v(" 文件中引用了 "),s("code",[e._v("css")]),e._v("、"),s("code",[e._v("js")]),e._v("；")])]),e._v(" "),s("p",[e._v("显而易见，我们的构建过程必须遵循下面的步骤才能不出错：")]),e._v(" "),s("ol",[s("li",[e._v("压缩图片；")]),e._v(" "),s("li",[e._v("编译 less、压缩 css；")]),e._v(" "),s("li",[e._v("编译、压缩 js；")]),e._v(" "),s("li",[e._v("给图片加版本号并替换 js、css 中的引用；")]),e._v(" "),s("li",[e._v("给 js、css 加版本号并替换 html 中的引用；")])]),e._v(" "),s("h3",{attrs:{id:"添加构建过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#添加构建过程"}},[e._v("#")]),e._v(" 添加构建过程")]),e._v(" "),s("p",[e._v("下面介绍如何结合 "),s("code",[e._v("npm script")]),e._v(" 正确的给这样的项目结构加上构建过程。")]),e._v(" "),s("p",[s("strong",[e._v("1. 准备构建目录")])]),e._v(" "),s("p",[e._v("我们约定构建产生的结果代码，放在 "),s("code",[e._v("dist")]),e._v(" 目录下，与 "),s("code",[e._v("client")]),e._v(" 的结构完全相同，每次构建前，清空之前的构建目录，利用 npm 的钩子机制添加 "),s("code",[e._v("prebuild")]),e._v(" 命令如下：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('-    "client:static-server": "http-server client/"\n+    "client:static-server": "http-server client/",\n+    "prebuild": "rm -rf dist && mkdir -p dist/{images,styles,scripts}",\n\n')])])]),s("h3",{attrs:{id:"准备脚本目录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#准备脚本目录"}},[e._v("#")]),e._v(" 准备脚本目录")]),e._v(" "),s("p",[e._v("构建过程需要的命令稍长，我们可以使用 "),s("code",[e._v("scripty")]),e._v(" 来把这些脚本剥离到单独的文件中，为此需要准备单独的目录，并且我们的构建过程分为："),s("code",[e._v("images")]),e._v("、"),s("code",[e._v("styles")]),e._v("、"),s("code",[e._v("scripts")]),e._v("、"),s("code",[e._v("hash")]),e._v(" 四个步骤，每个步骤准备单独的文件。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("mkdir scripts/build\ntouch scripts/build.sh\ntouch scripts/build/{images,styles,scripts}.sh\nchmod -R a+x scripts\n\n")])])]),s("p",[s("strong",[e._v("脚本文件的可执行权限必须添加正确，否则 scripty 会直接报错")]),e._v("，上面命令执行完之后，"),s("code",[e._v("scripts")]),e._v(" 目录包含如下内容：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("scripts\n├── build\n│   ├── hash.sh\n│   ├── images.sh\n│   ├── scripts.sh\n│   └── styles.sh\n├── build.sh\n\n")])])]),s("h3",{attrs:{id:"图片构建过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#图片构建过程"}},[e._v("#")]),e._v(" 图片构建过程")]),e._v(" "),s("p",[e._v("图片构建的经典工具是 "),s("a",{attrs:{href:"https://github.com/imagemin/imagemin",target:"_blank",rel:"noopener noreferrer"}},[e._v("imagemin"),s("OutboundLink")],1),e._v("，它也提供了命令行版本 "),s("a",{attrs:{href:"https://github.com/imagemin/imagemin-cli",target:"_blank",rel:"noopener noreferrer"}},[e._v("imagemin-cli"),s("OutboundLink")],1),e._v("，首先安装依赖：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm i imagemin-cli -D\n# npm install imagemin-cli --save-dev\n# yarn add imagemin-cli -D\n\n")])])]),s("p",[e._v("然后在 scripts/build/images.sh 中添加如下内容：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("imagemin client/images/* --out-dir=dist/images\n\n")])])]),s("p",[e._v("然后在 "),s("code",[e._v("package.json")]),e._v(" 中添加 "),s("code",[e._v("build:images")]),e._v(" 命令：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('+    "build:images": "scripty",\n\n')])])]),s("p",[e._v("尝试运行 "),s("code",[e._v("npm run prebuild && npm run build:images")]),e._v("，然后观察 "),s("code",[e._v("dist")]),e._v(" 目录的变化。")]),e._v(" "),s("h3",{attrs:{id:"样式构建过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#样式构建过程"}},[e._v("#")]),e._v(" 样式构建过程")]),e._v(" "),s("p",[e._v("我们使用 "),s("a",{attrs:{href:"http://lesscss.org/usage/",target:"_blank",rel:"noopener noreferrer"}},[e._v("less"),s("OutboundLink")],1),e._v(" 编写样式，所以需要预编译样式代码，可以使用 less 官方库自带的命令行工具 lessc，使用 sass 的同学可以直接使用 "),s("a",{attrs:{href:"https://github.com/sass/node-sass",target:"_blank",rel:"noopener noreferrer"}},[e._v("node-sass"),s("OutboundLink")],1),e._v("。此外，样式预编译完成之后，我们需要使用 "),s("a",{attrs:{href:"https://www.npmjs.com/package/cssmin",target:"_blank",rel:"noopener noreferrer"}},[e._v("cssmin"),s("OutboundLink")],1),e._v(" 来完成代码预压缩。首先安装依赖：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm i cssmin -D\n# npm install cssmin --save-dev\n# yarn add cssmin -D\n\n")])])]),s("blockquote",[s("p",[e._v("然后在 "),s("code",[e._v("scripts/build/styles.sh")]),e._v(" 中添加如下内容，这里我们使用到了 "),s("code",[e._v("shell")]),e._v(" 里面的管道操作符 "),s("code",[e._v("|")]),e._v(" 和输出重定向 "),s("code",[e._v(">")]),e._v("：")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("for file in client/styles/*.css\ndo\n  lessc $file | cssmin > dist/styles/$(basename $file)\ndone\n\n")])])]),s("p",[e._v("然后在 "),s("code",[e._v("package.json")]),e._v(" 中添加 "),s("code",[e._v("build:styles")]),e._v(" 命令：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('+    "build:styles": "scripty",\n\n')])])]),s("p",[e._v("尝试运行 "),s("code",[e._v("npm run prebuild && npm run build:styles")]),e._v("，然后观察 "),s("code",[e._v("dist")]),e._v(" 目录的变化，应该能看到 "),s("code",[e._v("less")]),e._v(" 编译之后再被压缩的 "),s("code",[e._v("css")]),e._v(" 代码。")]),e._v(" "),s("h3",{attrs:{id:"js-构建过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js-构建过程"}},[e._v("#")]),e._v(" JS 构建过程")]),e._v(" "),s("p",[e._v("我们使用 "),s("code",[e._v("ES6")]),e._v(" 编写 "),s("code",[e._v("JS")]),e._v(" 代码，所以需要 "),s("a",{attrs:{href:"https://github.com/mishoo/UglifyJS2/tree/harmony",target:"_blank",rel:"noopener noreferrer"}},[e._v("uglify-es"),s("OutboundLink")],1),e._v(" 来进行代码压缩，如果你不使用 ES6，可以直接使用 "),s("a",{attrs:{href:"https://github.com/mishoo/UglifyJS2",target:"_blank",rel:"noopener noreferrer"}},[e._v("uglify-js"),s("OutboundLink")],1),e._v(" 来压缩代码，首先安装依赖：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm i uglify-es -D\n# npm install uglify-es --save-dev\n# yarn add uglify-es -D\n\n")])])]),s("blockquote",[s("p",[e._v("然后在 "),s("code",[e._v("scripts/build/scripts.sh")]),e._v("中添加如下内容，"),s("strong",[e._v("需要额外注意的是，这里我们需要手动指定 uglify-es 目录下的 bin 文件，否则识别不了 ES6 语法")]),e._v("，因为 "),s("code",[e._v("uglify-es")]),e._v(" 在 "),s("code",[e._v("npm install")]),e._v(" 过程自动创建的软链是错误的。")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("for file in client/scripts/*.js\ndo\n  ./node_modules/uglify-es/bin/uglifyjs $file --mangle > dist/scripts/$(basename $file)\ndone\n\n")])])]),s("p",[e._v("然后在 "),s("code",[e._v("package.json")]),e._v(" 中添加 "),s("code",[e._v("build:scripts")]),e._v(" 命令：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('+    "build:scripts": "scripty",\n\n')])])]),s("blockquote",[s("p",[e._v("尝试运行 "),s("code",[e._v("npm run prebuild && npm run build:scripts")]),e._v("，然后观察 "),s("code",[e._v("dist")]),e._v(" 目录的变化，应该能看到被 "),s("code",[e._v("uglify-es")]),e._v(" 压缩后的代码。")])]),e._v(" "),s("blockquote",[s("p",[s("strong",[e._v("TIP#19")]),e._v("：uglify-es 支持很多其他的选项，以及 sourcemap，对 JS 代码做极致的优化，详细"),s("a",{attrs:{href:"https://github.com/mishoo/UglifyJS2/tree/harmony#command-line-options",target:"_blank",rel:"noopener noreferrer"}},[e._v("参考"),s("OutboundLink")],1)])]),e._v(" "),s("h3",{attrs:{id:"资源版本号和引用替换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#资源版本号和引用替换"}},[e._v("#")]),e._v(" 资源版本号和引用替换")]),e._v(" "),s("p",[e._v("给静态资源加版本号的原因是线上环境的静态资源通常都放在 CDN 上，或者设置了很长时间的缓存，或者两者兼有，如果资源更新了但没有更新版本号，浏览器端是拿不到最新内容的，手动加版本号的过程很繁琐并且容易出错，为此自动化这个过程就显得非常\b有价值，通常的做法是利用文件内容做哈希，比如 md5，然后以这个哈希值作为版本号，版本号附着在文件名里面，线上环境的资源引用全部是带版本号的。")]),e._v(" "),s("p",[e._v("为了\b实现这个过程，我们需要引入两个小工具：")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/keithamus/hashmark",target:"_blank",rel:"noopener noreferrer"}},[e._v("hashmark"),s("OutboundLink")],1),e._v("，自动添加版本号；")]),e._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/songkick/replaceinfiles",target:"_blank",rel:"noopener noreferrer"}},[e._v("replaceinfiles"),s("OutboundLink")],1),e._v("，自动完成引用替换，它需要将版本号过程的输出作为输入；")])]),e._v(" "),s("p",[e._v("首先安装\b依赖：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm i hashmark replaceinfiles -D\n# npm install hashmark replaceinfiles --save-dev\n# yarn add hashmark replaceinfiles -D\n\n")])])]),s("p",[e._v("然后在 "),s("code",[e._v("scripts/build/hash.sh")]),e._v(" 中添加如下内容：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("# 给图片资源加上版本号，并且替换引用\nhashmark -c dist -r -l 8 '**/*.{png,jpg}' '{dir}/{name}.{hash}{ext}' | replaceinfiles -S -s 'dist/**/*.css' -d '{dir}/{base}'\n\n# 给 js、css 资源加上版本号，并且替换引用\nhashmark -c dist -r -l 8 '**/*.{css,js}' '{dir}/{name}.{hash}{ext}' | replaceinfiles -S -s 'client/index.html' -d 'dist/index.html'\n\n")])])]),s("p",[e._v("然后在 "),s("code",[e._v("package.json")]),e._v(" 中添加 "),s("code",[e._v("build:hash")]),e._v(" 命令：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('+    "build:hash": "scripty",\n\n')])])]),s("p",[e._v("这个步骤需要依赖前几个步骤，不能单独运行，接下来我们需要增加完整的 "),s("code",[e._v("build")]),e._v(" 命令把上面几个步骤串起来。")]),e._v(" "),s("h3",{attrs:{id:"完整的构建步骤"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#完整的构建步骤"}},[e._v("#")]),e._v(" 完整的构建步骤")]),e._v(" "),s("p",[e._v("最后我们在 "),s("code",[e._v("package.json")]),e._v(" 中添加 "),s("code",[e._v("build")]),e._v(" 命令把所有的步骤串起来，完整的 "),s("code",[e._v("diff")]),e._v(" 如下：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('-    "client:static-server": "http-server client/"\n+    "client:static-server": "http-server client/",\n+    "prebuild": "rm -rf dist && mkdir -p dist/{images,styles,scripts}",\n+    "build": "scripty",\n+    "build:images": "scripty",\n+    "build:scripts": "scripty",\n+    "build:styles": "scripty",\n+    "build:hash": "scripty"\n\n')])])]),s("p",[e._v("其中 "),s("code",[e._v("scripts/build.sh")]),e._v(" 的内容如下：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("for step in 'images' 'scripts' 'styles' 'hash'\ndo\n  npm run build:$step\ndone\n\n")])])]),s("p",[e._v("然后我们尝试运行 "),s("code",[e._v("npm run build")]),e._v("，完整的过程输出如下：")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://poetries1.gitee.io/img-repo/2020/07/npm/31.png",alt:""}})]),e._v(" "),s("p",[e._v("构建完成的 "),s("code",[e._v("dist")]),e._v(" 目录内容如下：")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://poetries1.gitee.io/img-repo/2020/07/npm/32.png",alt:""}})]),e._v(" "),s("p",[e._v("可以看到，所有的静态资源都加上了版本号。")]),e._v(" "),s("p",[e._v("构建完成的 "),s("code",[e._v("dist/index.html")]),e._v(" 内容如下：")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://poetries1.gitee.io/img-repo/2020/07/npm/33.png",alt:""}})]),e._v(" "),s("blockquote",[s("p",[e._v("可以看到，静态资源的版本号被正确替换了，为了验证构建出来的页面是否正常运行，可以运行 "),s("code",[e._v("./node_modules/.bin/http-server dist")]),e._v("，然后浏览器打开："),s("code",[e._v("http://127.0.0.1:8080")])])]),e._v(" "),s("blockquote",[s("p",[e._v("本节用到的代码见 "),s("a",{attrs:{href:"https://github.com/wangshijun/automated-workflow-with-npm-script/tree/12-use-npm-script-as-build-pipeline",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitHub"),s("OutboundLink")],1),e._v("，想边看边动手练习的同学可以拉下来自己改，注意切换到正确的分支 "),s("code",[e._v("12-use-npm-script-as-build-pipeline")]),e._v("。")])]),e._v(" "),s("h2",{attrs:{id:"_14-实战5-用-npm-script-实现服务自动化运维"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14-实战5-用-npm-script-实现服务自动化运维"}},[e._v("#")]),e._v(" 14 实战5 用 npm script 实现服务自动化运维")]),e._v(" "),s("p",[e._v("需要事先说明的是，本节部分内容涉及到非前端的话题，比如服务的部署、日志，但会从前端项目管理开始，比如依赖管理、版本管理等。即使对自己定位是纯粹前端开发的同学，也建议阅读下，因为技不压身，了解整个前端项目交付流程中需要考量的点能让我们更有大局观。")]),e._v(" "),s("p",[e._v("通常来说，项目构建完成之后，就成为待发布的版本，因此版本管理需要考虑，甚至做成自动化的，然后，最新的代码需要部署到线上机器才能让所有用户访问到，部署环节涉及到服务的启动、重启、日志管理等需要考虑。")]),e._v(" "),s("p",[e._v("下面我们介绍 npm script 在服务运维时的几个用途：")]),e._v(" "),s("h3",{attrs:{id:"使用-npm-script-进行版本管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-npm-script-进行版本管理"}},[e._v("#")]),e._v(" 使用 npm script 进行版本管理")]),e._v(" "),s("p",[e._v("每次构建完的代码都应该有新的版本号，修改版本号直接使用 npm 内置的 version 自命令即可，如果是简单粗暴的版本管理，可以在 "),s("code",[e._v("package.json")]),e._v(" 中添加如下 "),s("code",[e._v("scripts")]),e._v("：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('+    "release:patch": "npm version patch && git push && git push --tags",\n+    "release:minor": "npm version minor && git push && git push --tags",\n+    "release:major": "npm version major && git push && git push --tags",\n     "precommit": "lint-staged",\n\n')])])]),s("p",[e._v("这 3 条命令遵循 "),s("a",{attrs:{href:"https://semver.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("semver"),s("OutboundLink")],1),e._v(" 的版本号规范来方便你管理版本，"),s("code",[e._v("patch")]),e._v(" 是更新补丁版本，"),s("code",[e._v("minor")]),e._v("是更新小版本，major 是更新大版本。在必要的时候，可以通过运行 "),s("code",[e._v("npm run version:patch")]),e._v(" 来升补丁版本，运行输出如下：")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://poetries1.gitee.io/img-repo/2020/07/npm/34.png",alt:""}})]),e._v(" "),s("blockquote",[s("p",[e._v("如果要求所有的版本号不超过 "),s("code",[e._v("10")]),e._v("，即 "),s("code",[e._v("0.0.9")]),e._v(" 的下个版本是 "),s("code",[e._v("0.1.0")]),e._v(" 而不是 "),s("code",[e._v("0.0.10")]),e._v("，可以编写简单的 shell 脚本来实现（"),s("strong",[e._v("注意这样会破坏 semver 的约定")]),e._v("），具体步骤如下：")])]),e._v(" "),s("p",[e._v("首先，在 "),s("code",[e._v("scripts")]),e._v(" 目录下新增 "),s("code",[e._v("bump.sh")]),e._v("（"),s("strong",[e._v("别忘了文件的可执行权限")]),e._v("："),s("code",[e._v("chmod a+x scripts/bump.sh")]),e._v("）：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("#!/usr/bin/env bash\n\n# get major/minor/patch version to change\nversion=`cat package.json| grep version | grep -v release | awk -F\\\" '{print $4}'`\ncomponents=($(echo $version | tr '.' '\\n'))\nmajor=${components[0]}\nminor=${components[1]}\npatch=${components[2]}\n\nrelease='patch';\n\n# decide which version to increment\nif [ $patch -ge 9 ]; then\n    if [ $minor -ge 9 ]; then\n        release='major'\n    else\n        release='minor'\n    fi\nelse\n    release='patch'\nfi\n\necho \"major=$major, minor=$minor, patch=$patch, release=$release\"\n\n# upgrade version\nnpm run release:$release\n\n")])])]),s("p",[e._v("然后，在 "),s("code",[e._v("package.json")]),e._v(" 中新增 "),s("code",[e._v("bump")]),e._v(" 子命令：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('     "release:major": "npm version major && git push && git push --tags",\n+    "bump": "scripty",\n     "precommit": "lint-staged",\n\n')])])]),s("p",[e._v("在必要的时候执行 "),s("code",[e._v("npm run bump")]),e._v("，输出示例如下：")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://poetries1.gitee.io/img-repo/2020/07/npm/35.png",alt:""}})]),e._v(" "),s("h3",{attrs:{id:"使用-npm-script-进行服务进程和日志管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-npm-script-进行服务进程和日志管理"}},[e._v("#")]),e._v(" 使用 npm script 进行服务进程和日志管理")]),e._v(" "),s("p",[e._v("在生产环境的服务进程和日志管理领域，"),s("a",{attrs:{href:"http://pm2.keymetrics.io",target:"_blank",rel:"noopener noreferrer"}},[e._v("pm2"),s("OutboundLink")],1),e._v(" 是当之无愧的首选，功能很强大，使用简单，开发环境常用的是 "),s("a",{attrs:{href:"https://www.npmjs.com/package/nodemon",target:"_blank",rel:"noopener noreferrer"}},[e._v("nodemon"),s("OutboundLink")],1),e._v("。")]),e._v(" "),s("p",[e._v("在我们的项目中使用 "),s("code",[e._v("npm script")]),e._v(" 进行服务进程和日志管理的基本步骤如下：")]),e._v(" "),s("p",[s("strong",[e._v("1. 准备 http 服务")])]),e._v(" "),s("p",[e._v("在使用 "),s("code",[e._v("npm script")]),e._v(" 作为构建流水线的基础上，我们在项目中引入了 "),s("a",{attrs:{href:"https://www.npmjs.com/package/express",target:"_blank",rel:"noopener noreferrer"}},[e._v("express"),s("OutboundLink")],1),e._v(" 和 "),s("a",{attrs:{href:"https://www.npmjs.com/package/morgan",target:"_blank",rel:"noopener noreferrer"}},[e._v("morgan"),s("OutboundLink")],1),e._v("，并使用如下脚本启动 http 服务器方便用户访问我们的网页（morgan 使用来记录用户的访问日志的）：")]),e._v(" "),s("p",[e._v("先安装依赖：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm i express morgan -D\n# npm install express morgan --save-dev\n# yarn add express morgan -D\n\n")])])]),s("p",[e._v("然后在根目录下创建文件 server.js，内容如下：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const express = require('express');\nconst morgan = require('morgan');\n\nconst app = express();\nconst port = process.env.PORT || 8080;\n\napp.use(express.static('./dist'));\napp.use(morgan('combined'));\n\napp.listen(port, err => {\n  if (err) {\n    console.error('server start error', err); // eslint-disable-line\n    process.exit(1);\n  }\n\n  console.log(`server started at port ${port}`);  // eslint-disable-line\n});\n\n")])])]),s("p",[s("strong",[e._v("2. 准备日志目录")])]),e._v(" "),s("p",[e._v("为简单起见，我们项目中创建日志存储目录 "),s("code",[e._v("logs")]),e._v("，有些公司可能不会把日志存在项目部署目录下：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("mkdir logs\ntouch logs/.gitkeep\ngit add logs/.gitkeep\ngit commit -m 'add logs folder'\n\n")])])]),s("p",[e._v("并且设置该目录为 git 忽略的，再改动 .gitignore：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" dist\n+logs\n\n")])])]),s("blockquote",[s("p",[s("strong",[e._v("TIP#21")]),e._v("：这里加 "),s("code",[e._v("logs/.gitkeep")]),e._v(" 空文件的目的是为了能把 "),s("code",[e._v("logs")]),e._v(" 目录提交到 "),s("code",[e._v("git")]),e._v(" 里面，但是我们故意忽略 "),s("code",[e._v("logs")]),e._v(" 目录里面的内容，这是在 "),s("code",[e._v("git")]),e._v(" 中提交目录结构而忽略其中内容的常见做法。")])]),e._v(" "),s("p",[s("strong",[e._v("3. 安装和配置 pm2")])]),e._v(" "),s("p",[e._v("安装 "),s("code",[e._v("pm2")]),e._v(" 作为依赖：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm i pm2 -D\n# npm install pm2 --save-dev\n# yarn add pm2 -D\n\n")])])]),s("p",[e._v("然后添加服务启动配置到项目根目录下 "),s("code",[e._v("pm2.json")]),e._v("，更多配置项可以参照"),s("a",{attrs:{href:"http://pm2.keymetrics.io/docs/usage/application-declaration",target:"_blank",rel:"noopener noreferrer"}},[e._v("文档"),s("OutboundLink")],1),e._v("：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('{\n  "apps": [\n    {\n      "name": "npm-script-workflow",\n      "script": "./server.js",\n      "out_file": "./logs/stdout.log",\n      "error_file": "./logs/stderr.log",\n      "log_date_format": "YYYY-MM-DD HH:mm:ss",\n      "instances": 0,\n      "exec_mode": "cluster",\n      "max_memory_restart": "800M",\n      "merge_logs": true,\n      "env": {\n        "NODE_ENV": "production",\n        "PORT": 8080,\n      }\n    }\n  ]\n}\n\n')])])]),s("p",[e._v("上面的配置指定了服务脚本为 "),s("code",[e._v("server.js")]),e._v("，日志输出文件路径，日志时间格式，进程数量 = CPU 核数，启动方式为 cluster，以及两个环境变量。")]),e._v(" "),s("p",[s("strong",[e._v("4. 配置服务部署命令")])]),e._v(" "),s("p",[e._v("在没有集成 CI 服务之前，我们的部署命令应该是下面这样的：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('     "release:major": "npm version major && git push && git push --tags",\n+    "predeploy": "yarn && npm run build",\n+    "deploy": "pm2 restart pm2.json",\n     "bump": "scripty",\n\n')])])]),s("p",[e._v("即在部署前需要安装最新的依赖，重新构建，然后使用 "),s("code",[e._v("pm2")]),e._v(" 重新启动服务即可，如果你有多台机器跑通1个服务，建议有个集中的 CI 服务器专门负责构建，而部署时就不需要运行 "),s("code",[e._v("build")]),e._v(" 了。")]),e._v(" "),s("p",[e._v("每次需要部署服务时只需要运行 "),s("code",[e._v("npm run deploy")]),e._v(" 就行了，运行成功输出如下：")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://poetries1.gitee.io/img-repo/2020/07/npm/36.png",alt:""}})]),e._v(" "),s("p",[s("strong",[e._v("5. 配置日志查看命令")])]),e._v(" "),s("p",[e._v("至于日志，虽然 "),s("code",[e._v("pm2")]),e._v(" 提供了内置的 "),s("code",[e._v("logs")]),e._v(" 管理命令，如果某台服务器上启动了多个不同的服务进程，那么 "),s("code",[e._v("pm2 logs")]),e._v(" 会展示所有服务的日志，个人建议使用如下命令查看当前服务的日志：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('+    "logs": "tail -f logs/*",\n     "bump": "scripty",\n\n')])])]),s("p",[e._v("需要查看日志时，直接运行 "),s("code",[e._v("npm run logs")]),e._v("，运行输入如下：")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://poetries1.gitee.io/img-repo/2020/07/npm/37.png",alt:""}})]),e._v(" "),s("p",[e._v("当然如果你有更复杂的日志查看需求，直接用 "),s("code",[e._v("cat")]),e._v("、"),s("code",[e._v("grep")]),e._v(" 之类的命令好了。")]),e._v(" "),s("blockquote",[s("p",[e._v("本节用到的代码见 "),s("a",{attrs:{href:"https://github.com/wangshijun/automated-workflow-with-npm-script/tree/13-use-npm-script-for-devops",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitHub"),s("OutboundLink")],1),e._v("，想边看边动手练习的同学可以拉下来自己改，注意切换到正确的分支 "),s("code",[e._v("13-use-npm-script-for-devops")]),e._v("。")])])])}),[],!1,null,null,null);t.default=r.exports}}]);
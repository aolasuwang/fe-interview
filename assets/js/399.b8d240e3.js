(window.webpackJsonp=window.webpackJsonp||[]).push([[399],{758:function(e,a,s){"use strict";s.r(a);var v=s(10),t=Object(v.a)({},(function(){var e=this,a=e.$createElement,s=e._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("blockquote",[s("p",[e._v("声明 本教程整理于互联网")])]),e._v(" "),s("blockquote",[s("p",[s("code",[e._v("webpack")]),e._v("是当下最热门的前端资源模块化管理和打包工具。它可以将许多松散的模块按照依赖和规则打包成符合生产环境部署的前端资源。还可以将按需加载的模块进行代码分隔，到实际需要的时候再异步加载。通过 "),s("code",[e._v("loader")]),e._v(" 的转换，任何形式的资源都可以视作模块，比如"),s("code",[e._v("CommonJs")]),e._v("模块、 "),s("code",[e._v("AMD")]),e._v(" 模块、 "),s("code",[e._v("ES6")]),e._v(" 模块、"),s("code",[e._v("CSS")]),e._v("、图片、 "),s("code",[e._v("JSON")]),e._v("、"),s("code",[e._v("Coffeescript")]),e._v("、 LESS等")])]),e._v(" "),s("h2",{attrs:{id:"一、模块系统的演进"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、模块系统的演进"}},[e._v("#")]),e._v(" 一、模块系统的演进")]),e._v(" "),s("hr"),e._v(" "),s("ul",[s("li",[s("p",[e._v("模块系统主要解决模块的定义、依赖和导出，先来看看已经存在的模块系统")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("<script>")]),e._v("标签")])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('<script src="module1.js"><\/script>\n<script src="module2.js"><\/script>\n<script src="libraryA.js"><\/script>\n<script src="module3.js"><\/script>\n')])])]),s("ul",[s("li",[s("p",[e._v("这是最原始的 "),s("code",[e._v("JavaScript")]),e._v(" 文件加载方式，如果把每一个文件看做是一个模块，那么他们的接口通常是暴露在全局作用域下，也就是定义在 "),s("code",[e._v("window")]),e._v(" 对象中，不同模块的接口调用都是一个作用域中，一些复杂的框架，会使用命名空间的概念来组织这些模块的接口，典型的例子如 "),s("code",[e._v("YUI")]),e._v(" 库")])]),e._v(" "),s("li",[s("p",[e._v("这种原始的加载方式暴露了一些显而易见的弊端")]),e._v(" "),s("ul",[s("li",[e._v("全局作用域下容易造成变量冲突")]),e._v(" "),s("li",[e._v("文件只能按照 "),s("code",[e._v("<script>")]),e._v("的书写顺序进行加载")]),e._v(" "),s("li",[e._v("开发人员必须主观解决模块和代码库的依赖关系")]),e._v(" "),s("li",[e._v("在大型项目中各种资源难以管理，长期积累的问题导致代码库混乱不堪")])])])]),e._v(" "),s("h3",{attrs:{id:"_1-1-commonjs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-commonjs"}},[e._v("#")]),e._v(" 1.1 CommonJS")]),e._v(" "),s("hr"),e._v(" "),s("ul",[s("li",[e._v("服务器端的 "),s("code",[e._v("Node.js")]),e._v("遵循 "),s("code",[e._v("CommonJS")]),e._v("规范，该规范的核心思想是允许模块通过"),s("code",[e._v("require")]),e._v("方法来同步加载所要依赖的其他模块，然后通过 "),s("code",[e._v("exports")]),e._v(" 或 "),s("code",[e._v("module.exports")]),e._v(" 来导出需要暴露的接口")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('require("module");\nrequire("../file.js");\nexports.doStuff = function() {};\nmodule.exports = someValue;\n')])])]),s("ul",[s("li",[s("p",[e._v("优点：")]),e._v(" "),s("ul",[s("li",[e._v("服务器端模块便于重用")]),e._v(" "),s("li",[s("code",[e._v("NPM")]),e._v(" 中已经有将近"),s("code",[e._v("20")]),e._v("万个可以使用模块包")]),e._v(" "),s("li",[e._v("简单并容易使用")])])]),e._v(" "),s("li",[s("p",[e._v("缺点：")]),e._v(" "),s("ul",[s("li",[e._v("同步的模块加载方式不适合在浏览器环境中，同步意味着阻塞加载，浏览器资源是异步加载的")]),e._v(" "),s("li",[e._v("不能非阻塞的并行加载多个模块")])])]),e._v(" "),s("li",[s("p",[e._v("实现")])]),e._v(" "),s("li",[s("p",[e._v("服务器端的 "),s("code",[e._v("Node.js")])])]),e._v(" "),s("li",[s("p",[s("code",[e._v("Browserify")]),e._v("，浏览器端的 "),s("code",[e._v("CommonJS")]),e._v(" 实现，可以使用 "),s("code",[e._v("NPM")]),e._v("的模块，但是编译打包后的文件体积可能很大")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("modules-webmake")]),e._v("，类似"),s("code",[e._v("Browserify")]),e._v("，还不如 "),s("code",[e._v("Browserify")]),e._v(" 灵活")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("wreq")]),e._v("，"),s("code",[e._v("Browserify")]),e._v("的前身")])])]),e._v(" "),s("h3",{attrs:{id:"_1-2-amd"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-amd"}},[e._v("#")]),e._v(" 1.2 AMD")]),e._v(" "),s("hr"),e._v(" "),s("blockquote",[s("p",[s("code",[e._v("Asynchronous Module Definition")]),e._v(" 规范其实只有一个主要接口"),s("code",[e._v("define(id?, dependencies?,factory)")]),e._v(" ，它要在声明模块的时候指定所有的依赖 "),s("code",[e._v("dependencies")]),e._v("，并且还要当做形参传到"),s("code",[e._v("factory")]),e._v(" 中，对于依赖的模块提前执行，依赖前置")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('define("module", ["dep1", "dep2"], function(d1, d2) {\nreturn someExportedValue;\n});require(["module", "../file"], function(module, file) { /* ... */ });\n')])])]),s("ul",[s("li",[s("p",[e._v("优点：")]),e._v(" "),s("ul",[s("li",[e._v("适合在浏览器环境中异步加载模块")]),e._v(" "),s("li",[e._v("可以并行加载多个模块")])])]),e._v(" "),s("li",[s("p",[e._v("缺点：")]),e._v(" "),s("ul",[s("li",[e._v("提高了开发成本，代码的阅读和书写比较困难，模块定义方式的语义 不顺畅")]),e._v(" "),s("li",[e._v("不符合通用的模块化思维方式，是一种妥协的实现")])])]),e._v(" "),s("li",[s("p",[e._v("实现：")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("RequireJS")])]),e._v(" "),s("li",[s("code",[e._v("curl")])])])])]),e._v(" "),s("h3",{attrs:{id:"_1-3-cmd"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-cmd"}},[e._v("#")]),e._v(" 1.3 CMD")]),e._v(" "),s("hr"),e._v(" "),s("ul",[s("li",[s("code",[e._v("Common Module Definition")]),e._v(" 规范和 "),s("code",[e._v("AMD")]),e._v("很相似，尽量保持简单，并与 "),s("code",[e._v("CommonJS")]),e._v(" 和"),s("code",[e._v("Node.js")]),e._v(" 的 "),s("code",[e._v("Modules")]),e._v("规范保持了很大的兼容性")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("define(function(require, exports, module) {\nvar $ = require('jquery');\nvar Spinning = require('./spinning');\nexports.doSomething = ...\nmodule.exports = ...\n})\n")])])]),s("ul",[s("li",[e._v("优点：\n"),s("ul",[s("li",[e._v("依赖就近，延迟执行")]),e._v(" "),s("li",[e._v("可以很容易在 "),s("code",[e._v("Node.js")]),e._v(" 中运行")])])]),e._v(" "),s("li",[e._v("缺点：\n"),s("ul",[s("li",[e._v("依赖 "),s("code",[e._v("SPM")]),e._v(" 打包，模块的加载逻辑偏重")])])]),e._v(" "),s("li",[e._v("实现：\n"),s("ul",[s("li",[s("code",[e._v("Sea.js")])]),e._v(" "),s("li",[s("code",[e._v("coolie")])])])])]),e._v(" "),s("h3",{attrs:{id:"_1-4-es6-模块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-es6-模块"}},[e._v("#")]),e._v(" 1.4 ES6 模块")]),e._v(" "),s("hr"),e._v(" "),s("ul",[s("li",[s("code",[e._v("EcmaScript6")]),e._v(" 标准增加了 "),s("code",[e._v("JavaScript")]),e._v("语言层面的模块体系定义。"),s("code",[e._v("ES6")]),e._v(" 模块的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。"),s("code",[e._v("CommonJS")]),e._v(" 和"),s("code",[e._v("AMD")]),e._v(" 模块，都只能在运行时确定这些东西")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('import "jquery";\nexport function doStuff() {}\nmodule "localModule" {}\n')])])]),s("ul",[s("li",[e._v("优点：\n"),s("ul",[s("li",[e._v("容易进行静态分析")]),e._v(" "),s("li",[e._v("面向未来的 "),s("code",[e._v("EcmaScript")]),e._v("标准")])])]),e._v(" "),s("li",[e._v("缺点：\n"),s("ul",[s("li",[e._v("原生浏览器端还没有实现该标准")]),e._v(" "),s("li",[e._v("全新的命令字，新版的 "),s("code",[e._v("Node.js")]),e._v("才支持")])])]),e._v(" "),s("li",[e._v("实现：\n"),s("ul",[s("li",[s("code",[e._v("Babel")])])])])]),e._v(" "),s("h3",{attrs:{id:"_1-5-前端模块加载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-前端模块加载"}},[e._v("#")]),e._v(" 1.5 前端模块加载")]),e._v(" "),s("hr"),e._v(" "),s("ul",[s("li",[e._v("前端模块要在客户端中执行，所以他们需要增量加载到浏览器中")]),e._v(" "),s("li",[e._v("模块的加载和传输，我们首先能想到两种极端的方式，一种是每个模块文件都单独请求，另一种是把所有模块打包成一个文件然后只请求一次。显而易见，每个模块都发起单独的请求造成了请求次数过多，导致应用启动速度慢；一次请求加载所有模块导致流量浪费、初始化过程慢。这两种方式都不是好的解决方案，它们过于简单粗暴")]),e._v(" "),s("li",[e._v("分块传输，按需进行懒加载，在实际用到某些模块的时候再增量更新，才是较为合理的模块加载方案")]),e._v(" "),s("li",[e._v("要实现模块的按需加载，就需要一个对整个代码库中的模块进行静态分析、编译打包的过\n程")])]),e._v(" "),s("h3",{attrs:{id:"_1-6-所有资源都是模块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-所有资源都是模块"}},[e._v("#")]),e._v(" 1.6 所有资源都是模块")]),e._v(" "),s("hr"),e._v(" "),s("blockquote",[s("p",[e._v("在上面的分析过程中，我们提到的模块仅仅是指"),s("code",[e._v("JavaScript")]),e._v("模块文件。然而，在前端开发过程中还涉及到样式、图片、字体、"),s("code",[e._v("HTML")]),e._v(" 模板等等众多的资源。这些资源还会以各种方言的形式存在，比如 "),s("code",[e._v("coffeescript")]),e._v("、 "),s("code",[e._v("less")]),e._v("、 "),s("code",[e._v("sass")]),e._v("、众多的模板库、多语言系统（"),s("code",[e._v("i18n")]),e._v("）等")])]),e._v(" "),s("ul",[s("li",[e._v("如果他们都可以视作模块，并且都可以通过 "),s("code",[e._v("require")]),e._v(" 的方式来加载，将带来优雅的开发体验，比如")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('require("./style.css");\nrequire("./style.less");\nrequire("./template.jade");\nrequire("./image.png");\n')])])]),s("ul",[s("li",[e._v("那么如何做到让 "),s("code",[e._v("require")]),e._v(" 能加载各种资源呢？")])]),e._v(" "),s("h3",{attrs:{id:"_1-7-静态分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-静态分析"}},[e._v("#")]),e._v(" 1.7 静态分析")]),e._v(" "),s("hr"),e._v(" "),s("blockquote",[s("p",[e._v("在编译的时候，要对整个代码进行静态分析，分析出各个模块的类型和它们依赖关系，然后将不同类型的模块提交给适配的加载器来处理。比如一个用"),s("code",[e._v("LESS")]),e._v(" 写的样式模块，可以先用"),s("code",[e._v("LESS")]),e._v(" 加载器将它转成一个"),s("code",[e._v("CSS")]),e._v("模块，在通过 "),s("code",[e._v("CSS")]),e._v(" 模块把他插入到页面的 "),s("code",[e._v("<style>")]),e._v(" 标签中执行。"),s("code",[e._v("Webpack")]),e._v("就是在这样的需求中应运而生")])]),e._v(" "),s("h2",{attrs:{id:"二、webpack基础知识"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、webpack基础知识"}},[e._v("#")]),e._v(" 二、webpack基础知识")]),e._v(" "),s("hr"),e._v(" "),s("h3",{attrs:{id:"_2-1-什么是-webpack"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-什么是-webpack"}},[e._v("#")]),e._v(" 2.1 什么是 Webpack")]),e._v(" "),s("hr"),e._v(" "),s("ul",[s("li",[s("code",[e._v("Webpack")]),e._v(" 是一个模块打包器。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源")])]),e._v(" "),s("h3",{attrs:{id:"_2-2-webpack-的特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-webpack-的特点"}},[e._v("#")]),e._v(" 2.2  Webpack 的特点")]),e._v(" "),s("hr"),e._v(" "),s("ul",[s("li",[s("p",[e._v("代码拆分")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("Webpack")]),e._v("有两种组织模块依赖的方式，同步和异步。异步依赖作为分割点，形成一个新的块。在优化了依赖树后，每一个异步区块都作为一个文件被打包")])])]),e._v(" "),s("li",[s("p",[e._v("Loader")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("Webpack")]),e._v(" 本身只能处理原生的 "),s("code",[e._v("JavaScript")]),e._v(" 模块，但是 "),s("code",[e._v("loader")]),e._v(" 转换器可以将各种类型的资源转换成 "),s("code",[e._v("JavaScript")]),e._v(" 模块。这样，任何资源都可以成为 "),s("code",[e._v("Webpack")]),e._v("可以处理的模块")])])]),e._v(" "),s("li",[s("p",[e._v("智能解析")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("Webpack")]),e._v(" 有一个智能解析器，几乎可以处理任何第三方库，无论它们的模块形式是"),s("code",[e._v("CommonJS")]),e._v("、 "),s("code",[e._v("AMD")]),e._v("还是普通的 "),s("code",[e._v("JS")]),e._v(" 文件。甚至在加载依赖的时候，允许使用动态表达式"),s("code",[e._v('require("./templates/" + name + ".jade")')])])])]),e._v(" "),s("li",[s("p",[e._v("插件系统")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("Webpack")]),e._v(" 还有一个功能丰富的插件系统。大多数内容功能都是基于这个插件系统运行的，还可以开发和使用开源的 "),s("code",[e._v("Webpack")]),e._v(" 插件，来满足各式各样的需求")])])]),e._v(" "),s("li",[s("p",[e._v("快速运行")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("Webpack")]),e._v(" 使用异步 "),s("code",[e._v("I/O")]),e._v(" 和多级缓存提高运行效率，这使得 "),s("code",[e._v("Webpack")]),e._v("能够以令人难以置信的速度快速增量编译")])])])]),e._v(" "),s("h3",{attrs:{id:"_2-3-总览"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-总览"}},[e._v("#")]),e._v(" 2.3 总览")]),e._v(" "),s("hr"),e._v(" "),s("ul",[s("li",[e._v("他的目的就是把有依赖关系的各种文件打包成一系列的静\n态资源")]),e._v(" "),s("li",[s("code",[e._v("webpack")]),e._v("简单点来说就就是一个配置文件，所有的魔力都是在这一个文件中发生的。 这个配置文件主要分\n为三大块\n"),s("ul",[s("li",[s("code",[e._v("entry")]),e._v(" 入口文件 让"),s("code",[e._v("webpack")]),e._v("用哪个文件作为项目的入口")]),e._v(" "),s("li",[s("code",[e._v("output")]),e._v(" 出口 让"),s("code",[e._v("webpack")]),e._v("把处理完成的文件放在哪里")]),e._v(" "),s("li",[s("code",[e._v("module")]),e._v(" 模块 要用什么不同的模块来处理各种类型的文件")])])])]),e._v(" "),s("p",[s("img",{attrs:{src:"https://poetries1.gitee.io/img-repo/2019/10/661.png",alt:""}})]),e._v(" "),s("h3",{attrs:{id:"_2-4-安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-安装"}},[e._v("#")]),e._v(" 2.4 安装")]),e._v(" "),s("hr"),e._v(" "),s("ul",[s("li",[e._v("先装好node和npm，因为webpack是一个基于node的项目。然后")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm install -g webpack\n")])])]),s("ul",[s("li",[e._v("此时 "),s("code",[e._v("Webpack")]),e._v("已经安装到了全局环境下，可以通过命令行"),s("code",[e._v("webpack -h")]),e._v(" 试试")]),e._v(" "),s("li",[e._v("通常我们会将 "),s("code",[e._v("Webpack")]),e._v("安装到项目的依赖中，这样就可以使用项目本地版本的 "),s("code",[e._v("Webpack")])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("# 进入项目目录\n# 确定已经有 package.json，没有就通过 npm init 创建\n# 安装 webpack 依赖\n$ npm install webpack --save-dev\n")])])]),s("blockquote",[s("p",[s("code",[e._v("Webpack")]),e._v(" 目前有两个主版本，一个是在 master 主干的稳定版，一个是在 "),s("code",[e._v("webpack-2")]),e._v(" 分支的测试版，测试版拥有一些实验性功能并且和稳定版不兼容，在正式项目中应该使用稳定版")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("# 查看 webpack 版本信息\n$ npm info webpack\n# 安装指定版本的 webpack\n$ npm install webpack@1.12.x --save-dev\n")])])]),s("ul",[s("li",[e._v("如果需要使用 "),s("code",[e._v("Webpack")]),e._v("开发工具，要单独安装")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ npm install webpack-dev-server --save-dev\n")])])]),s("h3",{attrs:{id:"_2-5-建立一个项目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-建立一个项目"}},[e._v("#")]),e._v(" 2.5  建立一个项目")]),e._v(" "),s("hr"),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("mkdir webpack\ncd webpack\nnpm init\n")])])]),s("ul",[s("li",[e._v("如果你使用git管理你的这个项目的话，建议你新建一个"),s("code",[e._v(".gitignore")]),e._v("文件，不要让"),s("code",[e._v("git")]),e._v("提交一些"),s("code",[e._v("node")]),e._v("依赖的模\n块")]),e._v(" "),s("li",[e._v("创建一个静态页面 "),s("code",[e._v("index.html")]),e._v(" 和一个 "),s("code",[e._v("JS")]),e._v(" 入口文件 "),s("code",[e._v("entry.js：")])])]),e._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("\x3c!-- index.html --\x3e")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("html")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("head")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("meta")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("charset")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("utf-8"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("</")]),e._v("head")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("body")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("script")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("src")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("bundle.js"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),s("span",{pre:!0,attrs:{class:"token script"}}),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("</")]),e._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("</")]),e._v("body")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("</")]),e._v("html")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n")])])]),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// entry.js")]),e._v("\ndocument"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("write")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'It works.'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),s("ul",[s("li",[e._v("然后编译 "),s("code",[e._v("entry.js")]),e._v(" 并打包到 "),s("code",[e._v("bundle.js")]),e._v("：")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ webpack entry.js bundle.js\n")])])]),s("ul",[s("li",[e._v("打包过程会显示日志：")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Hash: e964f90ec65eb2c29bb9\nVersion: webpack 1.12.2\nTime: 54ms\nAsset Size Chunks Chunk Names\nbundle.js 1.42 kB 0 [emitted] main\n[0] ./entry.js 27 bytes {0} [built]\n")])])]),s("ul",[s("li",[e._v("用浏览器打开 "),s("code",[e._v("index.html")]),e._v(" 将会看到 "),s("code",[e._v("It works.")])]),e._v(" "),s("li",[e._v("接下来添加一个模块 "),s("code",[e._v("module.js")]),e._v("并修改入口 "),s("code",[e._v("entry.js")]),e._v("：")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// module.js\nmodule.exports = 'It works from module.js.'\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// entry.js\ndocument.write('It works.')\ndocument.write(require('./module.js')) // 添加模块\n")])])]),s("ul",[s("li",[s("p",[e._v("重新打包 "),s("code",[e._v("webpack entry.js bundle.js")]),e._v("后刷新页面看到变化 "),s("code",[e._v("It works.It works from module.js.")])])]),e._v(" "),s("li",[s("p",[s("code",[e._v("Webpack")]),e._v(" 会分析入口文件，解析包含依赖关系的各个文件。这些文件（模块）都打包到"),s("code",[e._v("bundle.js")]),e._v(" 。"),s("code",[e._v("Webpack")]),e._v(" 会给每个模块分配一个唯一的"),s("code",[e._v("id")]),e._v("并通过这个"),s("code",[e._v("id")]),e._v(" 索引和访问模块。在页面启动时，会先执"),s("code",[e._v("entry.js")]),e._v(" 中的代码，其它模块会在运行"),s("code",[e._v("require")]),e._v("的时候再执行")])])]),e._v(" "),s("h2",{attrs:{id:"三、loader"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、loader"}},[e._v("#")]),e._v(" 三、Loader")]),e._v(" "),s("hr"),e._v(" "),s("ul",[s("li",[s("code",[e._v("Webpack")]),e._v(" 本身只能处理 "),s("code",[e._v("JavaScript")]),e._v(" 模块，如果要处理其他类型的文件，就需要使用 "),s("code",[e._v("loader")]),e._v("进行转换")]),e._v(" "),s("li",[s("code",[e._v("Loader")]),e._v(" 可以理解为是模块和资源的转换器，它本身是一个函数，接受源文件作为参数，返回转换的结果。这样，我们就可以通过 require 来加载任何类型的模块或文件，比如CoffeeScript、 JSX、 LESS")])]),e._v(" "),s("h3",{attrs:{id:"_3-1-loader-有哪些特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-loader-有哪些特性"}},[e._v("#")]),e._v(" 3.1  loader 有哪些特性")]),e._v(" "),s("hr"),e._v(" "),s("ul",[s("li",[s("code",[e._v("Loader")]),e._v(" 可以通过管道方式链式调用，每个 "),s("code",[e._v("loader")]),e._v(" 可以把资源转换成任意格式并传递给下一个 "),s("code",[e._v("loader")]),e._v(" ，但是最后一个 "),s("code",[e._v("loader")]),e._v(" 必须返回 "),s("code",[e._v("JavaScript")])]),e._v(" "),s("li",[s("code",[e._v("Loader")]),e._v("可以同步或异步执行。")]),e._v(" "),s("li",[s("code",[e._v("Loader")]),e._v(" 运行在 "),s("code",[e._v("node.js")]),e._v(" 环境中，所以可以做任何可能的事情。")]),e._v(" "),s("li",[s("code",[e._v("Loader")]),e._v(" 可以接受参数，以此来传递配置项给 "),s("code",[e._v("loader")]),e._v("。")]),e._v(" "),s("li",[s("code",[e._v("Loader")]),e._v(" 可以通过文件扩展名（或正则表达式）绑定给不同类型的文件。")]),e._v(" "),s("li",[s("code",[e._v("Loader")]),e._v("可以通过 "),s("code",[e._v("npm")]),e._v("发布和安装。")]),e._v(" "),s("li",[e._v("除了通过 "),s("code",[e._v("package.json")]),e._v("的 "),s("code",[e._v("main")]),e._v("指定，通常的模块也可以导出一个 "),s("code",[e._v("loader")]),e._v("来使用。")]),e._v(" "),s("li",[s("code",[e._v("Loader")]),e._v(" 可以访问配置。")]),e._v(" "),s("li",[e._v("插件可以让 "),s("code",[e._v("loader")]),e._v(" 拥有更多特性。")]),e._v(" "),s("li",[s("code",[e._v("Loader")]),e._v("可以分发出附加的任意文件")])]),e._v(" "),s("blockquote",[s("ul",[s("li",[s("code",[e._v("Loader")]),e._v("本身也是运行在 "),s("code",[e._v("node.js")]),e._v(" 环境中的 "),s("code",[e._v("JavaScript")]),e._v("模块，它通常会返回一个函数。大多数情况下，我们通过 npm 来管理 "),s("code",[e._v("loader")]),e._v("，但是你也可以在项目中自己写 "),s("code",[e._v("loader")]),e._v(" 模块")])])]),e._v(" "),s("ul",[s("li",[e._v("按照惯例，而非必须，"),s("code",[e._v("loader")]),e._v(" 一般以 "),s("code",[e._v("xxx-loader")]),e._v(" 的方式命名， "),s("code",[e._v("xxx")]),e._v(" 代表了这个 "),s("code",[e._v("loader")]),e._v("要做的转换功能，比如 "),s("code",[e._v("json-loader")])]),e._v(" "),s("li",[e._v("在引用 "),s("code",[e._v("loader")]),e._v(" 的时候可以使用全名 "),s("code",[e._v("json-loader")]),e._v(" ，或者使用短名 "),s("code",[e._v("json")]),e._v("。这个命名规则和搜索优先级顺序在"),s("code",[e._v("webpack")]),e._v(" 的"),s("code",[e._v("resolveLoader.moduleTemplates api")]),e._v("中定义")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('Default: ["*-webpack-loader", "*-web-loader", "*-loader", "*"]\n')])])]),s("ul",[s("li",[s("code",[e._v("Loader")]),e._v("可以在 "),s("code",[e._v("require()")]),e._v("引用模块的时候添加，也可以在 "),s("code",[e._v("webpack")]),e._v(" 全局配置中进行绑定，还可以通过命令行的方式使用")]),e._v(" "),s("li",[e._v("我们要在页面中引入一个"),s("code",[e._v("CSS")]),e._v("文件"),s("code",[e._v("style.css")]),e._v("，首页将 "),s("code",[e._v("style.css")]),e._v("也看成是一个模块，然后用 "),s("code",[e._v("css-loader")]),e._v(" 来读取它，再用"),s("code",[e._v("style-loader")]),e._v("把它插入到页面中")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("/* style.css */\nbody { \n  background: yellow; \n}\n")])])]),s("p",[e._v("修改 entry.js：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("require(\"!style!css!./style.css\") // 载入 style.css\ndocument.write('It works.')\ndocument.write(require('./module.js'))\n")])])]),s("p",[e._v("安装 loader：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm install css-loader style-loader\n")])])]),s("p",[e._v("重新编译打包，刷新页面，就可以看到黄色的页面背景了")]),e._v(" "),s("blockquote",[s("p",[e._v("如果每次   require CSS   文件的时候都要写   loader   前缀，是一件很繁琐的事情。我们可以根据模块类型（扩展名）来自动绑定需要的   loader")])]),e._v(" "),s("ul",[s("li",[e._v("将   "),s("code",[e._v("entry.js")]),e._v("  中的 "),s("code",[e._v('require("!style!css!./style.css")')]),e._v("修改为 "),s("code",[e._v('require("./style.css")')]),e._v("，然后执行：")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ webpack entry.js bundle.js --module-bind 'css=style!css'\n# 有些环境下可能需要使用双引号\n$ webpack entry.js bundle.js --module-bind \"css=style!css\"\n")])])]),s("ul",[s("li",[e._v("显然，这两种使用 "),s("code",[e._v("loader")]),e._v(" 的方式，效果是一样的")])]),e._v(" "),s("h2",{attrs:{id:"四、配置webpack"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、配置webpack"}},[e._v("#")]),e._v(" 四、配置webpack")]),e._v(" "),s("hr"),e._v(" "),s("blockquote",[s("p",[s("code",[e._v("Webpack")]),e._v("在执行的时候，除了在命令行传入参数，还可以通过指定的配置文件来执行。默认情况下，会搜索当前目"),s("code",[e._v("webpack.config.js")]),e._v(" 文件，这个文件是一个 "),s("code",[e._v("node.js")]),e._v("模块，返回一个"),s("code",[e._v("json")]),e._v(" 格式的配置信息对象，或者通过 "),s("code",[e._v("--config")]),e._v(" 选项来指定配置文件")])]),e._v(" "),s("ul",[s("li",[s("p",[e._v("现在开始配置"),s("code",[e._v("webpack")]),e._v("，目标是把这两个"),s("code",[e._v("js")]),e._v("文件合并成一个文件. 我们可以自己在"),s("code",[e._v("build")]),e._v("文件夹里面手动建一个"),s("code",[e._v("index.html")]),e._v("文件夹，然后再把合并以后的"),s("code",[e._v("js")]),e._v("引用在里面，但是这样有些麻烦，所以我们这里安装一个"),s("code",[e._v("plugin")]),e._v("，可以自动快速的帮我们生成"),s("code",[e._v("HTML")])])]),e._v(" "),s("li",[s("p",[e._v("创建一个配置文件 "),s("code",[e._v("webpack.config.js")])])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("var webpack = require('webpack')\nmodule.exports = {\nentry: './entry.js',\noutput: {\npath: __dirname,\nfilename: 'bundle.js'\n},\nmodule: {\nloaders: [\n{test: /\\.css$/, loader: 'style!css'}\n]\n}\n}\n")])])]),s("ul",[s("li",[e._v("同时简化 "),s("code",[e._v("entry.js")]),e._v(" 中的 "),s("code",[e._v("style.css")]),e._v(" 加载方式")]),e._v(" "),s("li",[s("code",[e._v("require('./style.css')")])]),e._v(" "),s("li",[e._v("最后运行 "),s("code",[e._v("webpack")]),e._v(" ，可以看到 "),s("code",[e._v("webpack")]),e._v(" 通过配置文件执行的结果和通过命令行"),s("code",[e._v("webpack entry.js bundle.js --module-bind 'css=style!css'")]),e._v("执行的结果是一样的")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm install html-webpack-plugin --save-dev\n")])])]),s("ul",[s("li",[e._v("有了这个插件 开始写"),s("code",[e._v("config")]),e._v("文件")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("var path = require('path');\nvar HtmlwebpackPlugin = require('html-webpack-plugin');\n//定义了一些文件夹的路径\nvar ROOT_PATH = path.resolve(__dirname);\nvar APP_PATH = path.resolve(ROOT_PATH, 'app');\nvar BUILD_PATH = path.resolve(ROOT_PATH, 'build');\nmodule.exports = {\n//项目的文件夹 可以直接用文件夹名称 默认会找index.js 也可以确定是哪个文件名字\nentry: APP_PATH,\n//输出的文件名 合并以后的js会命名为bundle.js\noutput: {\npath: BUILD_PATH,\nfilename: 'bundle.js'\n},\n//添加我们的插件 会自动生成一个html文件\nplugins: [\nnew HtmlwebpackPlugin({\ntitle: 'Hello World app'\n})\n]\n};\n")])])]),s("ul",[s("li",[e._v("然后在项目根目录运行")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("webpack\n")])])]),s("ul",[s("li",[e._v("你会发现多出来一个build文件夹，直接点开里面的html文件，你会发现我们可爱的"),s("code",[e._v("“hello world”")]),e._v("已经插入到页面了。我们的任务完成了，成功生成"),s("code",[e._v("html")]),e._v("，合并"),s("code",[e._v("js")]),e._v("，"),s("code",[e._v("html")]),e._v("引入了"),s("code",[e._v("js")]),e._v("，"),s("code",[e._v("js")]),e._v("被执行了")])]),e._v(" "),s("h3",{attrs:{id:"_4-1-配置webpack-dev-server"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-配置webpack-dev-server"}},[e._v("#")]),e._v(" 4.1 配置webpack-dev-server")]),e._v(" "),s("hr"),e._v(" "),s("ul",[s("li",[s("p",[e._v("上面任务虽然完成了，但是我们要不断运行程序然后查看页面，所以最好新建一个开发服务器，可以"),s("code",[e._v("serve")]),e._v("我们"),s("code",[e._v("pack")]),e._v("以后的代码，并且当代码更新的时候自动刷新浏览器")])]),e._v(" "),s("li",[s("p",[e._v("安装"),s("code",[e._v("webpack-dev-server")])])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm install webpack-dev-server --save-dev\n")])])]),s("ul",[s("li",[e._v("安装完毕后在"),s("code",[e._v("config")]),e._v("中添加配置")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("module.exports = {\n\ndevServer: {\nhistoryApiFallback: true,\nhot: true,\ninline: true,\nprogress: true,\n},\n\n}\n")])])]),s("ul",[s("li",[e._v("然后再"),s("code",[e._v("package.json")]),e._v("里面配置一下运行的命令,"),s("code",[e._v("npm")]),e._v("支持自定义一些命令")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('"scripts": {\n"start": "webpack-dev-server --hot --inline"\n},\n')])])]),s("ul",[s("li",[s("p",[e._v("在项目根目录下输入"),s("code",[e._v("npm start")]),e._v(",一堆花花绿绿的信息后server已经起来了，在浏览器里面输入"),s("code",[e._v("http://localhost:8080")]),e._v("发现"),s("code",[e._v("hello world")]),e._v("出现了，在"),s("code",[e._v("js")]),e._v("里面随便修改一些输出,然后保存,浏览器自动刷新，新的结果出现了")])]),e._v(" "),s("li",[s("p",[e._v("拓展阅读 如果你的服务器端使用的是"),s("code",[e._v("express")]),e._v("框架，你还可以直接安装"),s("code",[e._v("express")]),e._v("的"),s("code",[e._v("middleware")]),e._v("，"),s("code",[e._v("webpack")]),e._v("配合"),s("code",[e._v("express")]),e._v("，很好用")])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm install webpack-dev-middleware --save-dev\n")])])]),s("h3",{attrs:{id:"_4-2-添加css样式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-添加css样式"}},[e._v("#")]),e._v(" 4.2 添加CSS样式")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("现在来添加一些样式，"),s("code",[e._v("webpack")]),e._v("使用"),s("code",[e._v("loader")]),e._v("的方式来处理各种各样的资源，比如说样式文件，我们需要两种"),s("code",[e._v("loader")]),e._v("，"),s("code",[e._v("css-loader")]),e._v("和 "),s("code",[e._v("style－loader")]),e._v("，"),s("code",[e._v("css-loader")]),e._v("会遍历"),s("code",[e._v("css")]),e._v("文件，找到所有的"),s("code",[e._v("url(...)")]),e._v("并且处理。"),s("code",[e._v("style-loader")]),e._v("会把所有的样式插入到你页面的一个"),s("code",[e._v("style tag")]),e._v("中")])]),e._v(" "),s("li",[s("p",[e._v("安装我们的"),s("code",[e._v("loader")])])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm install css-loader style-loader --save-dev\n")])])]),s("ul",[s("li",[e._v("配置"),s("code",[e._v("loader")]),e._v("，在"),s("code",[e._v("webpack.config.js")]),e._v("中")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("devServer: {\nhistoryApiFallback: true,\nhot: true,\ninline: true,\nprogress: true,\n},\n...\nmodule: {\nloaders: [\n{\ntest: /\\.css$/,\nloaders: ['style', 'css'],\ninclude: APP_PATH\n}\n]\n},\n...\nplugins: [\nnew HtmlwebpackPlugin({\ntitle: 'Hello World app'\n")])])]),s("ul",[s("li",[s("p",[e._v("看"),s("code",[e._v("loaders")]),e._v("的书写方式，test里面包含一个正则，包含需要匹配的文件，"),s("code",[e._v("loaders")]),e._v("是一个数组，包含要处理这些程序的"),s("code",[e._v("loaders")]),e._v("，这里我们用了"),s("code",[e._v("css")]),e._v("和"),s("code",[e._v("style")]),e._v("，注意"),s("code",[e._v("loaders")]),e._v("的处理顺序是从右到左的，这里就是先运行"),s("code",[e._v("css-loader")]),e._v("然后是"),s("code",[e._v("style-loader")])])]),e._v(" "),s("li",[s("p",[e._v("新建一个样式文件 "),s("code",[e._v("main.css")])])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("h1 {\ncolor: red;\n}\n")])])]),s("ul",[s("li",[e._v("记得在入口文件"),s("code",[e._v("index.js")]),e._v("中引用")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("require('./main.css');\n")])])]),s("ul",[s("li",[s("p",[e._v("然后发现标题变成红色的了，"),s("code",[e._v("webpack")]),e._v("的理念是基于项目处理的，把对应的文件格式给对应的"),s("code",[e._v("loader")]),e._v("处理，然后你就不用管了，它会决定怎么压缩，编译")])]),e._v(" "),s("li",[s("p",[e._v("那现在想使用一些有爱的"),s("code",[e._v("css")]),e._v("预编译程序，来点"),s("code",[e._v("sass")]),e._v("吧。 你可能已经想到了，再来个loader就行啦，确实是\n这样简单")])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm install sass-loader --save-dev\n")])])]),s("ul",[s("li",[e._v("稍微修改一下"),s("code",[e._v("config")]),e._v("，删掉我们先前添加的"),s("code",[e._v("css")]),e._v("规则，加上下面的"),s("code",[e._v("loader")])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("{\ntest: /\\.scss$/,\nloaders: ['style', 'css', 'sass'],\ninclude: APP_PATH\n},\n")])])]),s("ul",[s("li",[e._v("添加两个"),s("code",[e._v("sass")]),e._v("文件，"),s("code",[e._v("variables.scss")]),e._v("和"),s("code",[e._v("main.scss")])])]),e._v(" "),s("p",[s("code",[e._v("variables.scss")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$red: red;\n")])])]),s("p",[s("code",[e._v("main.scss")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('@import "./variables.scss";\nh1 {\ncolor: $red;\n}\n')])])]),s("p",[e._v("在"),s("code",[e._v("index.js")]),e._v("中引用")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("require('./main.scss');\n")])])]),s("ul",[s("li",[e._v("然后发现标题如愿变红")])]),e._v(" "),s("h3",{attrs:{id:"_4-3-处理图片和其他静态文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-处理图片和其他静态文件"}},[e._v("#")]),e._v(" 4.3 处理图片和其他静态文件")]),e._v(" "),s("hr"),e._v(" "),s("ul",[s("li",[s("p",[e._v("这个和其他一样，也许你也已经会玩了。安装"),s("code",[e._v("loader")]),e._v("，处理文件。诸如图片，字体等等，不过有个神奇的地方它可以根据你的需求将一些图片自动转成"),s("code",[e._v("base64")]),e._v("编码的，为你减轻很多的网络请求")])]),e._v(" "),s("li",[s("p",[e._v("安装"),s("code",[e._v("url-loader")])])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm install url-loader --save-dev\n")])])]),s("ul",[s("li",[e._v("配置"),s("code",[e._v("config")]),e._v("文件")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("{\ntest: /\\.(png|jpg)$/,\nloader: 'url?limit=40000'\n}\n")])])]),s("ul",[s("li",[e._v("注意后面那个limit的参数，当你图片大小小于这个限制的时候，会自动启用base64编码图片")])]),e._v(" "),s("p",[e._v("新建一个"),s("code",[e._v("imgs")]),e._v("文件夹，往里面添加一张照片。在"),s("code",[e._v("scss")]),e._v("文件中添加如下的东西")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("@import \"./variables.scss\";\nh1 {\ncolor: $red;\nbackground: url('./imgs/avatar.jpg');\n}\n")])])]),s("ul",[s("li",[e._v("npm start, 然后查看图片的url")])]),e._v(" "),s("h3",{attrs:{id:"_4-4-添加第三方库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-添加第三方库"}},[e._v("#")]),e._v(" 4.4 添加第三方库")]),e._v(" "),s("hr"),e._v(" "),s("ul",[s("li",[e._v("有的时候还想来点"),s("code",[e._v("jquery")]),e._v("，"),s("code",[e._v("moment")]),e._v("，"),s("code",[e._v("undersocre")]),e._v("之类的库"),s("code",[e._v("webpack")]),e._v("可以非常容易的做到这一点")]),e._v(" "),s("li",[e._v("那么我们现在安装在我们的"),s("code",[e._v("app")]),e._v("中添加"),s("code",[e._v("jquery")]),e._v("和"),s("code",[e._v("moment")]),e._v("的支持")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm install jquery moment --save-dev\n")])])]),s("ul",[s("li",[e._v("在js中引用")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("var sub = require('./sub');\nvar $ = require('jquery');\nvar moment = require('moment');\nvar app = document.createElement('div');\napp.innerHTML = '<h1>Hello World it</h1>';\ndocument.body.appendChild(app);\napp.appendChild(sub());\n$('body').append('<p>look at me! now is ' + moment().format() + '</p>');\n")])])]),s("ul",[s("li",[e._v("看看浏览器，成功！ "),s("code",[e._v("jquery")]),e._v("和"),s("code",[e._v("moment")]),e._v("现在都起作用了")])]),e._v(" "),s("h3",{attrs:{id:"_4-5-添加es6的支持"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-添加es6的支持"}},[e._v("#")]),e._v(" 4.5 添加ES6的支持")]),e._v(" "),s("hr"),e._v(" "),s("ul",[s("li",[e._v("首先 装各种"),s("code",[e._v("loader")])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm install babel-loader babel-preset-es2015 --save-dev\n")])])]),s("ul",[s("li",[e._v("配置我们的"),s("code",[e._v("config")]),e._v("文件")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("{\ntest: /\\.jsx?$/,\nloader: 'babel',\ninclude: APP_PATH,\nquery: {\npresets: ['es2015']\n}\n},\n")])])]),s("ul",[s("li",[s("p",[s("code",[e._v("es2015")]),e._v("这个参数是"),s("code",[e._v("babel")]),e._v("的"),s("code",[e._v("plugin")]),e._v("，可以支持各种最新的"),s("code",[e._v("es6")]),e._v("的特性，具体的情况看这个链接")])]),e._v(" "),s("li",[s("p",[e._v("现在我们可以改掉"),s("code",[e._v("CommonJS")]),e._v("风格的文件了")])])]),e._v(" "),s("p",[s("code",[e._v("sub.js")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("export default function() {\n  var element = document.createElement('h2');\n  element.innerHTML = \"Hello h2 world hahaha\";\n  return element;\n}\n")])])]),s("p",[s("code",[e._v("index.js")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("import './main.scss';\nimport generateText from './sub';\nimport $ from 'jquery';\nimport moment from 'moment';\nlet app = document.createElement('div');\nconst myPromise = Promise.resolve(42);\nmyPromise.then((number) => {\n$('body').append('<p>promise result is ' + number + ' now is ' + moment().format() + '</p>');\n});\napp.innerHTML = '<h1>Hello World it</h1>';\ndocument.body.appendChild(app);\napp.appendChild(generateText());\n")])])]),s("ul",[s("li",[e._v("我们上面测试了"),s("code",[e._v("import")]),e._v(","),s("code",[e._v("export")]),e._v("，"),s("code",[e._v("const")]),e._v("，"),s("code",[e._v("let")]),e._v("，"),s("code",[e._v("promise")]),e._v("等一系列"),s("code",[e._v("es6")]),e._v("的特性")])]),e._v(" "),s("h2",{attrs:{id:"五、插件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、插件"}},[e._v("#")]),e._v(" 五、插件")]),e._v(" "),s("hr"),e._v(" "),s("blockquote",[s("ul",[s("li",[e._v("插件可以完成更多 "),s("code",[e._v("loader")]),e._v(" 不能完成的功能")])])]),e._v(" "),s("ul",[s("li",[e._v("插件的使用一般是在 "),s("code",[e._v("webpack")]),e._v(" 的配置信息 "),s("code",[e._v("plugins")]),e._v(" 选项中指定")]),e._v(" "),s("li",[s("code",[e._v("Webpack")]),e._v(" 本身内置了一些常用的插件，还可以通过 "),s("code",[e._v("npm")]),e._v(" 安装第三方插件")]),e._v(" "),s("li",[e._v("接下来，我们利用一个最简单的 "),s("code",[e._v("BannerPlugin")]),e._v(" 内置插件来实践插件的配置和运行，这个插件的作用是给输出的文件头部添加注释信息")])]),e._v(" "),s("p",[e._v("修改 "),s("code",[e._v("webpack.config.js")]),e._v("，添加 "),s("code",[e._v("plugins")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("var webpack = require('webpack')\nmodule.exports = {\nentry: './entry.js',\noutput: {\npath: __dirname,\nfilename: 'bundle.js'\n},\nmodule: {\nloaders: [\n{test: /\\.css$/, loader: 'style!css'}\n]\n},\nplugins: [\nnew webpack.BannerPlugin('This file is created by zhaoda')\n]\n}\n")])])]),s("ul",[s("li",[e._v("然后运行 "),s("code",[e._v("webpack")]),e._v(" ，打开 "),s("code",[e._v("bundle.js")]),e._v(" ，可以看到文件头部出现了我们指定的注释信息")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("/*! This file is created by zhaoda */\n/******/ (function(modules) { // webpackBootstrap\n/******/ // The module cache\n/******/ var installedModules = {};\n// 后面代码省略\n")])])]),s("h2",{attrs:{id:"六、开发环境"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#六、开发环境"}},[e._v("#")]),e._v(" 六、开发环境")]),e._v(" "),s("hr"),e._v(" "),s("ul",[s("li",[e._v("当项目逐渐变大，"),s("code",[e._v("webpack")]),e._v(" 的编译时间会变长，可以通过参数让编译的输出内容带有进度和颜色")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ webpack --progress --colors\n")])])]),s("ul",[s("li",[e._v("如果不想每次修改模块后都重新编译，那么可以启动监听模式。开启监听模式后，没有变化的模块会在编译后缓存到内存中，而不会每次都被重新编译，所以监听模式的整体速度是很快的")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ webpack --progress --colors --watch\n")])])]),s("blockquote",[s("p",[e._v("当然，使用 "),s("code",[e._v("webpack-dev-server")]),e._v("开发服务是一个更好的选择。它将在 localhost:8080 启动一个 "),s("code",[e._v("express")]),e._v(" 静态资源 "),s("code",[e._v("web")]),e._v("服务器，并且会以监听模式自动运行 webpack，在浏览器打开"),s("code",[e._v("http://localhost:8080/")]),e._v("或 "),s("code",[e._v("http://localhost:8080/webpack-dev-server/")]),e._v(" 可以浏览项目中的页面和\n编译后的资源输出，并且通过一个 "),s("code",[e._v("socket.io")]),e._v(" 服务实时监听它们的变化并自动刷新页面")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("# 安装\n$ npm install webpack-dev-server -g\n# 运行\n$ webpack-dev-server --progress --colors\n")])])]),s("h2",{attrs:{id:"七、故障处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#七、故障处理"}},[e._v("#")]),e._v(" 七、故障处理")]),e._v(" "),s("hr"),e._v(" "),s("ul",[s("li",[s("code",[e._v("Webpack")]),e._v(" 的配置比较复杂，很容出现错误，下面是一些通常的故障处理手段")]),e._v(" "),s("li",[e._v("一般情况下，"),s("code",[e._v("webpack")]),e._v("如果出问题，会打印一些简单的错误信息，比如模块没有找到。我们还可以通过参数 "),s("code",[e._v("--display-error-details")]),e._v("来打印错误详情")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ webpack --display-error-details\nHash: a40fbc6d852c51fceadb\nVersion: webpack 1.12.2\nTime: 586ms\nAsset Size Chunks Chunk Names\nbundle.js 12.1 kB 0 [emitted] main\n[0] ./entry.js 153 bytes {0} [built] [1 error]\n[5] ./module.js 43 bytes {0} [built]\n+ 4 hidden modules\nERROR in ./entry.js\nModule not found: Error: Cannot resolve 'file' or 'directory' ./badpathmodule in /Users/zhaoda/data/projects/webpack-handbook/examples\nresolve file\n/Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule doesn't exist\n/Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule.webpack.js doesn't exist\n/Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule.js doesn't exist\n/Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule.web.js doesn't exist\n/Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule.json doesn't exist\nresolve directory\n/Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule doesn't exist (directory default file)\n/Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule/package.json doesn't exist (directory description file)\n[/Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule]\n[/Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule.webpack.js]\n[/Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule.js]\n[/Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule.web.js]\n[/Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule.json]\n@ ./entry.js 3:0-26\n")])])]),s("ul",[s("li",[s("code",[e._v("Webpack")]),e._v("的配置提供了 "),s("code",[e._v("resolve")]),e._v(" 和"),s("code",[e._v("resolveLoader")]),e._v(" 参数来设置模块解析的处理细节， "),s("code",[e._v("resolve")]),e._v("用来配置应用层的模块（要被打包的模块）解析， "),s("code",[e._v("resolveLoader")]),e._v("用来配置"),s("code",[e._v("loader")]),e._v("模块的解析")]),e._v(" "),s("li",[e._v("当引入通过 "),s("code",[e._v("npm")]),e._v(" 安装的 "),s("code",[e._v("node.js")]),e._v(" 模块时，可能出现找不到依赖的错误。"),s("code",[e._v("Node.js")]),e._v("模块的依赖解析算法很简单，是通过查看模块的每一层父目录中的 "),s("code",[e._v("node_modules")]),e._v(" 文件夹来查询依赖的。当出现 "),s("code",[e._v("Node.js")]),e._v("模块依赖查找失败的时候，可以尝试设置 "),s("code",[e._v("resolve.fallback")]),e._v("和"),s("code",[e._v("resolveLoader.fallback")]),e._v(" 来解决问题")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('module.exports = {\nresolve: { fallback: path.join(__dirname, "node_modules") },\nresolveLoader: { fallback: path.join(__dirname, "node_modules") }\n};\n')])])]),s("blockquote",[s("p",[s("code",[e._v("Webpack")]),e._v("中涉及路径配置最好使用绝对路径，建议通过 "),s("code",[e._v('path.resolve(__dirname,"app/folder")')]),e._v(" 或 "),s("code",[e._v('path.join(__dirname, "app", "folder")')]),e._v("的方式来配置，以兼容 "),s("code",[e._v("Windows")]),e._v("环境")])]),e._v(" "),s("h2",{attrs:{id:"八、开发和部署技巧"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#八、开发和部署技巧"}},[e._v("#")]),e._v(" 八、开发和部署技巧")]),e._v(" "),s("hr"),e._v(" "),s("h3",{attrs:{id:"_8-1-启用source-map"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-启用source-map"}},[e._v("#")]),e._v(" 8.1 启用source-map")]),e._v(" "),s("hr"),e._v(" "),s("ul",[s("li",[e._v("现在的代码是合并以后的代码，不利于排错和定位，只需要在config中添加")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("devtool: 'eval-source-map',\n")])])]),s("ul",[s("li",[e._v("这样出错以后就会采用source-map的形式直接显示你出错代码的位置")])]),e._v(" "),s("h3",{attrs:{id:"_8-2-使用preloaders和postloaders"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-使用preloaders和postloaders"}},[e._v("#")]),e._v(" 8.2 使用preLoaders和postLoaders")]),e._v(" "),s("hr"),e._v(" "),s("ul",[s("li",[s("p",[e._v("也许你想在写代码的时候检查自己的"),s("code",[e._v("js")]),e._v("是否符合"),s("code",[e._v("jshint")]),e._v("的规范，那么隆重推荐"),s("code",[e._v("preLoaders")]),e._v("和"),s("code",[e._v("postLoaders")])])]),e._v(" "),s("li",[s("p",[s("code",[e._v("perLoaders")]),e._v("顾名思义就是在"),s("code",[e._v("loaders")]),e._v("执行之前处理的，"),s("code",[e._v("webpack")]),e._v("的处理顺序是"),s("code",[e._v("perLoaders - loaders - postLoaders")])])]),e._v(" "),s("li",[s("p",[e._v("安装"),s("code",[e._v("jshint")])])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm install jshint-loader --save-dev\n")])])]),s("ul",[s("li",[e._v("在"),s("code",[e._v("config")]),e._v("文件中配置")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("module: {\n...\n//和loaders一样的语法，很简单\nperLoaders: [\n{\ntest: /\\.jsx?$/,\ninclude: APP_PATH,\nloader: 'jshint-loader'\n}\n]\n}\n...\n//配置jshint的选项，支持es6的校验\njshint: {\n\"esnext\": true\n},\n")])])]),s("ul",[s("li",[e._v("好了 现在每次npm run start的时候就可以看到jshint的提示信息啦")])]),e._v(" "),s("h3",{attrs:{id:"_8-3-部署上线"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-3-部署上线"}},[e._v("#")]),e._v(" 8.3 部署上线")]),e._v(" "),s("hr"),e._v(" "),s("ul",[s("li",[s("p",[e._v("刚才说的各种情况都是在开发时候的情况，那么假如项目已经开发完了，需要部署上线了。我们应该新创建一个单独的"),s("code",[e._v("config")]),e._v("文件，因为部署上线使用"),s("code",[e._v("webpack")]),e._v("的时候我们不需要一些"),s("code",[e._v("dev-tools")]),e._v(","),s("code",[e._v("dev-server")]),e._v("和"),s("code",[e._v("jshint")]),e._v("校验等")])]),e._v(" "),s("li",[s("p",[e._v("复制我们现有的"),s("code",[e._v("config")]),e._v("文件，命名"),s("code",[e._v("webpack.production.config.js")]),e._v("，将里面关于 "),s("code",[e._v("devServer")]),e._v("等和开发有关的东西删掉")])]),e._v(" "),s("li",[s("p",[e._v("在"),s("code",[e._v("package.json")]),e._v("中添加一个命令")])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('"scripts": {\n"start": "webpack-dev-server --hot --inline",\n"build": "webpack --progress --profile --colors --config webpack.production.config.js"\n},\n')])])]),s("ul",[s("li",[e._v("当要上线的时候,运行")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm run build\n")])])]),s("ul",[s("li",[e._v("可以发现"),s("code",[e._v("build")]),e._v("文件夹中生成了所有东西")])])])}),[],!1,null,null,null);a.default=t.exports}}]);
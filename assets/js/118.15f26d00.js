(window.webpackJsonp=window.webpackJsonp||[]).push([[118],{1358:function(e,r,i){"use strict";i.r(r);var t=i(10),a=Object(t.a)({},(function(){var e=this,r=e.$createElement,i=e._self._c||r;return i("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[i("p",[e._v("搜索引擎的搜索关键词提示功能，我想你应该不陌生吧？为了方便快速输入，当你在搜索引擎的搜索框中，输入要搜索的文字的某一部分的时候，搜索引擎就会自动弹出下拉框，里面是各种关键词提示。你可以直接从下拉框中选择你要搜索的东西，而不用把所有内容都输入进去，一定程度上节省了我们的搜索时间。")]),e._v(" "),i("p",[i("img",{attrs:{src:"http://poetries1.gitee.io/img-repo/2020/07/355.png",alt:""}})]),e._v(" "),i("p",[e._v("尽管这个功能我们几乎天天在用，作为一名工程师，你是否思考过，它是怎么实现的呢？它底层使用的是哪种数据结构和算法呢？")]),e._v(" "),i("p",[e._v("像 Google、百度这样的搜索引擎，它们的关键词提示功能非常全面和精准，肯定做了很多优化，但万变不离其宗，底层最基本的原理就是今天要讲的这种数据结构：Trie 树。")]),e._v(" "),i("h2",{attrs:{id:"什么是“trie-树”？"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#什么是“trie-树”？"}},[e._v("#")]),e._v(" 什么是“Trie 树”？")]),e._v(" "),i("p",[e._v("Trie 树，也叫“字典树”。顾名思义，它是一个树形结构。它是一种专门处理字符串匹配的数据结构，用来解决在一组字符串集合中快速查找某个字符串的问题。")]),e._v(" "),i("p",[e._v("当然，这样一个问题可以有多种解决方法，比如散列表、红黑树，或者我们前面几节讲到的一些字符串匹配算法，但是，Trie 树在这个问题的解决上，有它特有的优点。不仅如此，Trie 树能解决的问题也不限于此，我们一会儿慢慢分析。")]),e._v(" "),i("p",[e._v("现在，我们先来看下，Trie 树到底长什么样子。")]),e._v(" "),i("p",[e._v("我举个简单的例子来说明一下。我们有 6 个字符串，它们分别是：how，hi，her，hello，so，see。我们希望在里面多次查找某个字符串是否存在。如果每次查找，都是拿要查找的字符串跟这 6 个字符串依次进行字符串匹配，那效率就比较低，有没有更高效的方法呢？")]),e._v(" "),i("p",[e._v("这个时候，我们就可以先对这 6 个字符串做一下预处理，组织成 Trie 树的结构，之后每次查找，都是在 Trie 树中进行匹配查找。Trie 树的本质，就是利用字符串之间的公共前缀，将重复的前缀合并在一起。最后构造出来的就是下面这个图中的样子")]),e._v(" "),i("p",[i("img",{attrs:{src:"http://poetries1.gitee.io/img-repo/2020/07/356.png",alt:""}})]),e._v(" "),i("p",[e._v("其中，根节点不包含任何信息。每个节点表示一个字符串中的字符，从根节点到红色节点的一条路径表示一个字符串（注意：红色节点并不都是叶子节点）。")]),e._v(" "),i("p",[e._v("为了让你更容易理解 Trie 树是怎么构造出来的，我画了一个 Trie 树构造的分解过程。构造过程的每一步，都相当于往 Trie 树中插入一个字符串。当所有字符串都插入完成之后，Trie 树就构造好了。")]),e._v(" "),i("p",[i("img",{attrs:{src:"http://poetries1.gitee.io/img-repo/2020/07/357.png",alt:""}})]),e._v(" "),i("p",[e._v("当我们在 Trie 树中查找一个字符串的时候，比如查找字符串“her”，那我们将要查找的字符串分割成单个的字符 h，e，r，然后从 Trie 树的根节点开始匹配。如图所示，绿色的路径就是在 Trie 树中匹配的路径。")]),e._v(" "),i("p",[i("img",{attrs:{src:"http://poetries1.gitee.io/img-repo/2020/07/358.png",alt:""}})]),e._v(" "),i("p",[e._v("如果我们要查找的是字符串“he”呢？我们还用上面同样的方法，从根节点开始，沿着某条路径来匹配，如图所示，绿色的路径，是字符串“he”匹配的路径。但是，路径的最后一个节点“e”并不是红色的。也就是说，“he”是某个字符串的前缀子串，但并不能完全匹配任何字符串。")]),e._v(" "),i("p",[i("img",{attrs:{src:"http://poetries1.gitee.io/img-repo/2020/07/359.png",alt:""}})]),e._v(" "),i("h2",{attrs:{id:"如何实现一棵-trie-树？"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#如何实现一棵-trie-树？"}},[e._v("#")]),e._v(" 如何实现一棵 Trie 树？")]),e._v(" "),i("p",[e._v("知道了 Trie 树长什么样子，我们现在来看下，如何用代码来实现一个 Trie 树。")]),e._v(" "),i("p",[e._v("从刚刚 Trie 树的介绍来看，Trie 树主要有两个操作，一个是将字符串集合构造成 Trie 树。这个过程分解开来的话，就是一个将字符串插入到 Trie 树的过程。另一个是在 Trie 树中查询一个字符串。")]),e._v(" "),i("p",[e._v("了解了 Trie 树的两个主要操作之后，我们再来看下，如何存储一个 Trie 树？")]),e._v(" "),i("p",[e._v("从前面的图中，我们可以看出，Trie 树是一个多叉树。我们知道，二叉树中，一个节点的左右子节点是通过两个指针来存储的，如下所示 Java 代码。那对于多叉树来说，我们怎么存储一个节点的所有子节点的指针呢？")]),e._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[e._v("class BinaryTreeNode {\n  char data;\n  BinaryTreeNode left;\n  BinaryTreeNode right;  \n}\n")])])]),i("p",[e._v("我先介绍其中一种存储方式，也是经典的存储方式，大部分数据结构和算法书籍中都是这么讲的。还记得我们前面讲到的散列表吗？借助散列表的思想，我们通过一个下标与字符一一映射的数组，来存储子节点的指针。这句话稍微有点抽象，不怎么好懂，我画了一张图你可以看看。")]),e._v(" "),i("p",[i("img",{attrs:{src:"http://poetries1.gitee.io/img-repo/2020/07/360.png",alt:""}})]),e._v(" "),i("p",[e._v("假设我们的字符串中只有从 a 到 z 这 26 个小写字母，我们在数组中下标为 0 的位置，存储指向子节点 a 的指针，下标为 1 的位置存储指向子节点 b 的指针，以此类推，下标为 25 的位置，存储的是指向的子节点 z 的指针。如果某个字符的子节点不存在，我们就在对应的下标的位置存储 null。")]),e._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[e._v("class TrieNode {\n  char data;\n  TrieNode children[26];\n}\n")])])]),i("p",[e._v("当我们在 Trie 树中查找字符串的时候，我们就可以通过字符的 ASCII 码减去“a”的 ASCII 码，迅速找到匹配的子节点的指针。比如，d 的 ASCII 码减去 a 的 ASCII 码就是 3，那子节点 d 的指针就存储在数组中下标为 3 的位置中。")]),e._v(" "),i("p",[e._v("描述了这么多，有可能你还是有点懵，我把上面的描述翻译成了代码，你可以结合着一块看下，应该有助于你理解。")]),e._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[e._v("public class Trie {\n  private TrieNode root = new TrieNode('/'); // 存储无意义字符\n \n  // 往 Trie 树中插入一个字符串\n  public void insert(char[] text) {\n    TrieNode p = root;\n    for (int i = 0; i < text.length; ++i) {\n      int index = text[i] - 'a';\n      if (p.children[index] == null) {\n        TrieNode newNode = new TrieNode(text[i]);\n        p.children[index] = newNode;\n      }\n      p = p.children[index];\n    }\n    p.isEndingChar = true;\n  }\n \n  // 在 Trie 树中查找一个字符串\n  public boolean find(char[] pattern) {\n    TrieNode p = root;\n    for (int i = 0; i < pattern.length; ++i) {\n      int index = pattern[i] - 'a';\n      if (p.children[index] == null) {\n        return false; // 不存在 pattern\n      }\n      p = p.children[index];\n    }\n    if (p.isEndingChar == false) return false; // 不能完全匹配，只是前缀\n    else return true; // 找到 pattern\n  }\n \n  public class TrieNode {\n    public char data;\n    public TrieNode[] children = new TrieNode[26];\n    public boolean isEndingChar = false;\n    public TrieNode(char data) {\n      this.data = data;\n    }\n  }\n}\n")])])]),i("p",[e._v("Trie 树的实现，你现在应该搞懂了。现在，我们来看下，在 Trie 树中，查找某个字符串的时间复杂度是多少？")]),e._v(" "),i("p",[e._v("如果要在一组字符串中，频繁地查询某些字符串，用 Trie 树会非常高效。构建 Trie 树的过程，需要扫描所有的字符串，时间复杂度是 O(n)（n 表示所有字符串的长度和）。但是一旦构建成功之后，后续的查询操作会非常高效。")]),e._v(" "),i("p",[e._v("每次查询时，如果要查询的字符串长度是 k，那我们只需要比对大约 k 个节点，就能完成查询操作。跟原本那组字符串的长度和个数没有任何关系。所以说，构建好 Trie 树后，在其中查找字符串的时间复杂度是 O(k)，k 表示要查找的字符串的长度。")]),e._v(" "),i("h2",{attrs:{id:"trie-树真的很耗内存吗？"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#trie-树真的很耗内存吗？"}},[e._v("#")]),e._v(" Trie 树真的很耗内存吗？")]),e._v(" "),i("p",[e._v("前面我们讲了 Trie 树的实现，也分析了时间复杂度。现在你应该知道，Trie 树是一种非常独特的、高效的字符串匹配方法。但是，关于 Trie 树，你有没有听过这样一种说法：“Trie 树是非常耗内存的，用的是一种空间换时间的思路”。这是什么原因呢？")]),e._v(" "),i("p",[e._v("刚刚我们在讲 Trie 树的实现的时候，讲到用数组来存储一个节点的子节点的指针。如果字符串中包含从 a 到 z 这 26 个字符，那每个节点都要存储一个长度为 26 的数组，并且每个数组存储一个 8 字节指针（或者是 4 字节，这个大小跟 CPU、操作系统、编译器等有关）。而且，即便一个节点只有很少的子节点，远小于 26 个，比如 3、4 个，我们也要维护一个长度为 26 的数组。")]),e._v(" "),i("p",[e._v("我们前面讲过，Trie 树的本质是避免重复存储一组字符串的相同前缀子串，但是现在每个字符（对应一个节点）的存储远远大于 1 个字节。按照我们上面举的例子，数组长度为 26，每个元素是 8 字节，那每个节点就会额外需要 26*8=208 个字节。而且这还是只包含 26 个字符的情况。")]),e._v(" "),i("p",[e._v("如果字符串中不仅包含小写字母，还包含大写字母、数字、甚至是中文，那需要的存储空间就更多了。所以，也就是说，在某些情况下，Trie 树不一定会节省存储空间。在重复的前缀并不多的情况下，Trie 树不但不能节省内存，还有可能会浪费更多的内存。")]),e._v(" "),i("p",[e._v("当然，我们不可否认，Trie 树尽管有可能很浪费内存，但是确实非常高效。那为了解决这个内存问题，我们是否有其他办法呢？")]),e._v(" "),i("p",[e._v("我们可以稍微牺牲一点查询的效率，将每个节点中的数组换成其他数据结构，来存储一个节点的子节点指针。用哪种数据结构呢？我们的选择其实有很多，比如有序数组、跳表、散列表、红黑树等。")]),e._v(" "),i("p",[e._v("假设我们用有序数组，数组中的指针按照所指向的子节点中的字符的大小顺序排列。查询的时候，我们可以通过二分查找的方法，快速查找到某个字符应该匹配的子节点的指针。但是，在往 Trie 树中插入一个字符串的时候，我们为了维护数组中数据的有序性，就会稍微慢了点。")]),e._v(" "),i("p",[e._v("替换成其他数据结构的思路是类似的，这里我就不一一分析了，你可以结合前面学过的内容，自己分析一下。")]),e._v(" "),i("p",[e._v("实际上，Trie 树的变体有很多，都可以在一定程度上解决内存消耗的问题。比如，缩点优化，就是对只有一个子节点的节点，而且此节点不是一个串的结束节点，可以将此节点与子节点合并。这样可以节省空间，但却增加了编码难度。这里我就不展开详细讲解了，你如果感兴趣，可以自行研究下")]),e._v(" "),i("p",[i("img",{attrs:{src:"http://poetries1.gitee.io/img-repo/2020/07/361.png",alt:""}})]),e._v(" "),i("h2",{attrs:{id:"trie-树与散列表、红黑树的比较"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#trie-树与散列表、红黑树的比较"}},[e._v("#")]),e._v(" Trie 树与散列表、红黑树的比较")]),e._v(" "),i("p",[e._v("实际上，字符串的匹配问题，笼统上讲，其实就是数据的查找问题。对于支持动态数据高效操作的数据结构，我们前面已经讲过好多了，比如散列表、红黑树、跳表等等。实际上，这些数据结构也可以实现在一组字符串中查找字符串的功能。我们选了两种数据结构，散列表和红黑树，跟 Trie 树比较一下，看看它们各自的优缺点和应用场景。")]),e._v(" "),i("p",[e._v("在刚刚讲的这个场景，在一组字符串中查找字符串，Trie 树实际上表现得并不好。它对要处理的字符串有及其严苛的要求。")]),e._v(" "),i("p",[e._v("第一，字符串中包含的字符集不能太大。我们前面讲到，如果字符集太大，那存储空间可能就会浪费很多。即便可以优化，但也要付出牺牲查询、插入效率的代价。")]),e._v(" "),i("p",[e._v("第二，要求字符串的前缀重合比较多，不然空间消耗会变大很多。")]),e._v(" "),i("p",[e._v("第三，如果要用 Trie 树解决问题，那我们就要自己从零开始实现一个 Trie 树，还要保证没有 bug，这个在工程上是将简单问题复杂化，除非必须，一般不建议这样做。")]),e._v(" "),i("p",[e._v("第四，我们知道，通过指针串起来的数据块是不连续的，而 Trie 树中用到了指针，所以，对缓存并不友好，性能上会打个折扣。")]),e._v(" "),i("p",[e._v("综合这几点，针对在一组字符串中查找字符串的问题，我们在工程中，更倾向于用散列表或者红黑树。因为这两种数据结构，我们都不需要自己去实现，直接利用编程语言中提供的现成类库就行了。")]),e._v(" "),i("p",[e._v("讲到这里，你可能要疑惑了，讲了半天，我对 Trie 树一通否定，还让你用红黑树或者散列表，那 Trie 树是不是就没用了呢？是不是今天的内容就白学了呢？")]),e._v(" "),i("p",[e._v("实际上，Trie 树只是不适合精确匹配查找，这种问题更适合用散列表或者红黑树来解决。Trie 树比较适合的是查找前缀匹配的字符串，也就是类似开篇问题的那种场景。")]),e._v(" "),i("h2",{attrs:{id:"解答开篇"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#解答开篇"}},[e._v("#")]),e._v(" 解答开篇")]),e._v(" "),i("p",[e._v("Trie 树就讲完了，我们来看下开篇提到的问题：如何利用 Trie 树，实现搜索关键词的提示功能？")]),e._v(" "),i("p",[e._v("我们假设关键词库由用户的热门搜索关键词组成。我们将这个词库构建成一个 Trie 树。当用户输入其中某个单词的时候，把这个词作为一个前缀子串在 Trie 树中匹配。为了讲解方便，我们假设词库里只有 hello、her、hi、how、so、see 这 6 个关键词。当用户输入了字母 h 的时候，我们就把以 h 为前缀的 hello、her、hi、how 展示在搜索提示框内。当用户继续键入字母 e 的时候，我们就把以 he 为前缀的 hello、her 展示在搜索提示框内。这就是搜索关键词提示的最基本的算法原理")]),e._v(" "),i("p",[i("img",{attrs:{src:"http://poetries1.gitee.io/img-repo/2020/07/362.png",alt:""}})]),e._v(" "),i("p",[e._v("不过，我讲的只是最基本的实现原理，实际上，搜索引擎的搜索关键词提示功能远非我讲的这么简单。如果再稍微深入一点，你就会想到，上面的解决办法遇到下面几个问题：")]),e._v(" "),i("p",[e._v("我刚讲的思路是针对英文的搜索关键词提示，对于更加复杂的中文来说，词库中的数据又该如何构建成 Trie 树呢？")]),e._v(" "),i("p",[e._v("如果词库中有很多关键词，在搜索提示的时候，用户输入关键词，作为前缀在 Trie 树中可以匹配的关键词也有很多，如何选择展示哪些内容呢？")]),e._v(" "),i("p",[e._v("像 Google 这样的搜索引擎，用户单词拼写错误的情况下，Google 还是可以使用正确的拼写来做关键词提示，这个又是怎么做到的呢？")]),e._v(" "),i("p",[e._v("你可以先思考一下如何来解决，如果不会也没关系，这些问题，我们会在实战篇里具体来讲解。")]),e._v(" "),i("p",[e._v("实际上，Trie 树的这个应用可以扩展到更加广泛的一个应用上，就是自动输入补全，比如输入法自动补全功能、IDE 代码编辑器自动补全功能、浏览器网址输入的自动补全功能等等。")]),e._v(" "),i("h2",{attrs:{id:"内容小结"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#内容小结"}},[e._v("#")]),e._v(" 内容小结")]),e._v(" "),i("p",[e._v("今天我们讲了一种特殊的树，Trie 树。Trie 树是一种解决字符串快速匹配问题的数据结构。如果用来构建 Trie 树的这一组字符串中，前缀重复的情况不是很多，那 Trie 树这种数据结构总体上来讲是比较费内存的，是一种空间换时间的解决问题思路。")]),e._v(" "),i("p",[e._v("尽管比较耗费内存，但是对内存不敏感或者内存消耗在接受范围内的情况下，在 Trie 树中做字符串匹配还是非常高效的，时间复杂度是 O(k)，k 表示要匹配的字符串的长度。")]),e._v(" "),i("p",[e._v("但是，Trie 树的优势并不在于，用它来做动态集合数据的查找，因为，这个工作完全可以用更加合适的散列表或者红黑树来替代。Trie 树最有优势的是查找前缀匹配的字符串，比如搜索引擎中的关键词提示功能这个场景，就比较适合用它来解决，也是 Trie 树比较经典的应用场景。")])])}),[],!1,null,null,null);r.default=a.exports}}]);
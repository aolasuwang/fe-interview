(window.webpackJsonp=window.webpackJsonp||[]).push([[645],{1155:function(t,a,e){"use strict";e.r(a);var s=e(10),o=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"koa2简析结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#koa2简析结构"}},[t._v("#")]),t._v(" koa2简析结构")]),t._v(" "),e("h2",{attrs:{id:"源码文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#源码文件"}},[t._v("#")]),t._v(" 源码文件")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("├── lib\n│   ├── application.js\n│   ├── context.js\n│   ├── request.js\n│   └── response.js\n└── package.json\n")])])]),e("p",[t._v("这个就是 "),e("code",[t._v("GitHub")]),t._v(" "),e("a",{attrs:{href:"https://github.com/koajs/koa/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/koajs/koa"),e("OutboundLink")],1),t._v("上开源的koa2源码的源文件结构，核心代码就是lib目录下的四个文件")]),t._v(" "),e("ul",[e("li",[t._v("application.js 是整个koa2 的入口文件，封装了context，request，response，以及最核心的中间件处理流程。")]),t._v(" "),e("li",[t._v("context.js   处理应用上下文，里面直接封装部分request.js和response.js的方法")]),t._v(" "),e("li",[t._v("request.js   处理http请求")]),t._v(" "),e("li",[t._v("response.js  处理http响应")])]),t._v(" "),e("h2",{attrs:{id:"koa2特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#koa2特性"}},[t._v("#")]),t._v(" koa2特性")]),t._v(" "),e("ul",[e("li",[t._v("只提供封装好http上下文、请求、响应，以及基于"),e("code",[t._v("async/await")]),t._v("的中间件容器。")]),t._v(" "),e("li",[t._v("利用ES7的"),e("code",[t._v("async/await")]),t._v("的来处理传统回调嵌套问题和代替koa@1的generator，但是需要在node.js 7.x的harmony模式下才能支持"),e("code",[t._v("async/await")]),t._v("。")]),t._v(" "),e("li",[t._v("中间件只支持 "),e("code",[t._v("async/await")]),t._v(" 封装的，如果要使用koa@1基于generator中间件，需要通过中间件koa-convert封装一下才能使用。")])])])}),[],!1,null,null,null);a.default=o.exports}}]);